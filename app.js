!function o(a,s,u){function c(t,e){if(!s[t]){if(!a[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(f)return f(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var i=s[t]={exports:{}};a[t][0].call(i.exports,function(e){return c(a[t][1][e]||e)},i,i.exports,o,a,s,u)}return s[t].exports}for(var f="function"==typeof require&&require,e=0;e<u.length;e++)c(u[e]);return c}({1:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.initialParams={heroParams:{height:50,width:30,posX:50,posY:50,spriteLayer:{top:2,left:3,right:0,bottom:1}},dummyEnemyParams:{speed:.8,size:25,spriteLayer:{top:3,left:1,right:0,bottom:2}},smartEnemyParams:{speed:.6,size:25,message:{x:10,y:5,font:"13px Arial"},defenseIncrease:3,speedIncrease:.1},bulletParams:{speed:10,color:"black",size:5,damage:20,speedDecrease:.1,growAfterBuff:2},buffParams:{buffTime:2e4,speedGrowth:2}}},{}],2:[function(e,t,n){"use strict";var l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Bullet=n.currentBullet=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.growBullet=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:h.growAfterBuff;d.size*=e,d.damage*=e,d.speedDecrease*=e},n.shrinkBullet=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:h.growAfterBuff;d.size/=e,d.damage/=e,d.speedDecrease/=e},n.makeBulletDefault=function(){d.size=h.size,d.damage=h.damage,d.speedDecrease=h.speedDecrease};var i=e("./unit");var h=e("../constants").initialParams.bulletParams,d=n.currentBullet={size:h.size,damage:h.damage,speedDecrease:h.speedDecrease};n.Bullet=function(e){function f(e,t,n,r,i){var o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:d.size,a=6<arguments.length&&void 0!==arguments[6]?arguments[6]:d.size,s=7<arguments.length&&void 0!==arguments[7]?arguments[7]:h.speed,u=8<arguments.length&&void 0!==arguments[8]?arguments[8]:h.color;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f);var c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":l(t))&&"function"!=typeof t?e:t}(this,(f.__proto__||Object.getPrototypeOf(f)).call(this,e,o,a,t-d.size/2,n-d.size/2,r,i,s));return c.color=u,c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":l(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(f,i.Unit),r(f,[{key:"newPos",value:function(){return this.x+=this.speed*this.dir.x,this.y+=this.speed*this.dir.y,this}},{key:"update",value:function(e){return e.beginPath(),e.fillStyle=this.color,e.arc(this.x,this.y,d.size,0,2*Math.PI,!0),e.fill(),this}}]),f}()},{"../constants":1,"./unit":6}],3:[function(e,t,n){"use strict";var f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.DummyEnemy=n.BASE_DUMMY_SIZE=n.SPEED=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./unit");var o=e("../constants").initialParams.dummyEnemyParams,l=n.SPEED=o.speed,a=(n.BASE_DUMMY_SIZE=o.size,document.querySelector(".dummy-enemy-sprite"));n.DummyEnemy=function(e){function c(e,t,n,r,i,o,a){var s=7<arguments.length&&void 0!==arguments[7]?arguments[7]:l;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);var u=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":f(t))&&"function"!=typeof t?e:t}(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,e,t,n,r,i,o,a,s));return u.sprite={baseX:0,baseY:0,x:0,y:16*u.getSpriteLayerValue(u.dir.x,u.dir.y),width:16,height:16,deltaX:16,deltaY:16},u}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":f(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,i.Unit),r(c,[{key:"setNextSprite",value:function(){this.sprite.x<16?this.sprite.x+=this.sprite.deltaX:this.sprite.x=this.sprite.baseX}},{key:"update",value:function(e){var t=this.sprite,n=this.x,r=this.y,i=this.width,o=this.height;return e.drawImage(a,t.x,t.y,t.width,t.height,n,r,i,o),this}},{key:"getSpriteLayerValue",value:function(e,t){var n=o.spriteLayer;return Math.abs(e)>Math.abs(t)?0<e?n.right:n.left:0<t?n.bottom:n.top}}]),c}()},{"../constants":1,"./unit":6}],4:[function(e,t,n){"use strict";var f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Hero=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.increaseHeroVelocityByBuff=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:a.speedGrowth;h.speed*=e,h.acceleration*=e,h.maxAccelerationTime*=e},n.decreaseHeroVelocityByDebuff=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:a.speedGrowth;h.speed/=e,h.acceleration/=e,h.maxAccelerationTime/=e};var i=e("./unit"),o=e("../constants");var l=o.initialParams.heroParams,a=o.initialParams.buffParams,h={speed:1,acceleration:5e-4,maxAccelerationTime:3e3},s=document.querySelector(".hero-sprite"),u=document.querySelector(".speed");n.Hero=function(e){function c(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:l.width,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:l.height,r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:l.posX,i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:l.posY,o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:1,a=6<arguments.length&&void 0!==arguments[6]?arguments[6]:0,s=7<arguments.length&&void 0!==arguments[7]?arguments[7]:h.speed;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);var u=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":f(t))&&"function"!=typeof t?e:t}(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,e,t,n,r,i,o,a,s));return u.isImmortal=!1,u.accelerationStartTime=0,u.currentAccelerationTimer="",u.currentBuffs=[],u.sprite={baseX:9,baseY:2,x:9,y:2,width:16,height:26,deltaX:32,deltaY:32},u}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":f(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,i.Unit),r(c,[{key:"setNextSprite",value:function(){this.sprite.y<96?this.sprite.y+=this.sprite.deltaY:this.sprite.y=this.sprite.baseY}},{key:"update",value:function(e){u.innerHTML=~~(100*this.speed)/100;var t=this.sprite,n=this.x,r=this.y,i=this.width,o=this.height;return e.drawImage(s,t.x,t.y,t.width,t.height,n,r,i,o),this}},{key:"updateSpriteDirection",value:function(e){this.sprite.x=this.sprite.baseX+l.spriteLayer[e]*this.sprite.deltaX}},{key:"makeHeroSpeedParamsDefault",value:function(){this.currentAccelerationTimer&&clearInterval(this.currentAccelerationTimer),this.speed=h.speed,this.accelerationStartTime=0}},{key:"setNewSpeedTimer",value:function(){var e=this,t=this.speed;this.accelerationStartTime=0,this.currentAccelerationTimer=setInterval(function(){e.accelerationStartTime+=50,e.speed=t+h.acceleration*e.accelerationStartTime,e.accelerationStartTime>=h.maxAccelerationTime&&clearInterval(e.currentAccelerationTimer)},50)}},{key:"drawBuffs",value:function(n){var r=this,i=a.buffTime/1e3;return this.currentBuffs.forEach(function(e,t){n.fillStyle=e.type,n.fillRect(r.x,r.y-10-10*t,r.width*(i-e.time)/i,7)}),this}}]),c}()},{"../constants":1,"./unit":6}],5:[function(e,t,n){"use strict";var f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.SmartEnemy=n.BASE_SMART_SIZE=void 0;var s=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./unit"),u=e("../utils/geometry");var l=e("../constants").initialParams.smartEnemyParams,a=(n.BASE_SMART_SIZE=l.size,document.querySelector(".smart-enemy-sprite"));n.SmartEnemy=function(e){function c(e,t,n,r,i,o,a){var s=7<arguments.length&&void 0!==arguments[7]?arguments[7]:l.speed;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);var u=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":f(t))&&"function"!=typeof t?e:t}(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,e,t,n,r,i,o,a,s));return u.sprite={baseX:0,baseY:0,x:0,y:0,width:16,height:16,deltaX:16,deltaY:16},u.defense=0,u}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":f(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,i.Unit),r(c,[{key:"setNextSprite",value:function(){this.sprite.x<48?this.sprite.x+=this.sprite.deltaX:this.sprite.x=this.sprite.baseX}},{key:"newPos",value:function(e){return this.updateDirection(e),function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(c.prototype.__proto__||Object.getPrototypeOf(c.prototype),"newPos",this).call(this),this}},{key:"update",value:function(e){var t=this.sprite,n=this.x,r=this.y,i=this.width,o=this.height;return e.drawImage(a,t.x,t.y,t.width,t.height,n,r,i,o),this}},{key:"showWarningMessage",value:function(e){var t=l.message;this.ctx.font=t.font,this.ctx.strokeText(e,this.x+t.x,this.y-t.y)}},{key:"updateDirection",value:function(e){var t=e.isImmortal?{distance:300,isFear:1,message:"You don't catch me!"}:{distance:200,isFear:-1,message:"I see you"};if(!(0,u.isDistanceBetweenUnitsMoreThanSafe)(e,this,t.distance)){var n=(0,u.getCenterCoordinates)(e),r=s(n,2),i=r[0],o=r[1],a=Math.atan2(i-this.x-this.width/2,o-this.y-this.height/2)+Math.PI;this.dir.y=t.isFear*Math.cos(a),this.dir.x=t.isFear*Math.sin(a),this.showWarningMessage(t.message)}}},{key:"eat",value:function(e){var t=l.defenseIncrease,n=l.speedIncrease,r=l.speed,i=this.width*this.height,o=e.width*e.height,a=Math.pow((i+o)/i,.5);this.width*=a,this.height*=a,this.defense=Math.max(this.defense,e.defense)+t,this.speed=this.speed>r?this.speed+=n:r,this.x=(this.x*i+e.x*o)/(i+o),this.y=(this.y*i+e.y*o)/(i+o)}}]),c}()},{"../constants":1,"../utils/geometry":18,"./unit":6}],6:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Unit=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("../utils/geometry");n.Unit=function(){function u(e,t,n,r,i,o,a,s){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),this.ctx=e,this.width=t,this.height=n,this.speed=s,this.x=r,this.y=i,this.dir={x:o,y:a}}return r(u,[{key:"newPos",value:function(){return this.x+=this.speed*this.dir.x,this.y+=this.speed*this.dir.y,(0,i.moveToAnotherSideIfGoBeyonceCanvas)(this.ctx,this),this}}]),u}()},{"../utils/geometry":18}],7:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Game=void 0;var u=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./creatures/hero"),f=e("./creatures/dummyEnemy"),s=e("./creatures/smartEnemy"),c=e("./utils/controls"),l=e("./utils/geometry"),h=e("./creatures/bullet"),o=e("./items/buffs/buff-generator"),a=e("./main"),d=e("./items/landscape"),y=e("./utils/effects"),m=e("./replay");function p(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var v=document.querySelector(".score");document.querySelector(".replay-container"),n.Game=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=e,this.canvas.width=700,this.canvas.height=700,this.ctx=this.canvas.getContext("2d"),this.startTime=Date.now(),this.currentTime=Date.now(),this.hero=new i.Hero(this.ctx),this.landscape=new d.Landscape(this.ctx,40,40),this.dummyEnemies=[],this.smartEnemies=[],this.heroBullets=[],this.timers=[],this.lvl=1,this.buffItem="",this.replay={landscape:this.landscape,units:[]},this.handleHeroPosition()}return r(t,[{key:"start",value:function(){var n=this,e=setInterval(function(){return n.updateGameState()},20),t=setInterval(function(){return n.updateSprites()},200),r=setInterval(function(){return n.addEnemy(n.smartEnemies,s.SmartEnemy,s.BASE_SMART_SIZE)},2e3),i=setInterval(function(){return n.addEnemy(n.dummyEnemies,f.DummyEnemy,f.BASE_DUMMY_SIZE)},4e3),o=setInterval(function(){return n.addBuffItem()},8e3),a=setInterval(function(){return n.lvlUp()},1e4);this.timers.push(e,t,r,i,o,a),(0,c.addHeroControls)(this.hero,function(e,t){return n.addBullet(e,t)})}},{key:"updateGameState",value:function(){this.updateScore(),this.updateCanvasState(),(0,m.addSnapshotToReplay)(this.replay.units,this.currentTime-this.startTime,this.hero,this.dummyEnemies,this.smartEnemies,this.heroBullets,this.buffItem,this.lvl)}},{key:"updateScore",value:function(){this.currentTime=this.currentTime+10;var e=this.currentTime-this.startTime;v.innerHTML=e}},{key:"updateSprites",value:function(){[this.hero].concat(p(this.dummyEnemies),p(this.smartEnemies)).forEach(function(e){return e.setNextSprite()})}},{key:"updateCanvasState",value:function(){this.clearCanvas(this.ctx),this.handleHeroDeath(),this.handleHeroPosition(),this.handleBuffItemPosition(),this.heroBullets=(0,l.getElementsInsideCanvas)(this.ctx,this.heroBullets),this.handleDummyEnemiesPosition(),this.handleSmartEnemiesPosition(),this.handleEnemiesDeath(),this.handleBuffs()}},{key:"clearCanvas",value:function(e){e.clearRect(0,0,e.canvas.clientWidth,e.canvas.clientHeight)}},{key:"drawLandscape",value:function(){this.landscape.draw(this.ctx)}},{key:"handleHeroPosition",value:function(){this.hero.newPos().update(this.ctx).drawBuffs(this.ctx)}},{key:"handleBuffItemPosition",value:function(){this.buffItem&&this.buffItem.draw(this.ctx)}},{key:"handleDummyEnemiesPosition",value:function(){var t=this;this.dummyEnemies.forEach(function(e){return e.newPos().update(t.ctx)})}},{key:"handleSmartEnemiesPosition",value:function(){var r=this;this.smartEnemies=this.smartEnemies.reduce(function(e,t){if(e.some(function(e){return(0,l.ifUnitsTouchEachOther)(e,t)}))return e;var n=r.smartEnemies.find(function(e){return(0,l.ifUnitsTouchEachOther)(e,t)&&e!==t});return n&&t.eat(n),e.push(t),e},[]),this.smartEnemies.forEach(function(e){return e.newPos(r.hero).update(r.ctx)})}},{key:"handleEnemiesDeath",value:function(){var n=this,e=[],r=[],i=[],o=[].concat(p(this.smartEnemies),p(this.dummyEnemies));this.smartEnemies.forEach(function(t){n.heroBullets.some(function(e){return n.shouldEnemyDieIfBulletHitsHim(t,e)})||e.push(t)}),this.dummyEnemies.forEach(function(t){n.heroBullets.some(function(e){return n.shouldEnemyDieIfBulletHitsHim(t,e)})||r.push(t)}),this.heroBullets.forEach(function(t){o.some(function(e){return n.shouldEnemyDieIfBulletHitsHim(e,t)})||i.push(t)}),this.smartEnemies=e,this.dummyEnemies=r,this.heroBullets=i}},{key:"handleHeroDeath",value:function(){var t=this;if(!this.hero.isImmortal){[].concat(p(this.dummyEnemies),p(this.smartEnemies)).some(function(e){return(0,l.ifUnitsTouchEachOther)(t.hero,e,10)})&&this.finishGame()}}},{key:"finishGame",value:function(){var e=this;(0,a.showReplayButton)(),this.clearPreviousGameState(),(0,a.showLoseMessage)(),(0,a.subscribeToShowReplay)(function(){return(0,m.showReplay)(e.replay,e.ctx)}),document.addEventListener("keydown",a.initializeGame,{once:!0})}},{key:"clearPreviousGameState",value:function(){this.timers.map(function(e){return clearInterval(e)}),this.hero.currentBuffs.map(function(e){return clearInterval(e.timer)}),(0,h.makeBulletDefault)()}},{key:"handleBuffs",value:function(){(0,l.ifUnitsTouchEachOther)(this.hero,this.buffItem)&&(this.buffItem.activateBuff(this),this.buffItem="")}},{key:"lvlUp",value:function(){this.addEnemyStack(this.smartEnemies,s.SmartEnemy,s.BASE_SMART_SIZE),this.addEnemyStack(this.dummyEnemies,f.DummyEnemy,f.BASE_DUMMY_SIZE),this.lvl++,(0,a.updateLevel)(this.lvl)}},{key:"shouldEnemyDieIfBulletHitsHim",value:function(e,t){var n=(0,l.ifUnitsTouchEachOther)(e,t);return n&&(e=(0,y.damageUnit)(e)),!(!n||!(e.width<25||e.height<25))}},{key:"addEnemy",value:function(e,t,n){var r=this.generateRandomPositionAndDirection(this.hero,n),i=r.size,o=r.x,a=r.y,s=r.alfaX,u=r.alfaY,c=new t(this.ctx,i,i,o,a,s,u,f.SPEED+.15*this.lvl);e.push(c)}},{key:"addEnemyStack",value:function(e,t,n){var r=this.generateRandomPositionAndDirection(this.hero,n),i=r.size,o=r.x,a=r.y,s=r.alfaX,u=r.alfaY,c=new t(this.ctx,i,i,o,a,s,u);e.push(c);for(var f=0;f<this.lvl;f++){var l=this.generateRandomPositionAndDirection(c,n,!0,100),h=l.size,d=l.x,y=l.y,m=new t(this.ctx,h,h,d,y,s,u);e.push(m)}}},{key:"addBullet",value:function(e,t){var n=(0,l.getCenterCoordinates)(this.hero),r=u(n,2),i=r[0],o=r[1],a=Math.atan2(i-e,o-t)+Math.PI,s=new h.Bullet(this.ctx,i,o,Math.sin(a),Math.cos(a));this.heroBullets.push(s)}},{key:"addBuffItem",value:function(){var e=this.generateRandomPositionAndDirection(this.hero,0),t=e.x,n=e.y,r=new o.RandomBuff(this.ctx,20,20,t,n);this.buffItem=r}},{key:"generateRandomPositionAndDirection",value:function(e,t){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:200,i=void 0,o=void 0,a=20*Math.random()+t+5*this.lvl,s=void 0;do{var u={x:i=Math.random()*this.ctx.canvas.clientWidth,y:o=Math.random()*this.ctx.canvas.clientHeight,width:a,height:a};s=(0,l.isDistanceBetweenUnitsMoreThanSafe)(e,u,r)}while(n?s:!s);return{x:i,y:o,alfaX:2*Math.random()-1,alfaY:2*Math.random()-1,size:a}}}]),t}()},{"./creatures/bullet":2,"./creatures/dummyEnemy":3,"./creatures/hero":4,"./creatures/smartEnemy":5,"./items/buffs/buff-generator":8,"./items/landscape":13,"./main":14,"./replay":15,"./utils/controls":16,"./utils/effects":17,"./utils/geometry":18}],8:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.buffTypes=void 0,n.RandomBuff=function(e,t,n,r,i){var o=a[~~(3*Math.random())];return new o.constructor(e,t,n,r,i,o.selector)};var r=e("./sword"),i=e("./shield"),o=e("./shoes"),a=n.buffTypes=[{selector:".sword",constructor:r.Sword,color:"red"},{selector:".shield",constructor:i.Shield,color:"black"},{selector:".shoes",constructor:o.Shoes,color:"blue"}]},{"./shield":10,"./shoes":11,"./sword":12}],9:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.Item=function(){function a(e,t,n,r,i,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),this.ctx=e,this.width=t,this.height=n,this.x=r,this.y=i,this.sprite={x:0,y:0,width:16,height:16},this.image=document.querySelector(o)}return r(a,[{key:"draw",value:function(e){var t=this.image,n=this.sprite,r=this.x,i=this.y,o=this.width,a=this.height;return e.drawImage(t,n.x,n.y,n.width,n.height,r,i,o,a),this}}]),a}()},{}],10:[function(e,t,n){"use strict";var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Shield=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./item"),o=e("../../utils/effects"),u=e("./buff-generator");var c=e("../../constants").initialParams.buffParams;n.Shield=function(e){function a(e,t,n,r,i,o){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":s(t))&&"function"!=typeof t?e:t}(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,e,t,n,r,i,o))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,i.Item),r(a,[{key:"activateBuff",value:function(t){(0,o.addBuffIndicator)(t.hero,u.buffTypes[1].color),t.hero.isImmortal=!0;var e=setTimeout(function(){var e=t.hero.currentBuffs.some(function(e){return e.color===u.buffTypes[1].color});t.hero.isImmortal=!e},c.buffTime);t.timers.push(e)}}]),a}()},{"../../constants":1,"../../utils/effects":17,"./buff-generator":8,"./item":9}],11:[function(e,t,n){"use strict";var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Shoes=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./item"),o=e("../../creatures/hero"),u=e("../../utils/effects"),c=e("./buff-generator");function f(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var l=e("../../constants").initialParams.buffParams;n.Shoes=function(e){function a(e,t,n,r,i,o){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":s(t))&&"function"!=typeof t?e:t}(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,e,t,n,r,i,o))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,i.Item),r(a,[{key:"activateBuff",value:function(e){(0,u.addBuffIndicator)(e.hero,c.buffTypes[2].color),(0,o.increaseHeroVelocityByBuff)();var t=[].concat(f(e.smartEnemies),f(e.dummyEnemies));t.forEach(function(e){return e.speed/=5});var n=setTimeout(function(){(0,o.decreaseHeroVelocityByDebuff)(),t.forEach(function(e){return e.speed*=5})},l.buffTime);e.timers.push(n)}}]),a}()},{"../../constants":1,"../../creatures/hero":4,"../../utils/effects":17,"./buff-generator":8,"./item":9}],12:[function(e,t,n){"use strict";var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Sword=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./item"),o=e("../../creatures/bullet"),u=e("../../utils/effects"),c=e("./buff-generator");var f=e("../../constants").initialParams.buffParams;n.Sword=function(e){function a(e,t,n,r,i,o){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":s(t))&&"function"!=typeof t?e:t}(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,e,t,n,r,i,o))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,i.Item),r(a,[{key:"activateBuff",value:function(e){(0,u.addBuffIndicator)(e.hero,c.buffTypes[0].color),(0,o.growBullet)();var t=setTimeout(function(){return(0,o.shrinkBullet)()},f.buffTime);e.timers.push(t)}}]),a}()},{"../../constants":1,"../../creatures/bullet":2,"../../utils/effects":17,"./buff-generator":8,"./item":9}],13:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.Landscape=function(){function r(e,t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.ctx=e,this.width=t,this.height=n,this.canvasWidth=e.canvas.clientWidth,this.canvasHeight=e.canvas.clientWidth,this.sprite={x:0,y:0,width:32,height:32},this.image=document.querySelector(".landscape")}return i(r,[{key:"draw",value:function(e){for(var t=this.image,n=this.sprite,r=this.canvasWidth,i=this.canvasHeight,o=this.width,a=this.height,s=0;s<r;s+=o)for(var u=0;u<i;u+=a)e.drawImage(t,n.x,n.y,n.width,n.height,s,u,o,a);return this}}]),r}()},{}],14:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.updateLevel=function(e){u.innerHTML=e},n.subscribeToShowReplay=function(e){c.addEventListener("click",e,{once:!0})},n.hideReplayButton=h,n.showReplayButton=function(){c.style.display="block"},n.initializeGame=d,n.sendResultToDatabase=m,n.getScoreFromDatabase=p,n.getTop10=v,n.showLoseMessage=function(){var e=a.innerText,t=prompt("Sorry, but you lose, your score is "+e,"User");m(+e,t||"User")};var r=e("./game-arena"),i=void 0,o=document.querySelector("canvas"),a=document.querySelector(".score"),s=document.querySelector(".speed"),u=document.querySelector(".level"),c=document.querySelector(".replay-container"),f="https://shooter-game-2a1be.firebaseio.com/statistics/.json",l=[];function h(){c.style.display="none"}function d(){p(),h(),i=new r.Game(o),a.innerHTML=0,s.innerHTML=0,u.innerHTML=1,document.addEventListener("keydown",y,{once:!0})}function y(){i.start()}function m(e,t){fetch(f,{method:"POST",body:JSON.stringify({score:e,name:t})})}function p(){fetch(f+'?orderBy="score"&limitToLast=8',{method:"GET"}).then(function(e){return e.json()}).then(function(e){l=v(e),console.log(l)}).catch(function(){return console.log("misterious error")})}function v(e){return Object.values(e).sort(function(e,t){return e.score<t.score})}d()},{"./game-arena":7}],15:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.addSnapshotToReplay=function(e,t,n,r,i,o,a,s){e.push((u=t,c=n,f=r,l=i,h=o,d=a,y=s,{time:u,hero:{unit:c,posX:~~c.x,posY:~~c.y,spriteX:c.sprite.x,spriteY:c.sprite.y},dummyEnemies:m(f),smartEnemies:m(l),heroBullets:m(h),buffItem:d,lvl:y}));var u,c,f,l,h,d,y},n.showReplay=function(a,s){var u=0,c=setInterval(function(){var e=a.units[u],t=e.hero,n=e.dummyEnemies,r=e.smartEnemies,i=e.lvl,o=[t].concat(h(n),h(r));o.forEach(function(e){return e.unit.setNextSprite()}),(0,l.updateLevel)(i)},200),f=setInterval(function(){var e=a.units[u],t=e.hero,n=e.dummyEnemies,r=e.smartEnemies,i=e.heroBullets,o=e.buffItem;s.clearRect(0,0,s.canvas.clientWidth,s.canvas.clientHeight),d(t),t.unit.sprite.x=t.spriteX,t.unit.sprite.y=t.spriteY,t.unit.newPos().update(s),y(s,n),y(s,r,t.unit),y(s,i),o&&o.draw(s),++u===a.units.length-1&&(clearInterval(c),clearInterval(f),(0,l.hideReplayButton)(),(0,l.initializeGame)())},20)};var l=e("./main");function h(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function m(e){return e.map(function(e){return{unit:e,posX:~~e.x,posY:~~e.y,width:~~e.width,height:~~e.height}})}function d(e){e.unit.x=e.posX,e.unit.y=e.posY}function y(t,e,n){e.forEach(function(e){d(e),e.unit.width=e.width,e.unit.height=e.height,e.unit.newPos(n).update(t)})}},{"./main":14}],16:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.addHeroControls=function(e,t){i=e,o=i.dir,a=void 0,document.addEventListener("keydown",function(e){var t,n,r;switch(t=a,n=e.keyCode,r=i,a=t!==n?(r.makeHeroSpeedParamsDefault(),r.setNewSpeedTimer(),n):t,e.keyCode){case 38:i.updateSpriteDirection("top"),o.y=-1,o.x=0;break;case 39:i.updateSpriteDirection("right"),o.y=0,o.x=1;break;case 40:i.updateSpriteDirection("bottom"),o.y=1,o.x=0;break;case 37:i.updateSpriteDirection("left"),o.x=-1,o.y=0;break;case 17:o.x=0,o.y=0}}),n=t,r.addEventListener("click",function(e){n(e.offsetX,e.offsetY)});var n;var i,o,a};var r=document.querySelector("canvas")},{}],17:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.damageUnit=function(e){var t=u.currentBullet.speedDecrease,n=e.width*e.height,r=(o=e,a=u.currentBullet.damage,s=o.defense||0,0<a-s?a-s:6),i=(n-r)/n;var o,a,s;return e.width*=i,e.height*=i,e.speed>t&&(e.speed-=t),e},n.addBuffIndicator=function(e,t){var n=Date.now(),r={id:n,time:0,type:t};e.currentBuffs.push(r),i=e,o=n,a=i.currentBuffs.find(function(e){return o===e.id}),a.timer=setInterval(function(){a.time+=1,a.time>=s.buffTime/1e3&&(clearInterval(a.timer),i.currentBuffs.shift())},1e3);var i,o,a};var u=e("../creatures/bullet"),s=e("../constants").initialParams.buffParams},{"../constants":1,"../creatures/bullet":2}],18:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var l=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};function h(e){return[e.x+.5*e.width,e.y+.5*e.height]}function r(e,t){var n=h(e),r=l(n,2),i=r[0],o=r[1],a=h(t),s=l(a,2),u=s[0],c=s[1];return Math.pow(Math.pow(i-u,2)+Math.pow(o-c,2),.5)}n.getCenterCoordinates=h,n.getDistanceBetweenUnits=r,n.ifUnitsTouchEachOther=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,r=h(e),i=l(r,2),o=i[0],a=i[1],s=h(t),u=l(s,2),c=u[0],f=u[1];return Math.abs(c-o)<(e.width+t.width-d-n)/2&&Math.abs(f-a)<(e.height+t.height-d-n)/2},n.isDistanceBetweenUnitsMoreThanSafe=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:i;return r(e,t)>n},n.mergeUnits=function(e,t){var n=e.width*e.height,r=t.width*t.height,i=Math.pow((n+r)/n,.5);return e.width*=i,e.height*=i,e},n.moveToAnotherSideIfGoBeyonceCanvas=function(e,t){var n=e.canvas.clientWidth,r=e.canvas.clientHeight;t.x>n?t.x=0:t.x<0&&(t.x=n);t.y>r?t.y=0:t.y<0&&(t.y=r)},n.getElementsInsideCanvas=function(t,e){var n=t.canvas.clientWidth,r=t.canvas.clientHeight,i=void 0;return e.filter(function(e){return(i=e.x<n&&0<e.x&&e.y<r&&0<e.y)&&e.newPos().update(t),i})};var d=2;var i=200},{}]},{},[14]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
