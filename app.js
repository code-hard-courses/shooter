!function o(a,s,u){function c(t,e){if(!s[t]){if(!a[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(l)return l(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var i=s[t]={exports:{}};a[t][0].call(i.exports,function(e){return c(a[t][1][e]||e)},i,i.exports,o,a,s,u)}return s[t].exports}for(var l="function"==typeof require&&require,e=0;e<u.length;e++)c(u[e]);return c}({1:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.heroParams={height:50,width:30,posX:50,posY:50,spriteLayer:{top:3,left:1,right:2,bottom:0}},n.buffParams={buffTime:2e4,speedGrowth:1.6},n.bulletParams={speed:10,color:"red",colorSecond:"yellow",size:5,damage:35,speedDecrease:.1,growAfterBuff:2,minDamage:10,minCreatureSize:30},n.smartEnemyParams={speed:.6,size:25,message:{x:10,y:5,font:"13px Arial"},spriteLayer:{top:3,left:1,right:2,bottom:0},defenseIncrease:3,speedIncrease:.1,maxSize:100,fearDistance:300,visibilityDistance:200},n.dummyEnemyParams={speed:.8,size:25,spriteLayer:{top:3,left:1,right:2,bottom:0}},n.intervals={updateGameState:20,updateSprites:200,addSmartEnemy:3e3,addDummyEnemy:4e4,addBuffItem:8e3,lvlUp:13e3},n.lvlBuffs={speedIncrease:.25,sizeIncrease:2}},{}],2:[function(e,t,n){"use strict";var f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Bullet=n.currentBullet=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.growBullet=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:h.bulletParams.growAfterBuff;d.size*=e,d.damage*=e,d.speedDecrease*=e},n.shrinkBullet=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:h.bulletParams.growAfterBuff;d.size/=e,d.damage/=e,d.speedDecrease/=e},n.makeBulletDefault=function(){d.size=h.bulletParams.size,d.damage=h.bulletParams.damage,d.speedDecrease=h.bulletParams.speedDecrease};var i=e("./unit"),h=e("../constants");var d=n.currentBullet={size:h.bulletParams.size,damage:h.bulletParams.damage,speedDecrease:h.bulletParams.speedDecrease};n.Bullet=function(e){function l(e,t,n,r,i){var o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:d.size,a=6<arguments.length&&void 0!==arguments[6]?arguments[6]:d.size,s=7<arguments.length&&void 0!==arguments[7]?arguments[7]:h.bulletParams.speed,u=8<arguments.length&&void 0!==arguments[8]?arguments[8]:h.bulletParams.color;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l);var c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":f(t))&&"function"!=typeof t?e:t}(this,(l.__proto__||Object.getPrototypeOf(l)).call(this,e,o,a,t-d.size/2,n-d.size/2,r,i,s));return c.color=u,c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":f(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(l,i.Unit),r(l,[{key:"newPos",value:function(){return this.x+=this.speed*this.dir.x,this.y+=this.speed*this.dir.y,this}},{key:"update",value:function(e){return e.beginPath(),e.fillStyle=this.color,e.arc(this.x,this.y,this.width,0,2*Math.PI,!0),e.fill(),e.beginPath(),e.fillStyle=h.bulletParams.colorSecond,e.arc(this.x+2,this.y+2,this.width/2,0,2*Math.PI,!0),e.fill(),this}}]),l}()},{"../constants":1,"./unit":6}],3:[function(e,t,n){"use strict";var l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.DummyEnemy=n.BASE_DUMMY_SIZE=n.SPEED=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./unit"),o=e("../constants");var f=n.SPEED=o.dummyEnemyParams.speed,a=(n.BASE_DUMMY_SIZE=o.dummyEnemyParams.size,document.querySelector(".ice-demon"));n.DummyEnemy=function(e){function c(e,t,n,r,i,o,a){var s=7<arguments.length&&void 0!==arguments[7]?arguments[7]:f;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);var u=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":l(t))&&"function"!=typeof t?e:t}(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,e,t,n,r,i,o,a,s));return u.sprite={baseX:1,baseY:0,x:0,y:50*u.getSpriteLayerValue(u.dir.x,u.dir.y),width:34,height:48,deltaX:50,deltaY:50},u}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":l(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,i.Unit),r(c,[{key:"setNextSprite",value:function(){this.sprite.x<100?this.sprite.x+=this.sprite.deltaX:this.sprite.x=this.sprite.baseX}},{key:"update",value:function(e){var t=this.sprite,n=this.x,r=this.y,i=this.width,o=this.height;return e.drawImage(a,t.x,t.y,t.width,t.height,n,r,i,o),this}},{key:"getSpriteLayerValue",value:function(e,t){var n=o.dummyEnemyParams.spriteLayer;return Math.abs(e)>Math.abs(t)?0<e?n.right:n.left:0<t?n.bottom:n.top}}]),c}()},{"../constants":1,"./unit":6}],4:[function(e,t,n){"use strict";var l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Hero=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.increaseHeroVelocityByBuff=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:f.buffParams.speedGrowth;h.speed*=e,h.acceleration*=e,h.maxAccelerationTime*=e},n.decreaseHeroVelocityByDebuff=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:f.buffParams.speedGrowth;h.speed/=e,h.acceleration/=e,h.maxAccelerationTime/=e};var i=e("./unit"),f=e("../constants");var h={speed:1,acceleration:5e-4,maxAccelerationTime:3e3},a=document.querySelector(".hero-sprite");n.Hero=function(e){function c(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:f.heroParams.width,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:f.heroParams.height,r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:f.heroParams.posX,i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:f.heroParams.posY,o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0,a=6<arguments.length&&void 0!==arguments[6]?arguments[6]:1,s=7<arguments.length&&void 0!==arguments[7]?arguments[7]:h.speed;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);var u=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":l(t))&&"function"!=typeof t?e:t}(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,e,t,n,r,i,o,a,s));return u.isImmortal=!1,u.accelerationStartTime=0,u.currentAccelerationTimer="",u.currentBuffs=[],u.sprite={baseX:2,baseY:1,x:2,y:1,width:27,height:32,deltaX:32,deltaY:32},u}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":l(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,i.Unit),r(c,[{key:"setNextSprite",value:function(){this.sprite.x<64?this.sprite.x+=this.sprite.deltaX:this.sprite.x=this.sprite.baseX}},{key:"update",value:function(e){var t=this.sprite,n=this.x,r=this.y,i=this.width,o=this.height;return document.querySelector(".speed").innerHTML=~~(100*this.speed)/100,e.drawImage(a,t.x,t.y,t.width,t.height,n,r,i,o),this}},{key:"updateSpriteDirection",value:function(e){this.sprite.y=this.sprite.baseY+f.heroParams.spriteLayer[e]*this.sprite.deltaY}},{key:"makeHeroSpeedParamsDefault",value:function(){this.currentAccelerationTimer&&clearInterval(this.currentAccelerationTimer),this.speed=h.speed,this.accelerationStartTime=0}},{key:"setNewSpeedTimer",value:function(){var e=this,t=this.speed;this.accelerationStartTime=0,this.currentAccelerationTimer=setInterval(function(){e.accelerationStartTime+=50,e.speed=t+h.acceleration*e.accelerationStartTime,e.accelerationStartTime>=h.maxAccelerationTime&&clearInterval(e.currentAccelerationTimer)},50)}},{key:"drawBuffs",value:function(n){var r=this,i=f.buffParams.buffTime/1e3;return this.currentBuffs.forEach(function(e,t){n.fillStyle=e.type,n.fillRect(r.x,r.y-10-10*t,r.width*(i-e.time)/i,7)}),this}}]),c}()},{"../constants":1,"./unit":6}],5:[function(e,t,n){"use strict";var l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.SmartEnemy=n.BASE_SMART_SIZE=void 0;var s=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./unit"),u=e("../utils/geometryUtils"),f=e("../constants");n.BASE_SMART_SIZE=f.smartEnemyParams.size;var a=document.querySelector(".mashroom");n.SmartEnemy=function(e){function c(e,t,n,r,i,o,a){var s=7<arguments.length&&void 0!==arguments[7]?arguments[7]:f.smartEnemyParams.speed;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);var u=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":l(t))&&"function"!=typeof t?e:t}(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,e,t,n,r,i,o,a,s));return u.sprite={baseX:6,baseY:3,x:6,y:48*u.getSpriteLayerValue(u.dir.x,u.dir.y)+3,width:34,height:47,deltaX:48,deltaY:48},u.defense=0,u}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":l(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,i.Unit),r(c,[{key:"setNextSprite",value:function(){this.sprite.x<96?this.sprite.x+=this.sprite.deltaX:this.sprite.x=this.sprite.baseX}},{key:"newPos",value:function(e){return this.sprite.y=48*this.getSpriteLayerValue(this.dir.x,this.dir.y)+this.sprite.baseY,this.updateDirection(e),function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(c.prototype.__proto__||Object.getPrototypeOf(c.prototype),"newPos",this).call(this),this}},{key:"update",value:function(e){var t=this.sprite,n=this.x,r=this.y,i=this.width,o=this.height;return e.drawImage(a,t.x,t.y,t.width,t.height,n,r,i,o),this}},{key:"getSpriteLayerValue",value:function(e,t){var n=f.smartEnemyParams.spriteLayer;return Math.abs(e)>Math.abs(t)?0<e?n.right:n.left:0<t?n.bottom:n.top}},{key:"showWarningMessage",value:function(e){var t=f.smartEnemyParams.message;this.ctx.font=t.font,this.ctx.strokeText(e,this.x+t.x,this.y-t.y)}},{key:"updateDirection",value:function(e){var t=e.isImmortal?{distance:f.smartEnemyParams.fearDistance,isFear:1,message:"You don't catch me!"}:{distance:f.smartEnemyParams.visibilityDistance,isFear:-1,message:"I see you!"};if(!(0,u.isDistanceBetweenUnitsMoreThanSafe)(e,this,t.distance)){var n=(0,u.getCenterCoordinates)(e),r=s(n,2),i=r[0],o=r[1],a=Math.atan2(i-this.x-this.width/2,o-this.y-this.height/2)+Math.PI;this.dir.y=t.isFear*Math.cos(a),this.dir.x=t.isFear*Math.sin(a),this.showWarningMessage(t.message)}}},{key:"eat",value:function(e){var t=f.smartEnemyParams.defenseIncrease,n=f.smartEnemyParams.speedIncrease,r=f.smartEnemyParams.speed,i=this.width*this.height,o=e.width*e.height,a=Math.pow((i+o)/i,.5);this.width*=a,this.height*=a,this.defense=Math.max(this.defense,e.defense)+t;var s=Math.max(this.speed,e.speed);this.speed=r<s?s+=n:r,this.x=(this.x*i+e.x*o)/(i+o),this.y=(this.y*i+e.y*o)/(i+o)}}]),c}()},{"../constants":1,"../utils/geometryUtils":20,"./unit":6}],6:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Unit=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("../utils/geometryUtils");n.Unit=function(){function u(e,t,n,r,i,o,a,s){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),this.ctx=e,this.width=t,this.height=n,this.speed=s,this.x=r,this.y=i,this.dir={x:o,y:a}}return r(u,[{key:"newPos",value:function(){return this.x+=this.speed*this.dir.x,this.y+=this.speed*this.dir.y,(0,i.moveToAnotherSideIfGoBeyonceCanvas)(this.ctx,this),this}}]),u}()},{"../utils/geometryUtils":20}],7:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Game=void 0;var u=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./main"),o=e("./replay"),a=e("./utils/effectsUtils"),s=e("./utils/controlsUtils"),c=e("./utils/canvasUtils"),f=e("./utils/geometryUtils"),l=e("./utils/userUtils"),y=e("./creatures/dummyEnemy"),h=e("./creatures/smartEnemy"),d=e("./creatures/bullet"),m=e("./creatures/hero"),p=e("./items/buffs/buffGenerator"),v=e("./items/landscape"),b=e("./constants");function g(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}n.Game=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=e,this.canvas.width=700,this.canvas.height=700,this.ctx=this.canvas.getContext("2d"),this.startTime=Date.now(),this.currentTime=Date.now(),this.hero=new m.Hero(this.ctx),this.landscape=new v.Landscape(this.ctx,96,72),this.dummyEnemies=[],this.smartEnemies=[],this.heroBullets=[],this.timers=[],this.lvl=1,this.buffItem="",this.replay={landscape:this.landscape,units:[]},this.drawLandscape(),this.handleHeroPosition()}return r(t,[{key:"start",value:function(){var n=this,e=setInterval(function(){return n.updateGameState()},b.intervals.updateGameState),t=setInterval(function(){return n.updateSprites()},b.intervals.updateSprites),r=setInterval(function(){return n.addEnemy(n.smartEnemies,h.SmartEnemy,h.BASE_SMART_SIZE)},b.intervals.addSmartEnemy),i=setInterval(function(){return n.addEnemy(n.dummyEnemies,y.DummyEnemy,y.BASE_DUMMY_SIZE)},b.intervals.addDummyEnemy),o=setInterval(function(){return n.addBuffItem()},b.intervals.addBuffItem),a=setInterval(function(){return n.lvlUp()},b.intervals.lvlUp);this.timers.push(e,t,r,i,o,a),(0,s.addHeroControls)(this.hero,function(e,t){return n.addBullet(e,t)})}},{key:"updateGameState",value:function(){this.updateCanvasState(),this.currentTime=(0,l.updateScoreLabel)(this.currentTime,this.startTime),(0,o.addSnapshotToReplay)(this.replay.units,this.currentTime-this.startTime,this.hero,this.dummyEnemies,this.smartEnemies,this.heroBullets,this.buffItem,this.lvl)}},{key:"updateSprites",value:function(){[this.hero].concat(g(this.dummyEnemies),g(this.smartEnemies)).forEach(function(e){return e.setNextSprite()})}},{key:"updateCanvasState",value:function(){(0,c.clearCanvas)(this.ctx),this.drawLandscape(),this.handleHeroDeath(),this.handleHeroPosition(),this.handleBuffItemPosition(),this.heroBullets=(0,f.getElementsInsideCanvas)(this.ctx,this.heroBullets),this.handleDummyEnemiesPosition(),this.handleSmartEnemiesPosition(),this.handleEnemiesDeath(),this.handleBuffs()}},{key:"drawLandscape",value:function(){this.landscape.draw(this.ctx)}},{key:"handleHeroPosition",value:function(){this.hero.newPos().update(this.ctx).drawBuffs(this.ctx)}},{key:"handleBuffItemPosition",value:function(){this.buffItem&&this.buffItem.draw(this.ctx)}},{key:"handleDummyEnemiesPosition",value:function(){var t=this;this.dummyEnemies.forEach(function(e){return e.newPos().update(t.ctx)})}},{key:"handleSmartEnemiesPosition",value:function(){var r=this;this.smartEnemies=this.smartEnemies.reduce(function(e,t){if(e.some(function(e){return(0,f.ifUnitsTouchEachOther)(e,t)}))return e;var n=r.smartEnemies.find(function(e){return(0,f.ifUnitsTouchEachOther)(e,t)&&e!==t});return n&&t.eat(n),e.push(t),e},[]),this.smartEnemies.forEach(function(e){return e.newPos(r.hero).update(r.ctx)})}},{key:"handleEnemiesDeath",value:function(){var e=this,n=[],r=[],i=[],o=[].concat(g(this.smartEnemies),g(this.dummyEnemies));this.smartEnemies.forEach(function(t){e.heroBullets.some(function(e){return(0,a.shouldEnemyDieIfBulletHitsHim)(t,e)})||n.push(t)}),this.dummyEnemies.forEach(function(t){e.heroBullets.some(function(e){return(0,a.shouldEnemyDieIfBulletHitsHim)(t,e)})||r.push(t)}),this.heroBullets.forEach(function(t){o.some(function(e){return(0,a.shouldEnemyDieIfBulletHitsHim)(e,t)})||i.push(t)}),this.smartEnemies=n,this.dummyEnemies=r,this.heroBullets=i}},{key:"handleHeroDeath",value:function(){var t=this;this.hero.isImmortal||[].concat(g(this.dummyEnemies),g(this.smartEnemies)).some(function(e){return(0,f.ifUnitsTouchEachOther)(t.hero,e,10)})&&this.finishGame()}},{key:"finishGame",value:function(){var e=this;this.stopGameAndClearState(),(0,l.showReplayButton)(),(0,l.showLoseMessage)(),(0,l.subscribeToShowReplay)(function(){return(0,o.showReplay)(e.replay,e.ctx)}),document.addEventListener("keydown",i.initializeGame,{once:!0})}},{key:"stopGameAndClearState",value:function(){this.timers.map(function(e){return clearInterval(e)}),this.hero.currentBuffs.map(function(e){return clearInterval(e.timer)}),(0,d.makeBulletDefault)()}},{key:"handleBuffs",value:function(){(0,f.ifUnitsTouchEachOther)(this.hero,this.buffItem)&&(this.buffItem.activateBuff(this),this.buffItem="")}},{key:"lvlUp",value:function(){this.addEnemyStack(this.dummyEnemies,y.DummyEnemy,y.BASE_DUMMY_SIZE),this.lvl++,(0,l.updateLevelLabel)(this.lvl)}},{key:"addEnemy",value:function(e,t,n){var r=this.generateRandomPositionAndDirection(this.hero,n),i=r.size,o=r.x,a=r.y,s=r.alfaX,u=r.alfaY,c=new t(this.ctx,.8*i,i,o,a,s,u,y.SPEED+b.lvlBuffs.speedIncrease*this.lvl);e.push(c)}},{key:"addEnemyStack",value:function(e,t,n){var r=this.generateRandomPositionAndDirection(this.hero,n),i=r.size,o=r.x,a=r.y,s=r.alfaX,u=r.alfaY,c=new t(this.ctx,.8*i,i,o,a,s,u,y.SPEED+b.lvlBuffs.speedIncrease*this.lvl);e.push(c);for(var l=0;l<this.lvl;l++){var f=this.generateRandomPositionAndDirection(c,n,!0,100),h=f.size,d=f.x,m=f.y,p=new t(this.ctx,.8*h,h,d,m,s,u,y.SPEED+b.lvlBuffs.speedIncrease*this.lvl);e.push(p)}}},{key:"addBullet",value:function(e,t){var n=(0,f.getCenterCoordinates)(this.hero),r=u(n,2),i=r[0],o=r[1],a=Math.atan2(i-e,o-t)+Math.PI,s=new d.Bullet(this.ctx,i,o,Math.sin(a),Math.cos(a));this.heroBullets.push(s)}},{key:"addBuffItem",value:function(){var e=this.generateRandomPositionAndDirection(this.hero,0),t=e.x,n=e.y,r=new p.RandomBuff(this.ctx,20,20,t,n);this.buffItem=r}},{key:"generateRandomPositionAndDirection",value:function(e,t){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:200,i=void 0,o=void 0,a=void 0,s=20*Math.random()+t+this.lvl*b.lvlBuffs.sizeIncrease,u=2*Math.random()-1,c=2*Math.random()-1;do{var l={x:i=Math.random()*this.ctx.canvas.clientWidth,y:o=Math.random()*this.ctx.canvas.clientHeight,width:s,height:s};a=(0,f.isDistanceBetweenUnitsMoreThanSafe)(e,l,r)}while(n?a:!a);return{x:i,y:o,alfaX:u,alfaY:c,size:s}}}]),t}()},{"./constants":1,"./creatures/bullet":2,"./creatures/dummyEnemy":3,"./creatures/hero":4,"./creatures/smartEnemy":5,"./items/buffs/buffGenerator":8,"./items/landscape":13,"./main":14,"./replay":15,"./utils/canvasUtils":17,"./utils/controlsUtils":18,"./utils/effectsUtils":19,"./utils/geometryUtils":20,"./utils/userUtils":23}],8:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.buffTypes=void 0,n.RandomBuff=function(e,t,n,r,i){var o=a[~~(3*Math.random())];return new o.constructor(e,t,n,r,i,o.selector)};var r=e("./sword"),i=e("./shield"),o=e("./shoes"),a=n.buffTypes=[{selector:".sword",constructor:r.Sword,color:"red"},{selector:".shield",constructor:i.Shield,color:"black"},{selector:".shoes",constructor:o.Shoes,color:"blue"}]},{"./shield":10,"./shoes":11,"./sword":12}],9:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.Item=function(){function a(e,t,n,r,i,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),this.ctx=e,this.width=t,this.height=n,this.x=r,this.y=i,this.sprite={x:0,y:0,width:16,height:16},this.image=document.querySelector(o)}return r(a,[{key:"draw",value:function(e){var t=this.image,n=this.sprite,r=this.x,i=this.y,o=this.width,a=this.height;return e.drawImage(t,n.x,n.y,n.width,n.height,r,i,o,a),this}}]),a}()},{}],10:[function(e,t,n){"use strict";var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Shield=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./item"),o=e("../../utils/effectsUtils"),u=e("./buffGenerator");n.Shield=function(e){function a(e,t,n,r,i,o){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":s(t))&&"function"!=typeof t?e:t}(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,e,t,n,r,i,o))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,i.Item),r(a,[{key:"activateBuff",value:function(e){(0,o.addBuffIndicator)(e.hero,u.buffTypes[1].color),e.hero.isImmortal=!0}}]),a}()},{"../../utils/effectsUtils":19,"./buffGenerator":8,"./item":9}],11:[function(e,t,n){"use strict";var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Shoes=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./item"),o=e("../../creatures/hero"),u=e("../../utils/effectsUtils"),c=e("./buffGenerator"),l=e("../../constants");function f(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}n.Shoes=function(e){function a(e,t,n,r,i,o){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":s(t))&&"function"!=typeof t?e:t}(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,e,t,n,r,i,o))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,i.Item),r(a,[{key:"activateBuff",value:function(e){(0,u.addBuffIndicator)(e.hero,c.buffTypes[2].color),(0,o.increaseHeroVelocityByBuff)();var t=[].concat(f(e.smartEnemies),f(e.dummyEnemies));t.forEach(function(e){return e.speed/=5});var n=setTimeout(function(){(0,o.decreaseHeroVelocityByDebuff)(),t.forEach(function(e){return e.speed*=5})},l.buffParams.buffTime);e.timers.push(n)}}]),a}()},{"../../constants":1,"../../creatures/hero":4,"../../utils/effectsUtils":19,"./buffGenerator":8,"./item":9}],12:[function(e,t,n){"use strict";var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Sword=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./item"),o=e("../../creatures/bullet"),u=e("../../utils/effectsUtils"),c=e("./buffGenerator"),l=e("../../constants");n.Sword=function(e){function a(e,t,n,r,i,o){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":s(t))&&"function"!=typeof t?e:t}(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,e,t,n,r,i,o))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,i.Item),r(a,[{key:"activateBuff",value:function(e){(0,u.addBuffIndicator)(e.hero,c.buffTypes[0].color),(0,o.growBullet)();var t=setTimeout(function(){return(0,o.shrinkBullet)()},l.buffParams.buffTime);e.timers.push(t)}}]),a}()},{"../../constants":1,"../../creatures/bullet":2,"../../utils/effectsUtils":19,"./buffGenerator":8,"./item":9}],13:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.Landscape=function(){function r(e,t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.ctx=e,this.width=t,this.height=n,this.canvasWidth=e.canvas.clientWidth,this.canvasHeight=e.canvas.clientWidth,this.sprite={x:0,y:0,width:96,height:72},this.image=document.querySelector(".landscape")}return i(r,[{key:"draw",value:function(e){for(var t=this.image,n=this.sprite,r=this.canvasWidth,i=this.canvasHeight,o=this.width,a=this.height,s=0;s<r;s+=o)for(var u=0;u<i;u+=a)e.drawImage(t,n.x,n.y,n.width,n.height,s,u,o,a);return this}}]),r}()},{}],14:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.game=void 0,n.initializeGame=function(){var e=document.querySelector("canvas");(0,i.hideReplayButton)(),n.game=u=new r.Game(e),document.querySelector(".speed").innerHTML=0,document.querySelector(".score").innerHTML=0,document.addEventListener("keydown",c,{once:!0})},n.startGame=c;var r=e("./game"),i=e("./utils/userUtils"),o=s(e("./utils/router")),a=s(e("./routes"));function s(e){return e&&e.__esModule?e:{default:e}}var u=n.game=void 0;function c(){u.start()}new o.default(a.default)},{"./game":7,"./routes":16,"./utils/router":22,"./utils/userUtils":23}],15:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.addSnapshotToReplay=function(e,t,n,r,i,o,a,s){e.push((u=t,c=n,l=r,f=i,h=o,d=a,m=s,{time:u,hero:{unit:c,posX:~~c.x,posY:~~c.y,spriteX:c.sprite.x,spriteY:c.sprite.y,speed:c.speed},dummyEnemies:p(l),smartEnemies:p(f),heroBullets:p(h),buffItem:d,lvl:m}));var u,c,l,f,h,d,m},n.showReplay=function(u,c){document.removeEventListener("keydown",f.initializeGame);var l=0;u.spriteTimer=setInterval(function(){var e,t,n,r,i;e=u.units[l],t=e.hero,n=e.dummyEnemies,r=e.smartEnemies,i=e.lvl,document.querySelector(".speed").innerHTML=~~(100*t.speed)/100,[t].concat(o(n),o(r)).forEach(function(e){return e.unit.setNextSprite()}),(0,h.updateLevelLabel)(i)},r.intervals.updateSprites),u.positionTimer=setInterval(function(){var e,t,n,r,i,o,a,s;e=c,t=u.units[l],n=u.landscape,r=t.hero,i=t.dummyEnemies,o=t.smartEnemies,a=t.heroBullets,s=t.buffItem,(0,d.clearCanvas)(e),n.draw(e),y(r),r.unit.sprite.x=r.spriteX,r.unit.sprite.y=r.spriteY,r.unit.speed=r.speed,r.unit.newPos().update(e),m(e,i),m(e,o,r.unit),m(e,a),s&&s.draw(e),++l===u.units.length-1&&(clearInterval(u.spriteTimer),clearInterval(u.positionTimer),(0,h.hideReplayButton)(),(0,f.initializeGame)())},r.intervals.updateGameState)};var f=e("./main"),h=e("./utils/userUtils"),d=e("./utils/canvasUtils"),r=e("./constants");function o(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function p(e){return e.map(function(e){return{unit:e,posX:~~e.x,posY:~~e.y,width:~~e.width,height:~~e.height}})}function m(t,e,n){e.forEach(function(e){y(e),e.unit.width=e.width,e.unit.height=e.height,e.unit.newPos(n).update(t)})}function y(e){e.unit.x=e.posX,e.unit.y=e.posY}},{"./constants":1,"./main":14,"./utils/canvasUtils":17,"./utils/userUtils":23}],16:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e("./main"),i=e("./utils/requestUtils"),o=document.querySelector(".game-container"),a=void 0,s=[{match:"",onEnter:function(){window.location.hash="game"}},{match:"game",onEnter:function(){o.classList.add("arena"),u("game"),o.innerHTML='\n  <div class="level-container">\n    Level:\n    <span class="level">1</span>\n  </div>\n  <div class="score-container">\n    Score:\n    <span class="score">0</span>\n  </div>\n  <div class="speed-container">\n    Speed:\n    <span class="speed">0</span>\n  </div>\n  <div class="replay-container">\n    <button class="btn">Show replay</button>\n  </div>\n  <canvas></canvas>\n  ',(0,r.initializeGame)()},onLeave:function(){o.classList.remove("arena"),r.game.stopGameAndClearState(),clearInterval(r.game.replay.spriteTimer),clearInterval(r.game.replay.positionTimer),document.removeEventListener("keydown",r.initializeGame),document.removeEventListener("keydown",r.startGame),c("game")}},{match:"scores",onEnter:function(){u("scores"),o.innerHTML='<div class="arena"><div class="lds-ripple"><div></div><div></div></div></div>',a=setTimeout(function(){return(0,i.getScoreFromDatabase)().then(function(e){return o.innerHTML='<div class="container margin-top">\n            <h4>Best scores:</h4>\n            <ul class="list-group">\n              <li class="list-group-item d-flex justify-content-between align-items-center">\n                Username:\n                <span>Score:</span>\n              </li>\n              '+e.map(function(e,t){return'<li class="list-group-item d-flex justify-content-between align-items-center">\n      '+(t+1)+") "+e.name+'\n      <span class="badge badge-primary badge-pill">'+e.score+"</span>\n    </li>"}).join("")+"\n            </ul>\n          </div>"})},1e3)},onLeave:function(){clearInterval(a),c("scores")}},{match:"rules",onEnter:function(){u("rules"),o.innerHTML='<div class="container margin-top">\n            <h3>Rules:</h3>\n            <h5>Mechanics:</h5>\n            <p>The game is about of hero and his enemies. User can manipulate the hero\n                with arrow buttons <code>🠀 🠁🠃 🠂</code> where push of each change hero direction \n                to the arrow direction. Also you can stop hero, with\n                <code>Ctrl</code> button. </p> Game finish when any of the enemies catches hero.\n            <p>Hero has ability to shoot with his gun to the nearest enemies. User do it with the\n                mouse, shoot action occurs if user press\n                <code>left button</code> mouse. Hero has speed acceleration if moves to one direction. If\n                he changes it, current hero speed discard to minimum.\n            </p>\n            <h5>Enemies:</h5>\n            <p>There are several enemies: dummy enemies, who move only with start direction,\n                and smart enemy, who begin to pursue if see hero at some range. Smart\n                enemy has an ability to increase his size, speed and defense by eating\n                his tribesmen.\n            </p>\n            <h5>Buffs:</h5>\n            <p>Average buff time is <code>20</code> seconds. Hero can activate buff if catches it. \n                At the game every <code>8</code> seconds generates new buff and on the field can be only one buff\n                item. Hero can stack buffs if catches more than one. There are several buffs at the game:</p>\n            <p>\n                <img src="./img/sword.png"> - improve hero\'s gun size and damage. <span class="red">Red</span> line indicator \n                appears when hero take this buff.\n            </p>\n            <p>\n                <img src="./img/shoes.png"> - improve hero\'s speed and when the buff activated decrease speed\n                of all enemies at game field. <span class="blue">Blue</span> line indicator appears when hero take this buff.\n            </p>\n            <p>\n                <img src="./img/shield.png"> - make hero immortal. Smart enemies begin to run away from the hero.\n                <span class="black">Black</span> line indicator appears when hero take this buff.\n            </p>\n            <h5>Lvl up and score:</h5>\n            <p>Every <code>10</code> seconds hero reach new level. With each new level at game field\n                creates a stack of dummy enemies. Amount of creatures at the stack\n                is equalent to the new level. Also every new level the size of creatures\n                and speed of dummy enemies increases. Score is equalent to the time\n                that hero present at game field.\n            </p>\n            <p>Good luck and enjoy!</p>\n          </div>'},onLeave:function(){c("rules")}},{match:"author",onEnter:function(){u("author"),o.innerHTML='<div class="container margin-top">\n            <h3>Author page:</h3>\n            <p>Hello, my name is Evgeniy and i\'m the author of the game. If you have any\n            questions you can find me here <a href="https://www.linkedin.com/in/evgeniy-dainovich/">LinkenIn</a>\n            </p>\n            <p>Game is developed with Javascript and Bootstrap for styling.</p>\n          </div>'},onLeave:function(){c("author")}}];function u(e){document.querySelector('[href="#'+e+'"]').classList.add("active")}function c(e){document.querySelector('[href="#'+e+'"]').classList.remove("active")}n.default=s},{"./main":14,"./utils/requestUtils":21}],17:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.clearCanvas=function(e){e.clearRect(0,0,e.canvas.clientWidth,e.canvas.clientHeight)}},{}],18:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.addHeroControls=function(e,t){i=e,o=i.dir,a=void 0,document.addEventListener("keydown",function(e){var t,n,r;switch(t=a,n=e.keyCode,r=i,a=t!==n?(r.makeHeroSpeedParamsDefault(),17!==n&&r.setNewSpeedTimer(),n):t,e.keyCode){case 38:i.updateSpriteDirection("top"),o.y=-1,o.x=0;break;case 39:i.updateSpriteDirection("right"),o.y=0,o.x=1;break;case 40:i.updateSpriteDirection("bottom"),o.y=1,o.x=0;break;case 37:i.updateSpriteDirection("left"),o.x=-1,o.y=0;break;case 17:i.speed=0,o.x=0,o.y=0}}),n=t,document.querySelector("canvas").addEventListener("click",function(e){n(e.offsetX,e.offsetY)});var n;var i,o,a}},{}],19:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.shouldEnemyDieIfBulletHitsHim=function(e,t){var n=(0,d.ifUnitsTouchEachOther)(e,t);n&&(r=e,i=f.currentBullet.speedDecrease,o=r.width*r.height,u=r,c=f.currentBullet.damage,l=u.defense||0,a=0<c-l?c-l:h.bulletParams.minDamage,s=(o-a)/o,r.width*=s,r.height*=s,r.speed>i&&(r.speed-=i),e=r);var r,i,o,a,s,u,c,l;return!(!n||!(e.width<h.bulletParams.minCreatureSize||e.height<h.bulletParams.minCreatureSize))},n.addBuffIndicator=function(e,t){var n=Date.now(),r={id:n,time:0,type:t};e.currentBuffs.push(r),i=e,o=n,a=i.currentBuffs.find(function(e){return o===e.id}),a.timer=setInterval(function(){if(a.time+=1,a.time>=h.buffParams.buffTime/1e3){clearInterval(a.timer),i.currentBuffs.shift();var e=i.currentBuffs.some(function(e){return e.type===s.buffTypes[1].color});i.isImmortal=e}},1e3);var i,o,a};var f=e("../creatures/bullet"),h=e("../constants"),d=e("./geometryUtils"),s=e("../items/buffs/buffGenerator")},{"../constants":1,"../creatures/bullet":2,"../items/buffs/buffGenerator":8,"./geometryUtils":20}],20:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var f=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};function h(e){return[e.x+.5*e.width,e.y+.5*e.height]}function r(e,t){var n=h(e),r=f(n,2),i=r[0],o=r[1],a=h(t),s=f(a,2),u=s[0],c=s[1];return Math.pow(Math.pow(i-u,2)+Math.pow(o-c,2),.5)}n.getCenterCoordinates=h,n.getDistanceBetweenUnits=r,n.ifUnitsTouchEachOther=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,r=h(e),i=f(r,2),o=i[0],a=i[1],s=h(t),u=f(s,2),c=u[0],l=u[1];return Math.abs(c-o)<(e.width+t.width-d-n)/2&&Math.abs(l-a)<(e.height+t.height-d-n)/2},n.isDistanceBetweenUnitsMoreThanSafe=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:i;return r(e,t)>n},n.moveToAnotherSideIfGoBeyonceCanvas=function(e,t){var n=e.canvas.clientWidth,r=e.canvas.clientHeight;t.x>n?t.x=0:t.x<0&&(t.x=n);t.y>r?t.y=0:t.y<0&&(t.y=r)},n.getElementsInsideCanvas=function(t,e){var n=t.canvas.clientWidth,r=t.canvas.clientHeight,i=void 0;return e.filter(function(e){return(i=e.x<n&&0<e.x&&e.y<r&&0<e.y)&&e.newPos().update(t),i})};var d=2;var i=200},{}],21:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.sendResultToDatabase=function(e,t){fetch(r,{method:"POST",body:JSON.stringify({score:e,name:t})})},n.getScoreFromDatabase=function(){return fetch(r+'?orderBy="score"&limitToLast=8',{method:"GET"}).then(function(e){return e.json()}).then(function(e){return i(e)}).catch(function(){return console.log("server error")})},n.getTop8=i;var r="https://shooter-game-2a1be.firebaseio.com/statistics/.json";function i(e){return Object.values(e).sort(function(e,t){return e.score<t.score})}},{}],22:[function(e,t,n){"use strict";function r(e){var t=this;this.routes=e||[],this.currentRoute,this.previousRoute,this.currentParams,this.previousParams,window.addEventListener("hashchange",function(){t.handler(window.location.hash)}),this.handler(window.location.hash)}Object.defineProperty(n,"__esModule",{value:!0}),(n.default=r).prototype={handler:function(e){this.previousRoute=this.currentRoute,this.previousParams=this.currentParams,this.currentRoute=this.findNewRoute(e),this.launchHandlers()},findNewRoute:function(e){e=e.slice(1);for(var t=0;t<this.routes.length;t++){var n=this.routes[t];if("string"==typeof n.match&&n.match===e)return this.currentParams="",n;if("function"==typeof n.match&&n.match(e))return this.currentParams="",n;if(n.match instanceof RegExp&&n.match.test(e))return this.currentParams=e.match(n.match)||[],this.currentParams.splice(0,1),n}},launchHandlers:function(){var e=this;Promise.resolve().then(function(){e.previousRoute&&e.previousRoute.onLeave&&e.previousRoute.onLeave(e.previousParams)}).then(function(){e.currentRoute&&e.currentRoute.onBeforeEnter&&e.currentRoute.onBeforeEnter(e.currentParams)}).then(function(){e.currentRoute&&e.currentRoute.onEnter&&e.currentRoute.onEnter(e.currentParams)})}}},{}],23:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.updateLevelLabel=function(e){document.querySelector(".level").innerHTML=e},n.showReplayButton=function(){document.querySelector(".replay-container").style.display="block"},n.updateScoreLabel=function(e,t){var n=((e+=r.intervals.updateGameState)-t)/10;return document.querySelector(".score").innerHTML=n,e+r.intervals.updateGameState},n.showLoseMessage=function(){var e=document.querySelector(".score").innerText,t=prompt("Sorry, but you lose, your score is "+e,"User");(0,i.sendResultToDatabase)(+e,t||"User")},n.subscribeToShowReplay=function(e){document.querySelector(".replay-container").addEventListener("click",e,{once:!0})},n.hideReplayButton=function(){document.querySelector(".replay-container").style.display="none"};var r=e("../constants"),i=e("./requestUtils")},{"../constants":1,"./requestUtils":21}]},{},[14]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
