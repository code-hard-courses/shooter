!function o(s,a,u){function c(t,e){if(!a[t]){if(!s[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(l)return l(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var i=a[t]={exports:{}};s[t][0].call(i.exports,function(e){return c(s[t][1][e]||e)},i,i.exports,o,s,a,u)}return a[t].exports}for(var l="function"==typeof require&&require,e=0;e<u.length;e++)c(u[e]);return c}({1:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.heroParams={height:50,width:30,posX:50,posY:50,spriteLayer:{top:2,left:3,right:0,bottom:1}},n.buffParams={buffTime:2e4,speedGrowth:2},n.bulletParams={speed:10,color:"black",size:5,damage:20,speedDecrease:.1,growAfterBuff:2,minDamage:6,minCreatureSize:25},n.smartEnemyParams={speed:.6,size:25,message:{x:10,y:5,font:"13px Arial"},defenseIncrease:3,speedIncrease:.1},n.dummyEnemyParams={speed:.8,size:25,spriteLayer:{top:3,left:1,right:0,bottom:2}},n.intervals={updateGameState:20,updateSprites:200,addSmartEnemy:2e3,addDummyEnemy:4e3,addBuffItem:8e3,lvlUp:1e4},n.lvlBuffs={speedIncrease:.15,sizeIncrease:5}},{}],2:[function(e,t,n){"use strict";var f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Bullet=n.currentBullet=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.growBullet=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:h.bulletParams.growAfterBuff;d.size*=e,d.damage*=e,d.speedDecrease*=e},n.shrinkBullet=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:h.bulletParams.growAfterBuff;d.size/=e,d.damage/=e,d.speedDecrease/=e},n.makeBulletDefault=function(){d.size=h.bulletParams.size,d.damage=h.bulletParams.damage,d.speedDecrease=h.bulletParams.speedDecrease};var i=e("./unit"),h=e("../constants");var d=n.currentBullet={size:h.bulletParams.size,damage:h.bulletParams.damage,speedDecrease:h.bulletParams.speedDecrease};n.Bullet=function(e){function l(e,t,n,r,i){var o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:d.size,s=6<arguments.length&&void 0!==arguments[6]?arguments[6]:d.size,a=7<arguments.length&&void 0!==arguments[7]?arguments[7]:h.bulletParams.speed,u=8<arguments.length&&void 0!==arguments[8]?arguments[8]:h.bulletParams.color;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l);var c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":f(t))&&"function"!=typeof t?e:t}(this,(l.__proto__||Object.getPrototypeOf(l)).call(this,e,o,s,t-d.size/2,n-d.size/2,r,i,a));return c.color=u,c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":f(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(l,i.Unit),r(l,[{key:"newPos",value:function(){return this.x+=this.speed*this.dir.x,this.y+=this.speed*this.dir.y,this}},{key:"update",value:function(e){return e.beginPath(),e.fillStyle=this.color,e.arc(this.x,this.y,d.size,0,2*Math.PI,!0),e.fill(),this}}]),l}()},{"../constants":1,"./unit":6}],3:[function(e,t,n){"use strict";var l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.DummyEnemy=n.BASE_DUMMY_SIZE=n.SPEED=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./unit"),o=e("../constants");var f=n.SPEED=o.dummyEnemyParams.speed,s=(n.BASE_DUMMY_SIZE=o.dummyEnemyParams.size,document.querySelector(".dummy-enemy-sprite"));n.DummyEnemy=function(e){function c(e,t,n,r,i,o,s){var a=7<arguments.length&&void 0!==arguments[7]?arguments[7]:f;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);var u=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":l(t))&&"function"!=typeof t?e:t}(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,e,t,n,r,i,o,s,a));return u.sprite={baseX:0,baseY:0,x:0,y:16*u.getSpriteLayerValue(u.dir.x,u.dir.y),width:16,height:16,deltaX:16,deltaY:16},u}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":l(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,i.Unit),r(c,[{key:"setNextSprite",value:function(){this.sprite.x<16?this.sprite.x+=this.sprite.deltaX:this.sprite.x=this.sprite.baseX}},{key:"update",value:function(e){var t=this.sprite,n=this.x,r=this.y,i=this.width,o=this.height;return e.drawImage(s,t.x,t.y,t.width,t.height,n,r,i,o),this}},{key:"getSpriteLayerValue",value:function(e,t){var n=o.dummyEnemyParams.spriteLayer;return Math.abs(e)>Math.abs(t)?0<e?n.right:n.left:0<t?n.bottom:n.top}}]),c}()},{"../constants":1,"./unit":6}],4:[function(e,t,n){"use strict";var l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Hero=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.increaseHeroVelocityByBuff=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:f.buffParams.speedGrowth;h.speed*=e,h.acceleration*=e,h.maxAccelerationTime*=e},n.decreaseHeroVelocityByDebuff=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:f.buffParams.speedGrowth;h.speed/=e,h.acceleration/=e,h.maxAccelerationTime/=e};var i=e("./unit"),f=e("../constants");var h={speed:1,acceleration:5e-4,maxAccelerationTime:3e3},s=document.querySelector(".hero-sprite"),a=document.querySelector(".speed");n.Hero=function(e){function c(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:f.heroParams.width,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:f.heroParams.height,r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:f.heroParams.posX,i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:f.heroParams.posY,o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:1,s=6<arguments.length&&void 0!==arguments[6]?arguments[6]:0,a=7<arguments.length&&void 0!==arguments[7]?arguments[7]:h.speed;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);var u=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":l(t))&&"function"!=typeof t?e:t}(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,e,t,n,r,i,o,s,a));return u.isImmortal=!1,u.accelerationStartTime=0,u.currentAccelerationTimer="",u.currentBuffs=[],u.sprite={baseX:9,baseY:2,x:9,y:2,width:16,height:26,deltaX:32,deltaY:32},u}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":l(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,i.Unit),r(c,[{key:"setNextSprite",value:function(){this.sprite.y<96?this.sprite.y+=this.sprite.deltaY:this.sprite.y=this.sprite.baseY}},{key:"update",value:function(e){a.innerHTML=~~(100*this.speed)/100;var t=this.sprite,n=this.x,r=this.y,i=this.width,o=this.height;return e.drawImage(s,t.x,t.y,t.width,t.height,n,r,i,o),this}},{key:"updateSpriteDirection",value:function(e){this.sprite.x=this.sprite.baseX+f.heroParams.spriteLayer[e]*this.sprite.deltaX}},{key:"makeHeroSpeedParamsDefault",value:function(){this.currentAccelerationTimer&&clearInterval(this.currentAccelerationTimer),this.speed=h.speed,this.accelerationStartTime=0}},{key:"setNewSpeedTimer",value:function(){var e=this,t=this.speed;this.accelerationStartTime=0,this.currentAccelerationTimer=setInterval(function(){e.accelerationStartTime+=50,e.speed=t+h.acceleration*e.accelerationStartTime,e.accelerationStartTime>=h.maxAccelerationTime&&clearInterval(e.currentAccelerationTimer)},50)}},{key:"drawBuffs",value:function(n){var r=this,i=f.buffParams.buffTime/1e3;return this.currentBuffs.forEach(function(e,t){n.fillStyle=e.type,n.fillRect(r.x,r.y-10-10*t,r.width*(i-e.time)/i,7)}),this}}]),c}()},{"../constants":1,"./unit":6}],5:[function(e,t,n){"use strict";var l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.SmartEnemy=n.BASE_SMART_SIZE=void 0;var a=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./unit"),u=e("../utils/geometryUtils"),f=e("../constants");n.BASE_SMART_SIZE=f.smartEnemyParams.size;var s=document.querySelector(".smart-enemy-sprite");n.SmartEnemy=function(e){function c(e,t,n,r,i,o,s){var a=7<arguments.length&&void 0!==arguments[7]?arguments[7]:f.smartEnemyParams.speed;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);var u=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":l(t))&&"function"!=typeof t?e:t}(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,e,t,n,r,i,o,s,a));return u.sprite={baseX:0,baseY:0,x:0,y:0,width:16,height:16,deltaX:16,deltaY:16},u.defense=0,u}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":l(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,i.Unit),r(c,[{key:"setNextSprite",value:function(){this.sprite.x<48?this.sprite.x+=this.sprite.deltaX:this.sprite.x=this.sprite.baseX}},{key:"newPos",value:function(e){return this.updateDirection(e),function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var s=i.get;return void 0!==s?s.call(r):void 0}(c.prototype.__proto__||Object.getPrototypeOf(c.prototype),"newPos",this).call(this),this}},{key:"update",value:function(e){var t=this.sprite,n=this.x,r=this.y,i=this.width,o=this.height;return e.drawImage(s,t.x,t.y,t.width,t.height,n,r,i,o),this}},{key:"showWarningMessage",value:function(e){var t=f.smartEnemyParams.message;this.ctx.font=t.font,this.ctx.strokeText(e,this.x+t.x,this.y-t.y)}},{key:"updateDirection",value:function(e){var t=e.isImmortal?{distance:300,isFear:1,message:"You don't catch me!"}:{distance:200,isFear:-1,message:"I see you!"};if(!(0,u.isDistanceBetweenUnitsMoreThanSafe)(e,this,t.distance)){var n=(0,u.getCenterCoordinates)(e),r=a(n,2),i=r[0],o=r[1],s=Math.atan2(i-this.x-this.width/2,o-this.y-this.height/2)+Math.PI;this.dir.y=t.isFear*Math.cos(s),this.dir.x=t.isFear*Math.sin(s),this.showWarningMessage(t.message)}}},{key:"eat",value:function(e){var t=f.smartEnemyParams.defenseIncrease,n=f.smartEnemyParams.speedIncrease,r=f.smartEnemyParams.speed,i=this.width*this.height,o=e.width*e.height,s=Math.pow((i+o)/i,.5);this.width*=s,this.height*=s,this.defense=Math.max(this.defense,e.defense)+t;var a=Math.max(this.speed,e.speed);this.speed=r<a?a+=n:r,this.x=(this.x*i+e.x*o)/(i+o),this.y=(this.y*i+e.y*o)/(i+o)}}]),c}()},{"../constants":1,"../utils/geometryUtils":19,"./unit":6}],6:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Unit=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("../utils/geometryUtils");n.Unit=function(){function u(e,t,n,r,i,o,s,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),this.ctx=e,this.width=t,this.height=n,this.speed=a,this.x=r,this.y=i,this.dir={x:o,y:s}}return r(u,[{key:"newPos",value:function(){return this.x+=this.speed*this.dir.x,this.y+=this.speed*this.dir.y,(0,i.moveToAnotherSideIfGoBeyonceCanvas)(this.ctx,this),this}}]),u}()},{"../utils/geometryUtils":19}],7:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Game=void 0;var u=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./creatures/hero"),l=e("./creatures/dummyEnemy"),a=e("./creatures/smartEnemy"),c=e("./utils/controlsUtils"),f=e("./utils/geometryUtils"),o=e("./utils/canvasUtils"),h=e("./creatures/bullet"),s=e("./items/buffs/buffGenerator"),d=e("./main"),m=e("./utils/userUtils"),y=e("./items/landscape"),p=e("./utils/effectsUtils"),v=e("./replay"),b=e("./constants");function w(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}n.Game=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=e,this.canvas.width=700,this.canvas.height=700,this.ctx=this.canvas.getContext("2d"),this.startTime=Date.now(),this.currentTime=Date.now(),this.hero=new i.Hero(this.ctx),this.landscape=new y.Landscape(this.ctx,40,40),this.dummyEnemies=[],this.smartEnemies=[],this.heroBullets=[],this.timers=[],this.lvl=1,this.buffItem="",this.replay={landscape:this.landscape,units:[]},this.handleHeroPosition()}return r(t,[{key:"start",value:function(){var n=this,e=setInterval(function(){return n.updateGameState()},b.intervals.updateGameState),t=setInterval(function(){return n.updateSprites()},b.intervals.updateSprites),r=setInterval(function(){return n.addEnemy(n.smartEnemies,a.SmartEnemy,a.BASE_SMART_SIZE)},b.intervals.addSmartEnemy),i=setInterval(function(){return n.addEnemy(n.dummyEnemies,l.DummyEnemy,l.BASE_DUMMY_SIZE)},b.intervals.addDummyEnemy),o=setInterval(function(){return n.addBuffItem()},b.intervals.addBuffItem),s=setInterval(function(){return n.lvlUp()},b.intervals.lvlUp);this.timers.push(e,t,r,i,o,s),(0,c.addHeroControls)(this.hero,function(e,t){return n.addBullet(e,t)})}},{key:"updateGameState",value:function(){this.updateCanvasState(),this.currentTime=(0,m.updateScoreLabel)(this.currentTime,this.startTime),(0,v.addSnapshotToReplay)(this.replay.units,this.currentTime-this.startTime,this.hero,this.dummyEnemies,this.smartEnemies,this.heroBullets,this.buffItem,this.lvl)}},{key:"updateSprites",value:function(){[this.hero].concat(w(this.dummyEnemies),w(this.smartEnemies)).forEach(function(e){return e.setNextSprite()})}},{key:"updateCanvasState",value:function(){(0,o.clearCanvas)(this.ctx),this.handleHeroDeath(),this.handleHeroPosition(),this.handleBuffItemPosition(),this.heroBullets=(0,f.getElementsInsideCanvas)(this.ctx,this.heroBullets),this.handleDummyEnemiesPosition(),this.handleSmartEnemiesPosition(),this.handleEnemiesDeath(),this.handleBuffs()}},{key:"drawLandscape",value:function(){this.landscape.draw(this.ctx)}},{key:"handleHeroPosition",value:function(){this.hero.newPos().update(this.ctx).drawBuffs(this.ctx)}},{key:"handleBuffItemPosition",value:function(){this.buffItem&&this.buffItem.draw(this.ctx)}},{key:"handleDummyEnemiesPosition",value:function(){var t=this;this.dummyEnemies.forEach(function(e){return e.newPos().update(t.ctx)})}},{key:"handleSmartEnemiesPosition",value:function(){var r=this;this.smartEnemies=this.smartEnemies.reduce(function(e,t){if(e.some(function(e){return(0,f.ifUnitsTouchEachOther)(e,t)}))return e;var n=r.smartEnemies.find(function(e){return(0,f.ifUnitsTouchEachOther)(e,t)&&e!==t});return n&&t.eat(n),e.push(t),e},[]),this.smartEnemies.forEach(function(e){return e.newPos(r.hero).update(r.ctx)})}},{key:"handleEnemiesDeath",value:function(){var e=this,n=[],r=[],i=[],o=[].concat(w(this.smartEnemies),w(this.dummyEnemies));this.smartEnemies.forEach(function(t){e.heroBullets.some(function(e){return(0,p.shouldEnemyDieIfBulletHitsHim)(t,e)})||n.push(t)}),this.dummyEnemies.forEach(function(t){e.heroBullets.some(function(e){return(0,p.shouldEnemyDieIfBulletHitsHim)(t,e)})||r.push(t)}),this.heroBullets.forEach(function(t){o.some(function(e){return(0,p.shouldEnemyDieIfBulletHitsHim)(e,t)})||i.push(t)}),this.smartEnemies=n,this.dummyEnemies=r,this.heroBullets=i}},{key:"handleHeroDeath",value:function(){var t=this;this.hero.isImmortal||[].concat(w(this.dummyEnemies),w(this.smartEnemies)).some(function(e){return(0,f.ifUnitsTouchEachOther)(t.hero,e,10)})&&this.finishGame()}},{key:"finishGame",value:function(){var e=this;(0,m.showReplayButton)(),this.clearPreviousGameState(),(0,m.showLoseMessage)(),(0,m.subscribeToShowReplay)(function(){return(0,v.showReplay)(e.replay,e.ctx)}),document.addEventListener("keydown",d.initializeGame,{once:!0})}},{key:"clearPreviousGameState",value:function(){this.timers.map(function(e){return clearInterval(e)}),this.hero.currentBuffs.map(function(e){return clearInterval(e.timer)}),(0,h.makeBulletDefault)()}},{key:"handleBuffs",value:function(){(0,f.ifUnitsTouchEachOther)(this.hero,this.buffItem)&&(this.buffItem.activateBuff(this),this.buffItem="")}},{key:"lvlUp",value:function(){this.addEnemyStack(this.smartEnemies,a.SmartEnemy,a.BASE_SMART_SIZE),this.addEnemyStack(this.dummyEnemies,l.DummyEnemy,l.BASE_DUMMY_SIZE),this.lvl++,(0,m.updateLevelLabel)(this.lvl)}},{key:"addEnemy",value:function(e,t,n){var r=this.generateRandomPositionAndDirection(this.hero,n),i=r.size,o=r.x,s=r.y,a=r.alfaX,u=r.alfaY,c=new t(this.ctx,i,i,o,s,a,u,l.SPEED+b.lvlBuffs.speedIncrease*this.lvl);e.push(c)}},{key:"addEnemyStack",value:function(e,t,n){var r=this.generateRandomPositionAndDirection(this.hero,n),i=r.size,o=r.x,s=r.y,a=r.alfaX,u=r.alfaY,c=new t(this.ctx,i,i,o,s,a,u);e.push(c);for(var l=0;l<this.lvl;l++){var f=this.generateRandomPositionAndDirection(c,n,!0,100),h=f.size,d=f.x,m=f.y,y=new t(this.ctx,h,h,d,m,a,u);e.push(y)}}},{key:"addBullet",value:function(e,t){var n=(0,f.getCenterCoordinates)(this.hero),r=u(n,2),i=r[0],o=r[1],s=Math.atan2(i-e,o-t)+Math.PI,a=new h.Bullet(this.ctx,i,o,Math.sin(s),Math.cos(s));this.heroBullets.push(a)}},{key:"addBuffItem",value:function(){var e=this.generateRandomPositionAndDirection(this.hero,0),t=e.x,n=e.y,r=new s.RandomBuff(this.ctx,20,20,t,n);this.buffItem=r}},{key:"generateRandomPositionAndDirection",value:function(e,t){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:200,i=void 0,o=void 0,s=void 0,a=20*Math.random()+t+this.lvl*b.lvlBuffs.sizeIncrease,u=2*Math.random()-1,c=2*Math.random()-1;do{var l={x:i=Math.random()*this.ctx.canvas.clientWidth,y:o=Math.random()*this.ctx.canvas.clientHeight,width:a,height:a};s=(0,f.isDistanceBetweenUnitsMoreThanSafe)(e,l,r)}while(n?s:!s);return{x:i,y:o,alfaX:u,alfaY:c,size:a}}}]),t}()},{"./constants":1,"./creatures/bullet":2,"./creatures/dummyEnemy":3,"./creatures/hero":4,"./creatures/smartEnemy":5,"./items/buffs/buffGenerator":8,"./items/landscape":13,"./main":14,"./replay":15,"./utils/canvasUtils":16,"./utils/controlsUtils":17,"./utils/effectsUtils":18,"./utils/geometryUtils":19,"./utils/userUtils":21}],8:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.buffTypes=void 0,n.RandomBuff=function(e,t,n,r,i){var o=s[~~(3*Math.random())];return new o.constructor(e,t,n,r,i,o.selector)};var r=e("./sword"),i=e("./shield"),o=e("./shoes"),s=n.buffTypes=[{selector:".sword",constructor:r.Sword,color:"red"},{selector:".shield",constructor:i.Shield,color:"black"},{selector:".shoes",constructor:o.Shoes,color:"blue"}]},{"./shield":10,"./shoes":11,"./sword":12}],9:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.Item=function(){function s(e,t,n,r,i,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),this.ctx=e,this.width=t,this.height=n,this.x=r,this.y=i,this.sprite={x:0,y:0,width:16,height:16},this.image=document.querySelector(o)}return r(s,[{key:"draw",value:function(e){var t=this.image,n=this.sprite,r=this.x,i=this.y,o=this.width,s=this.height;return e.drawImage(t,n.x,n.y,n.width,n.height,r,i,o,s),this}}]),s}()},{}],10:[function(e,t,n){"use strict";var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Shield=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./item"),o=e("../../utils/effectsUtils"),u=e("./buffGenerator"),c=e("../../constants");n.Shield=function(e){function s(e,t,n,r,i,o){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":a(t))&&"function"!=typeof t?e:t}(this,(s.__proto__||Object.getPrototypeOf(s)).call(this,e,t,n,r,i,o))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":a(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(s,i.Item),r(s,[{key:"activateBuff",value:function(t){(0,o.addBuffIndicator)(t.hero,u.buffTypes[1].color),t.hero.isImmortal=!0;var e=setTimeout(function(){var e=t.hero.currentBuffs.some(function(e){return e.color===u.buffTypes[1].color});t.hero.isImmortal=!e},c.buffParams.buffTime);t.timers.push(e)}}]),s}()},{"../../constants":1,"../../utils/effectsUtils":18,"./buffGenerator":8,"./item":9}],11:[function(e,t,n){"use strict";var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Shoes=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./item"),o=e("../../creatures/hero"),u=e("../../utils/effectsUtils"),c=e("./buffGenerator"),l=e("../../constants");function f(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}n.Shoes=function(e){function s(e,t,n,r,i,o){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":a(t))&&"function"!=typeof t?e:t}(this,(s.__proto__||Object.getPrototypeOf(s)).call(this,e,t,n,r,i,o))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":a(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(s,i.Item),r(s,[{key:"activateBuff",value:function(e){(0,u.addBuffIndicator)(e.hero,c.buffTypes[2].color),(0,o.increaseHeroVelocityByBuff)();var t=[].concat(f(e.smartEnemies),f(e.dummyEnemies));t.forEach(function(e){return e.speed/=5});var n=setTimeout(function(){(0,o.decreaseHeroVelocityByDebuff)(),t.forEach(function(e){return e.speed*=5})},l.buffParams.buffTime);e.timers.push(n)}}]),s}()},{"../../constants":1,"../../creatures/hero":4,"../../utils/effectsUtils":18,"./buffGenerator":8,"./item":9}],12:[function(e,t,n){"use strict";var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Sword=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./item"),o=e("../../creatures/bullet"),u=e("../../utils/effectsUtils"),c=e("./buffGenerator"),l=e("../../constants");n.Sword=function(e){function s(e,t,n,r,i,o){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":a(t))&&"function"!=typeof t?e:t}(this,(s.__proto__||Object.getPrototypeOf(s)).call(this,e,t,n,r,i,o))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":a(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(s,i.Item),r(s,[{key:"activateBuff",value:function(e){(0,u.addBuffIndicator)(e.hero,c.buffTypes[0].color),(0,o.growBullet)();var t=setTimeout(function(){return(0,o.shrinkBullet)()},l.buffParams.buffTime);e.timers.push(t)}}]),s}()},{"../../constants":1,"../../creatures/bullet":2,"../../utils/effectsUtils":18,"./buffGenerator":8,"./item":9}],13:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.Landscape=function(){function r(e,t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.ctx=e,this.width=t,this.height=n,this.canvasWidth=e.canvas.clientWidth,this.canvasHeight=e.canvas.clientWidth,this.sprite={x:0,y:0,width:32,height:32},this.image=document.querySelector(".landscape")}return i(r,[{key:"draw",value:function(e){for(var t=this.image,n=this.sprite,r=this.canvasWidth,i=this.canvasHeight,o=this.width,s=this.height,a=0;a<r;a+=o)for(var u=0;u<i;u+=s)e.drawImage(t,n.x,n.y,n.width,n.height,a,u,o,s);return this}}]),r}()},{}],14:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.initializeGame=f;var r=e("./game"),i=e("./utils/requestUtils"),o=e("./utils/userUtils"),s=void 0,a=document.querySelector("canvas"),u=document.querySelector(".score"),c=document.querySelector(".speed"),l=document.querySelector(".level");function f(){(0,i.getScoreFromDatabase)(),(0,o.hideReplayButton)(),s=new r.Game(a),u.innerHTML=0,c.innerHTML=0,l.innerHTML=1,document.addEventListener("keydown",h,{once:!0})}function h(){s.start()}f()},{"./game":7,"./utils/requestUtils":20,"./utils/userUtils":21}],15:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.addSnapshotToReplay=function(e,t,n,r,i,o,s,a){e.push((u=t,c=n,l=r,f=i,h=o,d=s,m=a,{time:u,hero:{unit:c,posX:~~c.x,posY:~~c.y,spriteX:c.sprite.x,spriteY:c.sprite.y},dummyEnemies:y(l),smartEnemies:y(f),heroBullets:y(h),buffItem:d,lvl:m}));var u,c,l,f,h,d,m},n.showReplay=function(a,u){var c=0,l=setInterval(function(){var e,t,n,r,i;e=a.units[c],t=e.hero,n=e.dummyEnemies,r=e.smartEnemies,i=e.lvl,[t].concat(o(n),o(r)).forEach(function(e){return e.unit.setNextSprite()}),(0,d.updateLevelLabel)(i)},r.intervals.updateSprites),f=setInterval(function(){var e,t,n,r,i,o,s;e=u,t=a.units[c],n=t.hero,r=t.dummyEnemies,i=t.smartEnemies,o=t.heroBullets,s=t.buffItem,(0,m.clearCanvas)(e),v(n),n.unit.sprite.x=n.spriteX,n.unit.sprite.y=n.spriteY,n.unit.newPos().update(e),p(e,r),p(e,i,n.unit),p(e,o),s&&s.draw(e),++c===a.units.length-1&&(clearInterval(l),clearInterval(f),(0,d.hideReplayButton)(),(0,h.initializeGame)())},r.intervals.updateGameState)};var h=e("./main"),d=e("./utils/userUtils"),m=e("./utils/canvasUtils"),r=e("./constants");function o(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function y(e){return e.map(function(e){return{unit:e,posX:~~e.x,posY:~~e.y,width:~~e.width,height:~~e.height}})}function p(t,e,n){e.forEach(function(e){v(e),e.unit.width=e.width,e.unit.height=e.height,e.unit.newPos(n).update(t)})}function v(e){e.unit.x=e.posX,e.unit.y=e.posY}},{"./constants":1,"./main":14,"./utils/canvasUtils":16,"./utils/userUtils":21}],16:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.clearCanvas=function(e){e.clearRect(0,0,e.canvas.clientWidth,e.canvas.clientHeight)}},{}],17:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.addHeroControls=function(e,t){i=e,o=i.dir,s=void 0,document.addEventListener("keydown",function(e){var t,n,r;switch(t=s,n=e.keyCode,r=i,s=t!==n?(r.makeHeroSpeedParamsDefault(),r.setNewSpeedTimer(),n):t,e.keyCode){case 38:i.updateSpriteDirection("top"),o.y=-1,o.x=0;break;case 39:i.updateSpriteDirection("right"),o.y=0,o.x=1;break;case 40:i.updateSpriteDirection("bottom"),o.y=1,o.x=0;break;case 37:i.updateSpriteDirection("left"),o.x=-1,o.y=0;break;case 17:o.x=0,o.y=0}}),n=t,r.addEventListener("click",function(e){n(e.offsetX,e.offsetY)});var n;var i,o,s};var r=document.querySelector("canvas")},{}],18:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.shouldEnemyDieIfBulletHitsHim=function(e,t){var n=(0,d.ifUnitsTouchEachOther)(e,t);n&&(r=e,i=f.currentBullet.speedDecrease,o=r.width*r.height,u=r,c=f.currentBullet.damage,l=u.defense||0,s=0<c-l?c-l:h.bulletParams.minDamage,a=(o-s)/o,r.width*=a,r.height*=a,r.speed>i&&(r.speed-=i),e=r);var r,i,o,s,a,u,c,l;return!(!n||!(e.width<h.bulletParams.minCreatureSize||e.height<h.bulletParams.minCreatureSize))},n.addBuffIndicator=function(e,t){var n=Date.now(),r={id:n,time:0,type:t};e.currentBuffs.push(r),i=e,o=n,s=i.currentBuffs.find(function(e){return o===e.id}),s.timer=setInterval(function(){s.time+=1,s.time>=h.buffParams.buffTime/1e3&&(clearInterval(s.timer),i.currentBuffs.shift())},1e3);var i,o,s};var f=e("../creatures/bullet"),h=e("../constants"),d=e("./geometryUtils")},{"../constants":1,"../creatures/bullet":2,"./geometryUtils":19}],19:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var f=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};function h(e){return[e.x+.5*e.width,e.y+.5*e.height]}function r(e,t){var n=h(e),r=f(n,2),i=r[0],o=r[1],s=h(t),a=f(s,2),u=a[0],c=a[1];return Math.pow(Math.pow(i-u,2)+Math.pow(o-c,2),.5)}n.getCenterCoordinates=h,n.getDistanceBetweenUnits=r,n.ifUnitsTouchEachOther=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,r=h(e),i=f(r,2),o=i[0],s=i[1],a=h(t),u=f(a,2),c=u[0],l=u[1];return Math.abs(c-o)<(e.width+t.width-d-n)/2&&Math.abs(l-s)<(e.height+t.height-d-n)/2},n.isDistanceBetweenUnitsMoreThanSafe=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:i;return r(e,t)>n},n.moveToAnotherSideIfGoBeyonceCanvas=function(e,t){var n=e.canvas.clientWidth,r=e.canvas.clientHeight;t.x>n?t.x=0:t.x<0&&(t.x=n);t.y>r?t.y=0:t.y<0&&(t.y=r)},n.getElementsInsideCanvas=function(t,e){var n=t.canvas.clientWidth,r=t.canvas.clientHeight,i=void 0;return e.filter(function(e){return(i=e.x<n&&0<e.x&&e.y<r&&0<e.y)&&e.newPos().update(t),i})};var d=2;var i=200},{}],20:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.sendResultToDatabase=function(e,t){fetch(r,{method:"POST",body:JSON.stringify({score:e,name:t})})},n.getScoreFromDatabase=function(){fetch(r+'?orderBy="score"&limitToLast=8',{method:"GET"}).then(function(e){return e.json()}).then(function(e){i=o(e),console.log(i)}).catch(function(){return console.log("misterious error")})},n.getTop10=o;var r="https://shooter-game-2a1be.firebaseio.com/statistics/.json",i=[];function o(e){return Object.values(e).sort(function(e,t){return e.score<t.score})}},{}],21:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.updateLevelLabel=function(e){document.querySelector(".level").innerHTML=e},n.showReplayButton=function(){o.style.display="block"},n.updateScoreLabel=function(e,t){var n=((e+=r.intervals.updateGameState)-t)/10;return s.innerHTML=n,e+r.intervals.updateGameState},n.showLoseMessage=function(){var e=s.innerText,t=prompt("Sorry, but you lose, your score is "+e,"User");(0,i.sendResultToDatabase)(+e,t||"User")},n.subscribeToShowReplay=function(e){o.addEventListener("click",e,{once:!0})},n.hideReplayButton=function(){o.style.display="none"};var r=e("../constants"),i=e("./requestUtils"),o=document.querySelector(".replay-container"),s=document.querySelector(".score")},{"../constants":1,"./requestUtils":20}]},{},[14]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
