!function o(a,s,u){function c(t,e){if(!s[t]){if(!a[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(h)return h(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var i=s[t]={exports:{}};a[t][0].call(i.exports,function(e){return c(a[t][1][e]||e)},i,i.exports,o,a,s,u)}return s[t].exports}for(var h="function"==typeof require&&require,e=0;e<u.length;e++)c(u[e]);return c}({1:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.addHeroControls=function(e,t){i=e,o=i.dir,a=void 0,document.addEventListener("keydown",function(e){var t,n,r;switch(t=a,n=e.keyCode,r=i,a=t!==n?(r.makeHeroSpeedParamsDefault(),r.setNewSpeedTimer(),n):t,e.keyCode){case 38:i.updateSpriteDirection("top"),o.y=-1,o.x=0;break;case 39:i.updateSpriteDirection("right"),o.y=0,o.x=1;break;case 40:i.updateSpriteDirection("bottom"),o.y=1,o.x=0;break;case 37:i.updateSpriteDirection("left"),o.x=-1,o.y=0;break;case 17:o.x=0,o.y=0}}),n=t,r.addEventListener("mousemove",function(e){n(e.offsetX,e.offsetY)});var n;var i,o,a},n.moveToAnotherSideIfGoBeyonceCanvas=function(e,t){var n=e.canvas.clientWidth,r=e.canvas.clientWidth;t.x>n?t.x=0:t.x<0&&(t.x=n);t.y>r?t.y=0:t.y<0&&(t.y=r)};var r=document.querySelector("canvas")},{}],2:[function(e,t,n){"use strict";var l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Bullet=n.BULLET=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.growBullet=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:2;f.size*=e,f.damage*=e,f.speedDecrease*=e},n.shrinkBullet=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:2;f.size/=e,f.damage/=e,f.speedDecrease/=e};var i=e("./unit");var f=n.BULLET={size:5,damage:2,speedDecrease:.03};n.Bullet=function(e){function h(e,t,n,r,i){var o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:f.size,a=6<arguments.length&&void 0!==arguments[6]?arguments[6]:f.size,s=7<arguments.length&&void 0!==arguments[7]?arguments[7]:10,u=8<arguments.length&&void 0!==arguments[8]?arguments[8]:"black";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,h);var c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":l(t))&&"function"!=typeof t?e:t}(this,(h.__proto__||Object.getPrototypeOf(h)).call(this,e,o,a,t-f.size/2,n-f.size/2,r,i,s));return c.color=u,c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":l(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(h,i.Unit),r(h,[{key:"newPos",value:function(){return this.x+=this.speed*this.dir.x,this.y+=this.speed*this.dir.y,this}},{key:"update",value:function(e){return e.beginPath(),e.fillStyle=this.color,e.arc(this.x,this.y,f.size,0,2*Math.PI,!0),e.fill(),this}}]),h}()},{"./unit":6}],3:[function(e,t,n){"use strict";var h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.DummyEnemy=n.BASE_DUMMY_SIZE=n.SPEED=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./unit");var l=n.SPEED=.8,a=(n.BASE_DUMMY_SIZE=25,document.querySelector(".dummy-enemy-sprite")),o=3,s=1,u=0,f=2;n.DummyEnemy=function(e){function c(e,t,n,r,i,o,a){var s=7<arguments.length&&void 0!==arguments[7]?arguments[7]:l;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);var u=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":h(t))&&"function"!=typeof t?e:t}(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,e,t,n,r,i,o,a,s));return u.sprite={baseX:0,baseY:0,x:0,y:16*u.getSpriteLayerValue(u.dir.x,u.dir.y),width:16,height:16,deltaX:16,deltaY:16},u}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":h(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,i.Unit),r(c,[{key:"setNextSprite",value:function(){this.sprite.x<16?this.sprite.x+=this.sprite.deltaX:this.sprite.x=this.sprite.baseX}},{key:"update",value:function(e){var t=this.sprite,n=this.x,r=this.y,i=this.width,o=this.height;return e.drawImage(a,t.x,t.y,t.width,t.height,n,r,i,o),this}},{key:"getSpriteLayerValue",value:function(e,t){return Math.abs(e)>Math.abs(t)?0<e?u:s:0<t?f:o}}]),c}()},{"./unit":6}],4:[function(e,t,n){"use strict";var h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Hero=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.increaseHeroVelocityByBuff=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:2;l.speed*=e,l.acceleration*=e,l.maxAccelerationTime*=e},n.decreaseHeroVelocityByDebuff=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:2;l.speed/=e,l.acceleration/=e,l.maxAccelerationTime/=e};var i=e("./unit");var l={speed:1,acceleration:5e-4,maxAccelerationTime:3e3},o={top:2,left:3,right:0,bottom:1},a=document.querySelector(".hero-sprite"),s=document.querySelector(".speed");n.Hero=function(e){function c(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:30,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:50,r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:50,i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:50,o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0,a=6<arguments.length&&void 0!==arguments[6]?arguments[6]:0,s=7<arguments.length&&void 0!==arguments[7]?arguments[7]:l.speed;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);var u=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":h(t))&&"function"!=typeof t?e:t}(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,e,t,n,r,i,o,a,s));return u.isImmortal=!1,u.accelerationStartTime=0,u.currentAccelerationTimer="",u.sprite={baseX:9,baseY:2,x:9,y:2,width:16,height:26,deltaX:32,deltaY:32},u}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":h(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,i.Unit),r(c,[{key:"setNextSprite",value:function(){this.sprite.y<96?this.sprite.y+=this.sprite.deltaY:this.sprite.y=this.sprite.baseY}},{key:"update",value:function(e){s.innerHTML=~~(100*this.speed)/100;var t=this.sprite,n=this.x,r=this.y,i=this.width,o=this.height;return e.drawImage(a,t.x,t.y,t.width,t.height,n,r,i,o),this}},{key:"updateSpriteDirection",value:function(e){this.sprite.x=this.sprite.baseX+o[e]*this.sprite.deltaX}},{key:"makeHeroSpeedParamsDefault",value:function(){this.currentAccelerationTimer&&clearInterval(this.currentAccelerationTimer),this.speed=l.speed,this.accelerationStartTime=0}},{key:"setNewSpeedTimer",value:function(){var e=this,t=this.speed;this.accelerationStartTime=0,this.currentAccelerationTimer=setInterval(function(){e.accelerationStartTime+=50,e.speed=t+l.acceleration*e.accelerationStartTime,e.accelerationStartTime>=l.maxAccelerationTime&&clearInterval(e.currentAccelerationTimer)},50)}}]),c}()},{"./unit":6}],5:[function(e,t,n){"use strict";var h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.SmartEnemy=n.BASE_SMART_SIZE=void 0;var s=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./unit"),u=e("../utils");n.BASE_SMART_SIZE=16;var a=document.querySelector(".smart-enemy-sprite"),o=10,l=5,f="13px Arial";n.SmartEnemy=function(e){function c(e,t,n,r,i,o,a){var s=7<arguments.length&&void 0!==arguments[7]?arguments[7]:.6;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);var u=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":h(t))&&"function"!=typeof t?e:t}(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,e,t,n,r,i,o,a,s));return u.sprite={baseX:0,baseY:0,x:0,y:0,width:16,height:16,deltaX:16,deltaY:16},u.defense=0,u}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":h(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,i.Unit),r(c,[{key:"setNextSprite",value:function(){this.sprite.x<48?this.sprite.x+=this.sprite.deltaX:this.sprite.x=this.sprite.baseX}},{key:"newPos",value:function(e){return this.updateDirection(e),function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(c.prototype.__proto__||Object.getPrototypeOf(c.prototype),"newPos",this).call(this),this}},{key:"update",value:function(e){var t=this.sprite,n=this.x,r=this.y,i=this.width,o=this.height;return e.drawImage(a,t.x,t.y,t.width,t.height,n,r,i,o),this}},{key:"showWarningMessage",value:function(e){this.ctx.font=f,this.ctx.strokeText(e,this.x+o,this.y-l)}},{key:"updateDirection",value:function(e){var t=this.getFearParams(e.isImmortal);if(!(0,u.isDistanceBetweenUnitsMoreThanSafe)(e,this,t.distance)){var n=(0,u.getCenterCoordinates)(e),r=s(n,2),i=r[0],o=r[1],a=Math.atan2(i-this.x-this.width/2,o-this.y-this.height/2)+Math.PI;this.dir.y=t.isFear*Math.cos(a),this.dir.x=t.isFear*Math.sin(a),this.showWarningMessage(t.message)}}},{key:"getFearParams",value:function(e){return e?{distance:300,isFear:1,message:"You don't catch me!"}:{distance:200,isFear:-1,message:"I see you"}}},{key:"eat",value:function(e){var t=this.width*this.height,n=e.width*e.height,r=Math.pow((t+n)/t,.5);this.width*=r,this.height*=r,this.defense=Math.max(this.defense,e.defense)+3,this.speed=.6<this.speed?this.speed+=.1:.6,this.x=(this.x*t+e.x*n)/(t+n),this.y=(this.y*t+e.y*n)/(t+n)}}]),c}()},{"../utils":15,"./unit":6}],6:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Unit=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("../controls");n.Unit=function(){function u(e,t,n,r,i,o,a,s){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),this.ctx=e,this.width=t,this.height=n,this.speed=s,this.x=r,this.y=i,this.dir={x:o,y:a}}return r(u,[{key:"newPos",value:function(){return this.x+=this.speed*this.dir.x,this.y+=this.speed*this.dir.y,(0,i.moveToAnotherSideIfGoBeyonceCanvas)(this.ctx,this),this}}]),u}()},{"../controls":1}],7:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Game=void 0;var u=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./creatures/hero"),h=e("./creatures/dummyEnemy"),s=e("./creatures/smartEnemy"),c=e("./controls"),l=e("./utils"),f=e("./creatures/bullet"),o=e("./items/buff-generator"),a=e("./main"),d=e("./items/landscape");function y(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var m=document.querySelector(".score");n.Game=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=e,this.startTime=Date.now(),this.currentTime=Date.now(),this.canvas.width=700,this.canvas.height=700,this.ctx=this.canvas.getContext("2d"),this.hero=new i.Hero(this.ctx),this.landscape=new d.Landscape(this.ctx,40,40,this.ctx.canvas.clientWidth,this.ctx.canvas.clientWidth),this.dummyEnemies=[],this.smartEnemies=[],this.heroBullets=[],this.timers=[],this.lvl=1,this.buffItem="",this.landscape.draw(this.ctx),this.handleHeroPosition()}return r(t,[{key:"start",value:function(){var n=this,e=setInterval(function(){return n.updateGame()},10),t=setInterval(function(){return n.updateSprites()},200),r=setInterval(function(){return n.addEnemy(n.smartEnemies,s.SmartEnemy,s.BASE_SMART_SIZE)},2e3),i=setInterval(function(){return n.addEnemy(n.dummyEnemies,h.DummyEnemy,h.BASE_DUMMY_SIZE)},4e3),o=setInterval(function(){return n.addBuffItem()},12e3),a=setInterval(function(){return n.lvlUp()},1e4);this.timers.push(e,t,r,i,o,a),(0,c.addHeroControls)(this.hero,function(e,t){return n.addBullet(e,t)})}},{key:"updateGame",value:function(){this.updateScore(),this.updateCanvasState()}},{key:"updateScore",value:function(){this.currentTime=this.currentTime+10;var e=(this.currentTime-this.startTime)/1e3;m.innerHTML=e}},{key:"updateSprites",value:function(){[this.hero].concat(y(this.dummyEnemies),y(this.smartEnemies)).forEach(function(e){return e.setNextSprite()})}},{key:"updateCanvasState",value:function(){this.ctx.clearRect(0,0,this.ctx.canvas.clientWidth,this.ctx.canvas.clientHeight),this.landscape.draw(this.ctx),this.handleHeroPosition(),this.handleBuffItemPosition(),this.handleDummyEnemiesPosition(),this.handleSmartEnemiesPosition(),this.handleHeroBulletsPosition(),this.handleEnemiesDeath(),this.handleHeroDeath(),this.handleBuffs()}},{key:"handleHeroPosition",value:function(){this.hero.newPos().update(this.ctx)}},{key:"handleBuffItemPosition",value:function(){this.buffItem&&this.buffItem.draw(this.ctx)}},{key:"handleDummyEnemiesPosition",value:function(){var t=this;this.dummyEnemies.forEach(function(e){return e.newPos().update(t.ctx)})}},{key:"handleSmartEnemiesPosition",value:function(){var r=this;this.smartEnemies=this.smartEnemies.reduce(function(e,t){if(e.some(function(e){return(0,l.ifUnitsTouchEachOther)(e,t)}))return e;var n=r.smartEnemies.find(function(e){return(0,l.ifUnitsTouchEachOther)(e,t)&&e!==t});return n&&t.eat(n),e.push(t),e},[]),this.smartEnemies.forEach(function(e){return e.newPos(r.hero).update(r.ctx)})}},{key:"handleHeroBulletsPosition",value:function(){var t=this,n=this.ctx.canvas.clientWidth,r=this.ctx.canvas.clientHeight,i=void 0;this.heroBullets=this.heroBullets.filter(function(e){return(i=e.x<n&&0<e.x&&e.y<r&&0<e.y)&&e.newPos().update(t.ctx),i})}},{key:"handleEnemiesDeath",value:function(){var n=this,e=[],r=[],i=[],o=[].concat(y(this.smartEnemies),y(this.dummyEnemies));this.smartEnemies.forEach(function(t){n.heroBullets.some(function(e){return n.shouldEnemyDieIfBulletHitsHim(t,e)})||e.push(t)}),this.dummyEnemies.forEach(function(t){n.heroBullets.some(function(e){return n.shouldEnemyDieIfBulletHitsHim(t,e)})||r.push(t)}),this.heroBullets.forEach(function(t){o.some(function(e){return n.shouldEnemyDieIfBulletHitsHim(e,t)})||i.push(t)}),this.smartEnemies=e,this.dummyEnemies=r,this.heroBullets=i}},{key:"handleHeroDeath",value:function(){var t=this;if(!this.hero.isImmortal){[].concat(y(this.dummyEnemies),y(this.smartEnemies)).some(function(e){return(0,l.ifUnitsTouchEachOther)(t.hero,e,10)})&&this.finishGame()}}},{key:"finishGame",value:function(){this.timers.map(function(e){return clearInterval(e)});var e=m.innerText,t=prompt("You lose, your score is "+e,"User");(0,a.sendResultToDatabase)(e,t||"User"),setTimeout(function(){return(0,a.initializeGame)()},10)}},{key:"handleBuffs",value:function(){if((0,l.ifUnitsTouchEachOther)(this.hero,this.buffItem)){this.buffItem.activateBuff(this,2e4),this.buffItem=""}}},{key:"lvlUp",value:function(){this.addEnemyPride(this.smartEnemies,s.SmartEnemy,s.BASE_SMART_SIZE),this.addEnemyPride(this.dummyEnemies,h.DummyEnemy,h.BASE_DUMMY_SIZE),this.lvl++,console.log(this.lvl)}},{key:"shouldEnemyDieIfBulletHitsHim",value:function(e,t){var n=(0,l.ifUnitsTouchEachOther)(e,t);return n&&(e=this.damageUnit(e)),!(!n||!(e.width<25||e.height<25))}},{key:"damageUnit",value:function(e){var t=f.BULLET.damage,n=f.BULLET.speedDecrease,r=e.width*e.height,i=e.defense||0,o=(r-(0<t-i?t-i:4))/r;return e.width*=o,e.height*=o,e.speed>n&&(e.speed-=n),e}},{key:"addEnemy",value:function(e,t,n){var r=this.generateRandomPositionAndDirection(this.hero,n),i=r.size,o=r.x,a=r.y,s=r.alfaX,u=r.alfaY,c=new t(this.ctx,i,i,o,a,s,u,h.SPEED+.15*this.lvl);e.push(c)}},{key:"addEnemyPride",value:function(e,t,n){var r=this.generateRandomPositionAndDirection(this.hero,n),i=r.size,o=r.x,a=r.y,s=r.alfaX,u=r.alfaY,c=new t(this.ctx,i,i,o,a,s,u);e.push(c);for(var h=0;h<this.lvl;h++){var l=this.generateRandomPositionAndDirection(c,n,!0,100),f=l.size,d=l.x,y=l.y,m=new t(this.ctx,f,f,d,y,s,u);e.push(m)}}},{key:"addBullet",value:function(e,t){var n=(0,l.getCenterCoordinates)(this.hero),r=u(n,2),i=r[0],o=r[1],a=Math.atan2(i-e,o-t)+Math.PI,s=new f.Bullet(this.ctx,i,o,Math.sin(a),Math.cos(a));this.heroBullets.push(s)}},{key:"addBuffItem",value:function(){var e=this.generateRandomPositionAndDirection(this.hero,0),t=e.x,n=e.y,r=new o.RandomBuff(this.ctx,20,20,t,n);this.buffItem=r}},{key:"generateRandomPositionAndDirection",value:function(e,t){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:200,i=void 0,o=void 0,a=20*Math.random()+t+5*this.lvl,s=void 0;do{var u={x:i=Math.random()*this.ctx.canvas.clientWidth,y:o=Math.random()*this.ctx.canvas.clientHeight,width:a,height:a};s=(0,l.isDistanceBetweenUnitsMoreThanSafe)(e,u,r)}while(n?s:!s);return{x:i,y:o,alfaX:2*Math.random()-1,alfaY:2*Math.random()-1,size:a}}}]),t}()},{"./controls":1,"./creatures/bullet":2,"./creatures/dummyEnemy":3,"./creatures/hero":4,"./creatures/smartEnemy":5,"./items/buff-generator":8,"./items/landscape":10,"./main":14,"./utils":15}],8:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.RandomBuff=function(e,t,n,r,i){var o=a[~~(3*Math.random())];return new o.constructor(e,t,n,r,i,o.selector)};var r=e("./sword"),i=e("./shield"),o=e("./shoes"),a=[{selector:".sword",constructor:r.Sword},{selector:".shield",constructor:i.Shield},{selector:".shoes",constructor:o.Shoes}]},{"./shield":11,"./shoes":12,"./sword":13}],9:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.Item=function(){function a(e,t,n,r,i,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),this.ctx=e,this.width=t,this.height=n,this.x=r,this.y=i,this.sprite={x:0,y:0,width:16,height:16},this.image=document.querySelector(o)}return r(a,[{key:"draw",value:function(e){var t=this.image,n=this.sprite,r=this.x,i=this.y,o=this.width,a=this.height;return e.drawImage(t,n.x,n.y,n.width,n.height,r,i,o,a),this}}]),a}()},{}],10:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.Landscape=function(){function o(e,t,n,r,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),this.ctx=e,this.width=t,this.height=n,this.canvasWidth=r,this.canvasHeight=i,this.sprite={x:0,y:0,width:32,height:32},this.image=document.querySelector(".landscape")}return r(o,[{key:"draw",value:function(e){for(var t=this.image,n=this.sprite,r=this.canvasWidth,i=this.canvasHeight,o=this.width,a=this.height,s=0;s<r;s+=o)for(var u=0;u<i;u+=a)e.drawImage(t,n.x,n.y,n.width,n.height,s,u,o,a);return this}}]),o}()},{}],11:[function(e,t,n){"use strict";var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Shield=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./item");n.Shield=function(e){function a(e,t,n,r,i,o){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":s(t))&&"function"!=typeof t?e:t}(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,e,t,n,r,i,o))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,i.Item),r(a,[{key:"activateBuff",value:function(e,t){e.hero.isImmortal=!0,setTimeout(function(){return e.hero.isImmortal=!1},t)}}]),a}()},{"./item":9}],12:[function(e,t,n){"use strict";var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Shoes=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./item"),o=e("../creatures/hero");function u(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}n.Shoes=function(e){function a(e,t,n,r,i,o){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":s(t))&&"function"!=typeof t?e:t}(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,e,t,n,r,i,o))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,i.Item),r(a,[{key:"activateBuff",value:function(e,t){(0,o.increaseHeroVelocityByBuff)();var n=[].concat(u(e.smartEnemies),u(e.dummyEnemies));n.forEach(function(e){return e.speed/=5}),setTimeout(function(){console.log("speed fixed back"),(0,o.decreaseHeroVelocityByDebuff)(),n.forEach(function(e){return e.speed*=5})},t)}}]),a}()},{"../creatures/hero":4,"./item":9}],13:[function(e,t,n){"use strict";var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Sword=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./item"),o=e("../creatures/bullet");n.Sword=function(e){function a(e,t,n,r,i,o){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":s(t))&&"function"!=typeof t?e:t}(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,e,t,n,r,i,o))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,i.Item),r(a,[{key:"activateBuff",value:function(e,t){(0,o.growBullet)(),setTimeout(function(){return(0,o.shrinkBullet)()},t)}}]),a}()},{"../creatures/bullet":2,"./item":9}],14:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.initializeGame=h,n.sendResultToDatabase=function(e,t){fetch(u,{method:"POST",body:JSON.stringify({score:e,name:t})})},n.getScoreFromDatabase=f;var r=e("./game-arena"),i=void 0,o=document.querySelector(".score"),a=document.querySelector(".speed"),s=document.querySelector("canvas"),u="https://shooter-game-2a1be.firebaseio.com/statistics/.json",c=[];function h(){f(),i=new r.Game(s),o.innerHTML=0,a.innerHTML=0,document.addEventListener("keydown",l,{once:!0})}function l(){i.start()}function f(){fetch(u,{method:"GET"}).then(function(e){return e.json()}).then(function(e){c=e,console.log(c)}).catch(function(e){return console.log("misterious error")})}h()},{"./game-arena":7}],15:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var l=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};function f(e){return[e.x+.5*e.width,e.y+.5*e.height]}function r(e,t){var n=f(e),r=l(n,2),i=r[0],o=r[1],a=f(t),s=l(a,2),u=s[0],c=s[1];return Math.pow(Math.pow(i-u,2)+Math.pow(o-c,2),.5)}n.getCenterCoordinates=f,n.getDistanceBetweenUnits=r,n.ifUnitsTouchEachOther=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,r=f(e),i=l(r,2),o=i[0],a=i[1],s=f(t),u=l(s,2),c=u[0],h=u[1];return Math.abs(c-o)<(e.width+t.width-d-n)/2&&Math.abs(h-a)<(e.height+t.height-d-n)/2},n.isDistanceBetweenUnitsMoreThanSafe=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:i;return r(e,t)>n},n.mergeUnits=function(e,t){var n=e.width*e.height,r=t.width*t.height,i=Math.pow((n+r)/n,.5);return e.width*=i,e.height*=i,e};var d=2;var i=200},{}]},{},[14]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
