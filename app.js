!function o(s,a,u){function c(t,e){if(!a[t]){if(!s[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(l)return l(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var i=a[t]={exports:{}};s[t][0].call(i.exports,function(e){return c(s[t][1][e]||e)},i,i.exports,o,s,a,u)}return a[t].exports}for(var l="function"==typeof require&&require,e=0;e<u.length;e++)c(u[e]);return c}({1:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.HERO_PARAMS={height:50,width:30,posX:50,posY:50,spriteLayer:{top:3,left:1,right:2,bottom:0}},n.BUFF_PARAMS={buffTime:2e4,speedGrowth:1.6},n.BULLET_PARAMS={speed:10,color:"red",colorSecond:"yellow",size:5,damage:35,speedDecrease:.1,growAfterBuff:2,minDamage:10,minCreatureSize:30},n.SMART_ENEMY_PARAMS={speed:.6,size:25,message:{x:10,y:5,font:"13px Arial"},spriteLayer:{top:3,left:1,right:2,bottom:0},defenseIncrease:3,speedIncrease:.1,maxSize:100,fearDistance:300,visibilityDistance:200},n.DUMMY_ENEMY_PARAMS={speed:.8,size:25,spriteLayer:{top:3,left:1,right:2,bottom:0}},n.INTERVALS={updateGameState:20,updateSprites:200,addSmartEnemy:3e3,addDummyEnemy:4e4,addBuffItem:8e3,lvlUp:13e3},n.LVL_BUFFS={speedIncrease:.25,sizeIncrease:2}},{}],2:[function(e,t,n){"use strict";var h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Bullet=n.currentBullet=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.growBullet=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:f.BULLET_PARAMS.growAfterBuff;d.size*=e,d.damage*=e,d.speedDecrease*=e},n.shrinkBullet=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:f.BULLET_PARAMS.growAfterBuff;d.size/=e,d.damage/=e,d.speedDecrease/=e},n.makeBulletDefault=function(){d.size=f.BULLET_PARAMS.size,d.damage=f.BULLET_PARAMS.damage,d.speedDecrease=f.BULLET_PARAMS.speedDecrease};var i=e("./unit"),f=e("../constants");var d=n.currentBullet={size:f.BULLET_PARAMS.size,damage:f.BULLET_PARAMS.damage,speedDecrease:f.BULLET_PARAMS.speedDecrease};n.Bullet=function(e){function l(e,t,n,r,i){var o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:d.size,s=6<arguments.length&&void 0!==arguments[6]?arguments[6]:d.size,a=7<arguments.length&&void 0!==arguments[7]?arguments[7]:f.BULLET_PARAMS.speed,u=8<arguments.length&&void 0!==arguments[8]?arguments[8]:f.BULLET_PARAMS.color;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l);var c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":h(t))&&"function"!=typeof t?e:t}(this,(l.__proto__||Object.getPrototypeOf(l)).call(this,e,o,s,t-d.size/2,n-d.size/2,r,i,a));return c.color=u,c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":h(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(l,i.Unit),r(l,[{key:"newPos",value:function(){return this.x+=this.speed*this.dir.x,this.y+=this.speed*this.dir.y,this}},{key:"update",value:function(e){return e.beginPath(),e.fillStyle=this.color,e.arc(this.x,this.y,this.width,0,2*Math.PI,!0),e.fill(),e.beginPath(),e.fillStyle=f.BULLET_PARAMS.colorSecond,e.arc(this.x+2,this.y+2,this.width/2,0,2*Math.PI,!0),e.fill(),this}}]),l}()},{"../constants":1,"./unit":6}],3:[function(e,t,n){"use strict";var l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.DummyEnemy=n.BASE_DUMMY_SIZE=n.SPEED=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./unit"),o=e("../constants");var h=n.SPEED=o.DUMMY_ENEMY_PARAMS.speed;n.BASE_DUMMY_SIZE=o.DUMMY_ENEMY_PARAMS.size,n.DummyEnemy=function(e){function c(e,t,n,r,i,o,s){var a=7<arguments.length&&void 0!==arguments[7]?arguments[7]:h;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);var u=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":l(t))&&"function"!=typeof t?e:t}(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,e,t,n,r,i,o,s,a));return u.sprite={baseX:1,baseY:0,x:0,y:50*u.getSpriteLayerValue(u.dir.x,u.dir.y),width:34,height:48,deltaX:50,deltaY:50},u.image=document.querySelector(".ice-demon"),u}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":l(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,i.Unit),r(c,[{key:"setNextSprite",value:function(){this.sprite.x<100?this.sprite.x+=this.sprite.deltaX:this.sprite.x=this.sprite.baseX}},{key:"update",value:function(e){var t=this.sprite,n=this.x,r=this.y,i=this.width,o=this.height,s=this.image;return e.drawImage(s,t.x,t.y,t.width,t.height,n,r,i,o),this}},{key:"getSpriteLayerValue",value:function(e,t){var n=o.DUMMY_ENEMY_PARAMS.spriteLayer;return Math.abs(e)>Math.abs(t)?0<e?n.right:n.left:0<t?n.bottom:n.top}}]),c}()},{"../constants":1,"./unit":6}],4:[function(e,t,n){"use strict";var l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Hero=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.increaseHeroVelocityByBuff=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:h.BUFF_PARAMS.speedGrowth;f.speed*=e,f.acceleration*=e,f.maxAccelerationTime*=e},n.decreaseHeroVelocityByDebuff=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:h.BUFF_PARAMS.speedGrowth;f.speed/=e,f.acceleration/=e,f.maxAccelerationTime/=e};var i=e("./unit"),h=e("../constants");var f={speed:1,acceleration:5e-4,maxAccelerationTime:3e3};n.Hero=function(e){function c(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:h.HERO_PARAMS.width,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:h.HERO_PARAMS.height,r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:h.HERO_PARAMS.posX,i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:h.HERO_PARAMS.posY,o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0,s=6<arguments.length&&void 0!==arguments[6]?arguments[6]:1,a=7<arguments.length&&void 0!==arguments[7]?arguments[7]:f.speed;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);var u=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":l(t))&&"function"!=typeof t?e:t}(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,e,t,n,r,i,o,s,a));return u.isImmortal=!1,u.accelerationStartTime=0,u.currentAccelerationTimer="",u.currentBuffs=[],u.sprite={baseX:2,baseY:1,x:2,y:1,width:27,height:32,deltaX:32,deltaY:32},u.image=document.querySelector(".hero-sprite"),u}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":l(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,i.Unit),r(c,[{key:"setNextSprite",value:function(){this.sprite.x<64?this.sprite.x+=this.sprite.deltaX:this.sprite.x=this.sprite.baseX}},{key:"update",value:function(e){var t=this.sprite,n=this.x,r=this.y,i=this.width,o=this.height,s=this.image;return document.querySelector(".speed").innerHTML=~~(100*this.speed)/100,e.drawImage(s,t.x,t.y,t.width,t.height,n,r,i,o),this}},{key:"updateSpriteDirection",value:function(e){this.sprite.y=this.sprite.baseY+h.HERO_PARAMS.spriteLayer[e]*this.sprite.deltaY}},{key:"makeHeroSpeedParamsDefault",value:function(){this.currentAccelerationTimer&&clearInterval(this.currentAccelerationTimer),this.speed=f.speed,this.accelerationStartTime=0}},{key:"setNewSpeedTimer",value:function(){var e=this,t=this.speed;this.accelerationStartTime=0,this.currentAccelerationTimer=setInterval(function(){e.accelerationStartTime+=50,e.speed=t+f.acceleration*e.accelerationStartTime,e.accelerationStartTime>=f.maxAccelerationTime&&clearInterval(e.currentAccelerationTimer)},50)}},{key:"drawBuffs",value:function(n){var r=this,i=h.BUFF_PARAMS.buffTime/1e3;return this.currentBuffs.forEach(function(e,t){n.fillStyle=e.type,n.fillRect(r.x,r.y-10-10*t,r.width*(i-e.time)/i,7)}),this}}]),c}()},{"../constants":1,"./unit":6}],5:[function(e,t,n){"use strict";var l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.SmartEnemy=n.BASE_SMART_SIZE=void 0;var a=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./unit"),u=e("../utils/geometryUtils"),h=e("../constants");n.BASE_SMART_SIZE=h.SMART_ENEMY_PARAMS.size,n.SmartEnemy=function(e){function c(e,t,n,r,i,o,s){var a=7<arguments.length&&void 0!==arguments[7]?arguments[7]:h.SMART_ENEMY_PARAMS.speed;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);var u=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":l(t))&&"function"!=typeof t?e:t}(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,e,t,n,r,i,o,s,a));return u.sprite={baseX:6,baseY:3,x:6,y:48*u.getSpriteLayerValue(u.dir.x,u.dir.y)+3,width:34,height:47,deltaX:48,deltaY:48},u.image=document.querySelector(".mashroom"),u.defense=0,u}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":l(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,i.Unit),r(c,[{key:"setNextSprite",value:function(){this.sprite.x<96?this.sprite.x+=this.sprite.deltaX:this.sprite.x=this.sprite.baseX}},{key:"newPos",value:function(e){return this.sprite.y=48*this.getSpriteLayerValue(this.dir.x,this.dir.y)+this.sprite.baseY,this.updateDirection(e),function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var s=i.get;return void 0!==s?s.call(r):void 0}(c.prototype.__proto__||Object.getPrototypeOf(c.prototype),"newPos",this).call(this),this}},{key:"update",value:function(e){var t=this.sprite,n=this.x,r=this.y,i=this.width,o=this.height,s=this.image;return e.drawImage(s,t.x,t.y,t.width,t.height,n,r,i,o),this}},{key:"getSpriteLayerValue",value:function(e,t){var n=h.SMART_ENEMY_PARAMS.spriteLayer;return Math.abs(e)>Math.abs(t)?0<e?n.right:n.left:0<t?n.bottom:n.top}},{key:"showWarningMessage",value:function(e){var t=h.SMART_ENEMY_PARAMS.message;this.ctx.font=t.font,this.ctx.strokeText(e,this.x+t.x,this.y-t.y)}},{key:"updateDirection",value:function(e){var t=e.isImmortal?{distance:h.SMART_ENEMY_PARAMS.fearDistance,isFear:1,message:"You don't catch me!"}:{distance:h.SMART_ENEMY_PARAMS.visibilityDistance,isFear:-1,message:"I see you!"};if(!(0,u.isDistanceBetweenUnitsMoreThanSafe)(e,this,t.distance)){var n=(0,u.getCenterCoordinates)(e),r=a(n,2),i=r[0],o=r[1],s=Math.atan2(i-this.x-this.width/2,o-this.y-this.height/2)+Math.PI;this.dir.y=t.isFear*Math.cos(s),this.dir.x=t.isFear*Math.sin(s),this.showWarningMessage(t.message)}}},{key:"eat",value:function(e){var t=h.SMART_ENEMY_PARAMS.defenseIncrease,n=h.SMART_ENEMY_PARAMS.speedIncrease,r=h.SMART_ENEMY_PARAMS.speed,i=this.width*this.height,o=e.width*e.height,s=Math.pow((i+o)/i,.5);this.width*=s,this.height*=s,this.defense=Math.max(this.defense,e.defense)+t;var a=Math.max(this.speed,e.speed);this.speed=r<a?a+=n:r,this.x=(this.x*i+e.x*o)/(i+o),this.y=(this.y*i+e.y*o)/(i+o)}}]),c}()},{"../constants":1,"../utils/geometryUtils":20,"./unit":6}],6:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Unit=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("../utils/geometryUtils");n.Unit=function(){function u(e,t,n,r,i,o,s,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),this.ctx=e,this.width=t,this.height=n,this.speed=a,this.x=r,this.y=i,this.dir={x:o,y:s}}return r(u,[{key:"newPos",value:function(){return this.x+=this.speed*this.dir.x,this.y+=this.speed*this.dir.y,(0,i.moveToAnotherSideIfGoBeyonceCanvas)(this.ctx,this),this}}]),u}()},{"../utils/geometryUtils":20}],7:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Game=void 0;var u=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./main"),o=e("./replay"),s=e("./utils/effectsUtils"),a=e("./utils/controlsUtils"),c=e("./utils/canvasUtils"),h=e("./utils/geometryUtils"),l=e("./utils/userUtils"),y=e("./creatures/dummyEnemy"),f=e("./creatures/smartEnemy"),d=e("./creatures/bullet"),m=e("./creatures/hero"),p=e("./items/buffs/buffGenerator"),v=e("./items/landscape"),b=e("./constants");function g(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}n.Game=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=e,this.canvas.width=700,this.canvas.height=700,this.ctx=this.canvas.getContext("2d"),this.startTime=Date.now(),this.currentTime=Date.now(),this.hero=new m.Hero(this.ctx),this.landscape=new v.Landscape(this.ctx,96,72),this.dummyEnemies=[],this.smartEnemies=[],this.heroBullets=[],this.timers=[],this.lvl=1,this.buffItem="",this.replay={landscape:this.landscape,units:[]},this.drawLandscape(),this.handleHeroPosition()}return r(t,[{key:"start",value:function(){var n=this,e=setInterval(function(){return n.updateGameState()},b.INTERVALS.updateGameState),t=setInterval(function(){return n.updateSprites()},b.INTERVALS.updateSprites),r=setInterval(function(){return n.addEnemy(n.smartEnemies,f.SmartEnemy,f.BASE_SMART_SIZE)},b.INTERVALS.addSmartEnemy),i=setInterval(function(){return n.addEnemy(n.dummyEnemies,y.DummyEnemy,y.BASE_DUMMY_SIZE)},b.INTERVALS.addDummyEnemy),o=setInterval(function(){return n.addBuffItem()},b.INTERVALS.addBuffItem),s=setInterval(function(){return n.lvlUp()},b.INTERVALS.lvlUp);this.timers.push(e,t,r,i,o,s),(0,a.addHeroControls)(this.hero,function(e,t){return n.addBullet(e,t)})}},{key:"updateGameState",value:function(){this.updateCanvasState(),this.currentTime=(0,l.updateScoreLabel)(this.currentTime,this.startTime),(0,o.addSnapshotToReplay)(this.replay.units,this.currentTime-this.startTime,this.hero,this.dummyEnemies,this.smartEnemies,this.heroBullets,this.buffItem,this.lvl)}},{key:"updateSprites",value:function(){[this.hero].concat(g(this.dummyEnemies),g(this.smartEnemies)).forEach(function(e){return e.setNextSprite()})}},{key:"updateCanvasState",value:function(){(0,c.clearCanvas)(this.ctx),this.drawLandscape(),this.handleHeroDeath(),this.handleHeroPosition(),this.handleBuffItemPosition(),this.heroBullets=(0,h.getElementsInsideCanvas)(this.ctx,this.heroBullets),this.handleDummyEnemiesPosition(),this.handleSmartEnemiesPosition(),this.handleEnemiesDeath(),this.handleBuffs()}},{key:"drawLandscape",value:function(){this.landscape.draw(this.ctx)}},{key:"handleHeroPosition",value:function(){this.hero.newPos().update(this.ctx).drawBuffs(this.ctx)}},{key:"handleBuffItemPosition",value:function(){this.buffItem&&this.buffItem.draw(this.ctx)}},{key:"handleDummyEnemiesPosition",value:function(){var t=this;this.dummyEnemies.forEach(function(e){return e.newPos().update(t.ctx)})}},{key:"handleSmartEnemiesPosition",value:function(){var r=this;this.smartEnemies=this.smartEnemies.reduce(function(e,t){if(e.some(function(e){return(0,h.ifUnitsTouchEachOther)(e,t)}))return e;var n=r.smartEnemies.find(function(e){return(0,h.ifUnitsTouchEachOther)(e,t)&&e!==t});return n&&t.eat(n),e.push(t),e},[]),this.smartEnemies.forEach(function(e){return e.newPos(r.hero).update(r.ctx)})}},{key:"handleEnemiesDeath",value:function(){var e=this,n=[],r=[],i=[],o=[].concat(g(this.smartEnemies),g(this.dummyEnemies));this.smartEnemies.forEach(function(t){e.heroBullets.some(function(e){return(0,s.shouldEnemyDieIfBulletHitsHim)(t,e)})||n.push(t)}),this.dummyEnemies.forEach(function(t){e.heroBullets.some(function(e){return(0,s.shouldEnemyDieIfBulletHitsHim)(t,e)})||r.push(t)}),this.heroBullets.forEach(function(t){o.some(function(e){return(0,s.shouldEnemyDieIfBulletHitsHim)(e,t)})||i.push(t)}),this.smartEnemies=n,this.dummyEnemies=r,this.heroBullets=i}},{key:"handleHeroDeath",value:function(){var t=this;this.hero.isImmortal||[].concat(g(this.dummyEnemies),g(this.smartEnemies)).some(function(e){return(0,h.ifUnitsTouchEachOther)(t.hero,e,10)})&&this.finishGame()}},{key:"finishGame",value:function(){var e=this;this.stopGameAndClearState(),(0,l.showReplayButton)(),(0,l.showLoseMessage)(),(0,l.subscribeToShowReplay)(function(){return(0,o.showReplay)(e.replay,e.ctx)}),document.addEventListener("keydown",i.initializeGame,{once:!0})}},{key:"stopGameAndClearState",value:function(){this.timers.map(function(e){return clearInterval(e)}),this.hero.currentBuffs.map(function(e){return clearInterval(e.timer)}),(0,d.makeBulletDefault)()}},{key:"handleBuffs",value:function(){(0,h.ifUnitsTouchEachOther)(this.hero,this.buffItem)&&(this.buffItem.activateBuff(this),this.buffItem="")}},{key:"lvlUp",value:function(){this.addEnemyStack(this.dummyEnemies,y.DummyEnemy,y.BASE_DUMMY_SIZE),this.lvl++,(0,l.updateLevelLabel)(this.lvl)}},{key:"addEnemy",value:function(e,t,n){var r=this.generateRandomPositionAndDirection(this.hero,n),i=r.size,o=r.x,s=r.y,a=r.alfaX,u=r.alfaY,c=new t(this.ctx,.8*i,i,o,s,a,u,y.SPEED+b.LVL_BUFFS.speedIncrease*this.lvl);e.push(c)}},{key:"addEnemyStack",value:function(e,t,n){var r=this.generateRandomPositionAndDirection(this.hero,n),i=r.size,o=r.x,s=r.y,a=r.alfaX,u=r.alfaY,c=new t(this.ctx,.8*i,i,o,s,a,u,y.SPEED+b.LVL_BUFFS.speedIncrease*this.lvl);e.push(c);for(var l=0;l<this.lvl;l++){var h=this.generateRandomPositionAndDirection(c,n,!0,100),f=h.size,d=h.x,m=h.y,p=new t(this.ctx,.8*f,f,d,m,a,u,y.SPEED+b.LVL_BUFFS.speedIncrease*this.lvl);e.push(p)}}},{key:"addBullet",value:function(e,t){var n=(0,h.getCenterCoordinates)(this.hero),r=u(n,2),i=r[0],o=r[1],s=Math.atan2(i-e,o-t)+Math.PI,a=new d.Bullet(this.ctx,i,o,Math.sin(s),Math.cos(s));this.heroBullets.push(a)}},{key:"addBuffItem",value:function(){var e=this.generateRandomPositionAndDirection(this.hero,0),t=e.x,n=e.y,r=new p.RandomBuff(this.ctx,20,20,t,n);this.buffItem=r}},{key:"generateRandomPositionAndDirection",value:function(e,t){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:200,i=void 0,o=void 0,s=void 0,a=20*Math.random()+t+this.lvl*b.LVL_BUFFS.sizeIncrease,u=2*Math.random()-1,c=2*Math.random()-1;do{var l={x:i=Math.random()*this.ctx.canvas.clientWidth,y:o=Math.random()*this.ctx.canvas.clientHeight,width:a,height:a};s=(0,h.isDistanceBetweenUnitsMoreThanSafe)(e,l,r)}while(n?s:!s);return{x:i,y:o,alfaX:u,alfaY:c,size:a}}}]),t}()},{"./constants":1,"./creatures/bullet":2,"./creatures/dummyEnemy":3,"./creatures/hero":4,"./creatures/smartEnemy":5,"./items/buffs/buffGenerator":8,"./items/landscape":13,"./main":14,"./replay":15,"./utils/canvasUtils":17,"./utils/controlsUtils":18,"./utils/effectsUtils":19,"./utils/geometryUtils":20,"./utils/userUtils":23}],8:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.buffTypes=void 0,n.RandomBuff=function(e,t,n,r,i){var o=s[~~(3*Math.random())];return new o.constructor(e,t,n,r,i,o.selector)};var r=e("./sword"),i=e("./shield"),o=e("./shoes"),s=n.buffTypes=[{selector:".sword",constructor:r.Sword,color:"red"},{selector:".shield",constructor:i.Shield,color:"black"},{selector:".shoes",constructor:o.Shoes,color:"blue"}]},{"./shield":10,"./shoes":11,"./sword":12}],9:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.Item=function(){function s(e,t,n,r,i,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),this.ctx=e,this.width=t,this.height=n,this.x=r,this.y=i,this.sprite={x:0,y:0,width:16,height:16},this.image=document.querySelector(o)}return r(s,[{key:"draw",value:function(e){var t=this.image,n=this.sprite,r=this.x,i=this.y,o=this.width,s=this.height;return e.drawImage(t,n.x,n.y,n.width,n.height,r,i,o,s),this}}]),s}()},{}],10:[function(e,t,n){"use strict";var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Shield=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./item"),o=e("../../utils/effectsUtils"),u=e("./buffGenerator");n.Shield=function(e){function s(e,t,n,r,i,o){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":a(t))&&"function"!=typeof t?e:t}(this,(s.__proto__||Object.getPrototypeOf(s)).call(this,e,t,n,r,i,o))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":a(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(s,i.Item),r(s,[{key:"activateBuff",value:function(e){(0,o.addBuffIndicator)(e.hero,u.buffTypes[1].color),e.hero.isImmortal=!0}}]),s}()},{"../../utils/effectsUtils":19,"./buffGenerator":8,"./item":9}],11:[function(e,t,n){"use strict";var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Shoes=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./item"),o=e("../../creatures/hero"),u=e("../../utils/effectsUtils"),c=e("./buffGenerator"),l=e("../../constants");function h(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}n.Shoes=function(e){function s(e,t,n,r,i,o){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":a(t))&&"function"!=typeof t?e:t}(this,(s.__proto__||Object.getPrototypeOf(s)).call(this,e,t,n,r,i,o))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":a(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(s,i.Item),r(s,[{key:"activateBuff",value:function(e){(0,u.addBuffIndicator)(e.hero,c.buffTypes[2].color),(0,o.increaseHeroVelocityByBuff)();var t=[].concat(h(e.smartEnemies),h(e.dummyEnemies));t.forEach(function(e){return e.speed/=5});var n=setTimeout(function(){(0,o.decreaseHeroVelocityByDebuff)(),t.forEach(function(e){return e.speed*=5})},l.BUFF_PARAMS.buffTime);e.timers.push(n)}}]),s}()},{"../../constants":1,"../../creatures/hero":4,"../../utils/effectsUtils":19,"./buffGenerator":8,"./item":9}],12:[function(e,t,n){"use strict";var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Sword=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./item"),o=e("../../creatures/bullet"),u=e("../../utils/effectsUtils"),c=e("./buffGenerator"),l=e("../../constants");n.Sword=function(e){function s(e,t,n,r,i,o){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":a(t))&&"function"!=typeof t?e:t}(this,(s.__proto__||Object.getPrototypeOf(s)).call(this,e,t,n,r,i,o))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":a(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(s,i.Item),r(s,[{key:"activateBuff",value:function(e){(0,u.addBuffIndicator)(e.hero,c.buffTypes[0].color),(0,o.growBullet)();var t=setTimeout(function(){return(0,o.shrinkBullet)()},l.BUFF_PARAMS.buffTime);e.timers.push(t)}}]),s}()},{"../../constants":1,"../../creatures/bullet":2,"../../utils/effectsUtils":19,"./buffGenerator":8,"./item":9}],13:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.Landscape=function(){function r(e,t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.ctx=e,this.width=t,this.height=n,this.canvasWidth=e.canvas.clientWidth,this.canvasHeight=e.canvas.clientWidth,this.sprite={x:0,y:0,width:96,height:72},this.image=document.querySelector(".landscape")}return i(r,[{key:"draw",value:function(e){for(var t=this.image,n=this.sprite,r=this.canvasWidth,i=this.canvasHeight,o=this.width,s=this.height,a=0;a<r;a+=o)for(var u=0;u<i;u+=s)e.drawImage(t,n.x,n.y,n.width,n.height,a,u,o,s);return this}}]),r}()},{}],14:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.game=void 0,n.initializeGame=function(){var e=document.querySelector("canvas");(0,i.hideReplayButton)(),n.game=u=new r.Game(e),document.querySelector(".speed").innerHTML=0,document.querySelector(".score").innerHTML=0,document.addEventListener("keydown",c,{once:!0})},n.startGame=c;var r=e("./game"),i=e("./utils/userUtils"),o=a(e("./utils/router")),s=a(e("./routes"));function a(e){return e&&e.__esModule?e:{default:e}}var u=n.game=void 0;function c(){u.start()}new o.default(s.default)},{"./game":7,"./routes":16,"./utils/router":22,"./utils/userUtils":23}],15:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.addSnapshotToReplay=function(e,t,n,r,i,o,s,a){e.push((u=t,c=n,l=r,h=i,f=o,d=s,m=a,{time:u,hero:{unit:c,posX:~~c.x,posY:~~c.y,spriteX:c.sprite.x,spriteY:c.sprite.y,speed:c.speed},dummyEnemies:p(l),smartEnemies:p(h),heroBullets:p(f),buffItem:d,lvl:m}));var u,c,l,h,f,d,m},n.showReplay=function(u,c){document.removeEventListener("keydown",h.initializeGame);var l=0;u.spriteTimer=setInterval(function(){var e,t,n,r,i;e=u.units[l],t=e.hero,n=e.dummyEnemies,r=e.smartEnemies,i=e.lvl,document.querySelector(".speed").innerHTML=~~(100*t.speed)/100,[t].concat(o(n),o(r)).forEach(function(e){return e.unit.setNextSprite()}),(0,f.updateLevelLabel)(i)},r.INTERVALS.updateSprites),u.positionTimer=setInterval(function(){var e,t,n,r,i,o,s,a;e=c,t=u.units[l],n=u.landscape,r=t.hero,i=t.dummyEnemies,o=t.smartEnemies,s=t.heroBullets,a=t.buffItem,(0,d.clearCanvas)(e),n.draw(e),y(r),r.unit.sprite.x=r.spriteX,r.unit.sprite.y=r.spriteY,r.unit.speed=r.speed,r.unit.newPos().update(e),m(e,i),m(e,o,r.unit),m(e,s),a&&a.draw(e),++l===u.units.length-1&&(clearInterval(u.spriteTimer),clearInterval(u.positionTimer),(0,f.hideReplayButton)(),(0,h.initializeGame)())},r.INTERVALS.updateGameState)};var h=e("./main"),f=e("./utils/userUtils"),d=e("./utils/canvasUtils"),r=e("./constants");function o(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function p(e){return e.map(function(e){return{unit:e,posX:~~e.x,posY:~~e.y,width:~~e.width,height:~~e.height}})}function m(t,e,n){e.forEach(function(e){y(e),e.unit.width=e.width,e.unit.height=e.height,e.unit.newPos(n).update(t)})}function y(e){e.unit.x=e.posX,e.unit.y=e.posY}},{"./constants":1,"./main":14,"./utils/canvasUtils":17,"./utils/userUtils":23}],16:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o=e("./main"),r=e("./utils/requestUtils"),s=document.querySelector(".sprite-wrapper"),a=document.querySelector(".game-container"),u=[{src:"./img/hero.png",className:"hero-sprite"},{src:"./img/sword.png",className:"sword"},{src:"./img/shoes.png",className:"shoes"},{src:"./img/shield.png",className:"shield"},{src:"./img/landscape.png",className:"landscape"},{src:"./img/ice-demon.png",className:"ice-demon"},{src:"./img/mashroom.png",className:"mashroom"}],i=void 0,c=[{match:"",onEnter:function(){window.location.hash="game"}},{match:"game",onEnter:function(){var n,r,i;a.classList.add("arena"),l("game"),a.innerHTML='\n  <div class="level-container">\n    Level:\n    <span class="level">1</span>\n  </div>\n  <div class="score-container">\n    Score:\n    <span class="score">0</span>\n  </div>\n  <div class="speed-container">\n    Speed:\n    <span class="speed">0</span>\n  </div>\n  <div class="replay-container">\n    <button class="btn">Show replay</button>\n  </div>\n  <canvas></canvas>\n  ',s.innerHTML?(0,o.initializeGame)():(n=s,r=o.initializeGame,i=0,u.forEach(function(e){var t=new Image;t.className=e.className,t.src=e.src,t.onload=function(){++i===u.length&&r()},n.appendChild(t)}))},onLeave:function(){a.classList.remove("arena"),o.game.stopGameAndClearState(),clearInterval(o.game.replay.spriteTimer),clearInterval(o.game.replay.positionTimer),document.removeEventListener("keydown",o.initializeGame),document.removeEventListener("keydown",o.startGame),h("game")}},{match:"scores",onEnter:function(){l("scores"),a.innerHTML='<div class="arena"><div class="lds-ripple"><div></div><div></div></div></div>',i=setTimeout(function(){return(0,r.getScoreFromDatabase)().then(function(e){return a.innerHTML='<div class="container margin-top">\n            <h4>Best scores:</h4>\n            <ul class="list-group">\n              <li class="list-group-item d-flex justify-content-between align-items-center">\n                Username:\n                <span>Score:</span>\n              </li>\n              '+e.map(function(e,t){return'<li class="list-group-item d-flex justify-content-between align-items-center">\n      '+(t+1)+") "+e.name+'\n      <span class="badge badge-primary badge-pill">'+e.score+"</span>\n    </li>"}).join("")+"\n            </ul>\n          </div>"})},1e3)},onLeave:function(){clearInterval(i),h("scores")}},{match:"rules",onEnter:function(){l("rules"),a.innerHTML='<div class="container margin-top">\n            <h3>Rules:</h3>\n            <h5>Mechanics:</h5>\n            <p>The game is about of hero and his enemies. User can manipulate the hero\n                with arrow buttons <code>🠀 🠁🠃 🠂</code> where push of each change hero direction \n                to the arrow direction. Also you can stop hero, with\n                <code>Ctrl</code> button. </p> Game finish when any of the enemies catches hero.\n            <p>Hero has ability to shoot with his gun to the nearest enemies. User do it with the\n                mouse, shoot action occurs if user press\n                <code>left button</code> mouse. Hero has speed acceleration if moves to one direction. If\n                he changes it, current hero speed discard to minimum.\n            </p>\n            <h5>Enemies:</h5>\n            <p>There are several enemies: dummy enemies, who move only with start direction,\n                and smart enemy, who begin to pursue if see hero at some range. Smart\n                enemy has an ability to increase his size, speed and defense by eating\n                his tribesmen.\n            </p>\n            <h5>Buffs:</h5>\n            <p>Average buff time is <code>20</code> seconds. Hero can activate buff if catches it. \n                At the game every <code>8</code> seconds generates new buff and on the field can be only one buff\n                item. Hero can stack buffs if catches more than one. There are several buffs at the game:</p>\n            <p>\n                <img src="./img/sword.png"> - improve hero\'s gun size and damage. <span class="red">Red</span> line indicator \n                appears when hero take this buff.\n            </p>\n            <p>\n                <img src="./img/shoes.png"> - improve hero\'s speed and when the buff activated decrease speed\n                of all enemies at game field. <span class="blue">Blue</span> line indicator appears when hero take this buff.\n            </p>\n            <p>\n                <img src="./img/shield.png"> - make hero immortal. Smart enemies begin to run away from the hero.\n                <span class="black">Black</span> line indicator appears when hero take this buff.\n            </p>\n            <h5>Lvl up and score:</h5>\n            <p>Every <code>10</code> seconds hero reach new level. With each new level at game field\n                creates a stack of dummy enemies. Amount of creatures at the stack\n                is equalent to the new level. Also every new level the size of creatures\n                and speed of dummy enemies increases. Score is equalent to the time\n                that hero present at game field.\n            </p>\n            <p>Good luck and enjoy!</p>\n          </div>'},onLeave:function(){h("rules")}},{match:"author",onEnter:function(){l("author"),a.innerHTML='<div class="container margin-top">\n            <h3>Author page:</h3>\n            <p>Hello, my name is Evgeniy and i\'m the author of the game. If you have any\n            questions you can find me here <a href="https://www.linkedin.com/in/evgeniy-dainovich/">LinkenIn</a>\n            </p>\n            <p>Game is developed with Javascript and Bootstrap for styling.</p>\n          </div>'},onLeave:function(){h("author")}}];function l(e){document.querySelector('[href="#'+e+'"]').classList.add("active")}function h(e){document.querySelector('[href="#'+e+'"]').classList.remove("active")}n.default=c},{"./main":14,"./utils/requestUtils":21}],17:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.clearCanvas=function(e){e.clearRect(0,0,e.canvas.clientWidth,e.canvas.clientHeight)}},{}],18:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.addHeroControls=function(e,t){i=e,o=i.dir,s=void 0,document.addEventListener("keydown",function(e){var t,n,r;switch(t=s,n=e.keyCode,r=i,s=t!==n?(r.makeHeroSpeedParamsDefault(),17!==n&&r.setNewSpeedTimer(),n):t,e.keyCode){case 38:i.updateSpriteDirection("top"),o.y=-1,o.x=0;break;case 39:i.updateSpriteDirection("right"),o.y=0,o.x=1;break;case 40:i.updateSpriteDirection("bottom"),o.y=1,o.x=0;break;case 37:i.updateSpriteDirection("left"),o.x=-1,o.y=0;break;case 17:i.speed=0,o.x=0,o.y=0}}),n=t,document.querySelector("canvas").addEventListener("click",function(e){n(e.offsetX,e.offsetY)});var n;var i,o,s}},{}],19:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.shouldEnemyDieIfBulletHitsHim=function(e,t){var n=(0,d.ifUnitsTouchEachOther)(e,t);n&&(r=e,i=h.currentBullet.speedDecrease,o=r.width*r.height,u=r,c=h.currentBullet.damage,l=u.defense||0,s=0<c-l?c-l:f.BULLET_PARAMS.minDamage,a=(o-s)/o,r.width*=a,r.height*=a,r.speed>i&&(r.speed-=i),e=r);var r,i,o,s,a,u,c,l;return!(!n||!(e.width<f.BULLET_PARAMS.minCreatureSize||e.height<f.BULLET_PARAMS.minCreatureSize))},n.addBuffIndicator=function(e,t){var n=Date.now(),r={id:n,time:0,type:t};e.currentBuffs.push(r),i=e,o=n,s=i.currentBuffs.find(function(e){return o===e.id}),s.timer=setInterval(function(){if(s.time+=1,s.time>=f.BUFF_PARAMS.buffTime/1e3){clearInterval(s.timer),i.currentBuffs.shift();var e=i.currentBuffs.some(function(e){return e.type===a.buffTypes[1].color});i.isImmortal=e}},1e3);var i,o,s};var h=e("../creatures/bullet"),f=e("../constants"),d=e("./geometryUtils"),a=e("../items/buffs/buffGenerator")},{"../constants":1,"../creatures/bullet":2,"../items/buffs/buffGenerator":8,"./geometryUtils":20}],20:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var h=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var s,a=e[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};function f(e){return[e.x+.5*e.width,e.y+.5*e.height]}function r(e,t){var n=f(e),r=h(n,2),i=r[0],o=r[1],s=f(t),a=h(s,2),u=a[0],c=a[1];return Math.pow(Math.pow(i-u,2)+Math.pow(o-c,2),.5)}n.getCenterCoordinates=f,n.getDistanceBetweenUnits=r,n.ifUnitsTouchEachOther=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,r=f(e),i=h(r,2),o=i[0],s=i[1],a=f(t),u=h(a,2),c=u[0],l=u[1];return Math.abs(c-o)<(e.width+t.width-d-n)/2&&Math.abs(l-s)<(e.height+t.height-d-n)/2},n.isDistanceBetweenUnitsMoreThanSafe=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:i;return r(e,t)>n},n.moveToAnotherSideIfGoBeyonceCanvas=function(e,t){var n=e.canvas.clientWidth,r=e.canvas.clientHeight;t.x>n?t.x=0:t.x<0&&(t.x=n);t.y>r?t.y=0:t.y<0&&(t.y=r)},n.getElementsInsideCanvas=function(t,e){var n=t.canvas.clientWidth,r=t.canvas.clientHeight,i=void 0;return e.filter(function(e){return(i=e.x<n&&0<e.x&&e.y<r&&0<e.y)&&e.newPos().update(t),i})};var d=2;var i=200},{}],21:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.sendResultToDatabase=function(e,t){fetch(r,{method:"POST",body:JSON.stringify({score:e,name:t})})},n.getScoreFromDatabase=function(){return fetch(r+'?orderBy="score"&limitToLast=8',{method:"GET"}).then(function(e){return e.json()}).then(function(e){return i(e)}).catch(function(){return console.log("server error")})},n.getTop8=i;var r="https://shooter-game-2a1be.firebaseio.com/statistics/.json";function i(e){return Object.values(e).sort(function(e,t){return e.score<t.score})}},{}],22:[function(e,t,n){"use strict";function r(e){var t=this;this.routes=e||[],this.currentRoute,this.previousRoute,this.currentParams,this.previousParams,window.addEventListener("hashchange",function(){t.handler(window.location.hash)}),this.handler(window.location.hash)}Object.defineProperty(n,"__esModule",{value:!0}),(n.default=r).prototype={handler:function(e){this.previousRoute=this.currentRoute,this.previousParams=this.currentParams,this.currentRoute=this.findNewRoute(e),this.launchHandlers()},findNewRoute:function(e){e=e.slice(1);for(var t=0;t<this.routes.length;t++){var n=this.routes[t];if("string"==typeof n.match&&n.match===e)return this.currentParams="",n;if("function"==typeof n.match&&n.match(e))return this.currentParams="",n;if(n.match instanceof RegExp&&n.match.test(e))return this.currentParams=e.match(n.match)||[],this.currentParams.splice(0,1),n}},launchHandlers:function(){var e=this;Promise.resolve().then(function(){e.previousRoute&&e.previousRoute.onLeave&&e.previousRoute.onLeave(e.previousParams)}).then(function(){e.currentRoute&&e.currentRoute.onBeforeEnter&&e.currentRoute.onBeforeEnter(e.currentParams)}).then(function(){e.currentRoute&&e.currentRoute.onEnter&&e.currentRoute.onEnter(e.currentParams)})}}},{}],23:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.updateLevelLabel=function(e){document.querySelector(".level").innerHTML=e},n.showReplayButton=function(){document.querySelector(".replay-container").style.display="block"},n.updateScoreLabel=function(e,t){var n=((e+=r.INTERVALS.updateGameState)-t)/10;return document.querySelector(".score").innerHTML=n,e+r.INTERVALS.updateGameState},n.showLoseMessage=function(){var e=document.querySelector(".score").innerText,t=prompt("Sorry, but you lose, your score is "+e,"User");(0,i.sendResultToDatabase)(+e,t||"User")},n.subscribeToShowReplay=function(e){document.querySelector(".replay-container").addEventListener("click",e,{once:!0})},n.hideReplayButton=function(){document.querySelector(".replay-container").style.display="none"};var r=e("../constants"),i=e("./requestUtils")},{"../constants":1,"./requestUtils":21}]},{},[14]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
