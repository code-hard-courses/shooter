!function o(a,s,u){function c(t,e){if(!s[t]){if(!a[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(f)return f(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var i=s[t]={exports:{}};a[t][0].call(i.exports,function(e){return c(a[t][1][e]||e)},i,i.exports,o,a,s,u)}return s[t].exports}for(var f="function"==typeof require&&require,e=0;e<u.length;e++)c(u[e]);return c}({1:[function(e,t,n){"use strict";var l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Bullet=n.BULLET=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.growBullet=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:2;h.size*=e,h.damage*=e,h.speedDecrease*=e},n.shrinkBullet=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:2;h.size/=e,h.damage/=e,h.speedDecrease/=e};var i=e("./unit");var h=n.BULLET={size:5,damage:20,speedDecrease:.1};n.Bullet=function(e){function f(e,t,n,r,i){var o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:h.size,a=6<arguments.length&&void 0!==arguments[6]?arguments[6]:h.size,s=7<arguments.length&&void 0!==arguments[7]?arguments[7]:10,u=8<arguments.length&&void 0!==arguments[8]?arguments[8]:"black";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f);var c=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":l(t))&&"function"!=typeof t?e:t}(this,(f.__proto__||Object.getPrototypeOf(f)).call(this,e,o,a,t-h.size/2,n-h.size/2,r,i,s));return c.color=u,c}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":l(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(f,i.Unit),r(f,[{key:"newPos",value:function(){return this.x+=this.speed*this.dir.x,this.y+=this.speed*this.dir.y,this}},{key:"update",value:function(e){return e.beginPath(),e.fillStyle=this.color,e.arc(this.x,this.y,h.size,0,2*Math.PI,!0),e.fill(),this}}]),f}()},{"./unit":5}],2:[function(e,t,n){"use strict";var f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.DummyEnemy=n.BASE_DUMMY_SIZE=n.SPEED=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./unit");var l=n.SPEED=.8,a=(n.BASE_DUMMY_SIZE=25,document.querySelector(".dummy-enemy-sprite")),o=3,s=1,u=0,h=2;n.DummyEnemy=function(e){function c(e,t,n,r,i,o,a){var s=7<arguments.length&&void 0!==arguments[7]?arguments[7]:l;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);var u=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":f(t))&&"function"!=typeof t?e:t}(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,e,t,n,r,i,o,a,s));return u.sprite={baseX:0,baseY:0,x:0,y:16*u.getSpriteLayerValue(u.dir.x,u.dir.y),width:16,height:16,deltaX:16,deltaY:16},u}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":f(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,i.Unit),r(c,[{key:"setNextSprite",value:function(){this.sprite.x<16?this.sprite.x+=this.sprite.deltaX:this.sprite.x=this.sprite.baseX}},{key:"update",value:function(e){var t=this.sprite,n=this.x,r=this.y,i=this.width,o=this.height;return e.drawImage(a,t.x,t.y,t.width,t.height,n,r,i,o),this}},{key:"getSpriteLayerValue",value:function(e,t){return Math.abs(e)>Math.abs(t)?0<e?u:s:0<t?h:o}}]),c}()},{"./unit":5}],3:[function(e,t,n){"use strict";var f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Hero=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.increaseHeroVelocityByBuff=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:2;l.speed*=e,l.acceleration*=e,l.maxAccelerationTime*=e},n.decreaseHeroVelocityByDebuff=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:2;l.speed/=e,l.acceleration/=e,l.maxAccelerationTime/=e};var i=e("./unit");var l={speed:1,acceleration:5e-4,maxAccelerationTime:3e3},o={top:2,left:3,right:0,bottom:1},a=document.querySelector(".hero-sprite"),s=document.querySelector(".speed");n.Hero=function(e){function c(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:30,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:50,r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:50,i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:50,o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:1,a=6<arguments.length&&void 0!==arguments[6]?arguments[6]:0,s=7<arguments.length&&void 0!==arguments[7]?arguments[7]:l.speed;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);var u=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":f(t))&&"function"!=typeof t?e:t}(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,e,t,n,r,i,o,a,s));return u.isImmortal=!1,u.accelerationStartTime=0,u.currentAccelerationTimer="",u.currentBuffs=[],u.sprite={baseX:9,baseY:2,x:9,y:2,width:16,height:26,deltaX:32,deltaY:32},u}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":f(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,i.Unit),r(c,[{key:"setNextSprite",value:function(){this.sprite.y<96?this.sprite.y+=this.sprite.deltaY:this.sprite.y=this.sprite.baseY}},{key:"update",value:function(e){s.innerHTML=~~(100*this.speed)/100;var t=this.sprite,n=this.x,r=this.y,i=this.width,o=this.height;return e.drawImage(a,t.x,t.y,t.width,t.height,n,r,i,o),this}},{key:"updateSpriteDirection",value:function(e){this.sprite.x=this.sprite.baseX+o[e]*this.sprite.deltaX}},{key:"makeHeroSpeedParamsDefault",value:function(){this.currentAccelerationTimer&&clearInterval(this.currentAccelerationTimer),this.speed=l.speed,this.accelerationStartTime=0}},{key:"setNewSpeedTimer",value:function(){var e=this,t=this.speed;this.accelerationStartTime=0,this.currentAccelerationTimer=setInterval(function(){e.accelerationStartTime+=50,e.speed=t+l.acceleration*e.accelerationStartTime,e.accelerationStartTime>=l.maxAccelerationTime&&clearInterval(e.currentAccelerationTimer)},50)}},{key:"drawBuffs",value:function(n){var r=this;return this.currentBuffs.forEach(function(e,t){n.fillStyle=e.type,n.fillRect(r.x,r.y-10-5*t,r.width*(20-e.time)/20,5)}),this}}]),c}()},{"./unit":5}],4:[function(e,t,n){"use strict";var f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.SmartEnemy=n.BASE_SMART_SIZE=void 0;var s=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./unit"),u=e("../utils/geometry");n.BASE_SMART_SIZE=16;var a=document.querySelector(".smart-enemy-sprite"),o=10,l=5,h="13px Arial";n.SmartEnemy=function(e){function c(e,t,n,r,i,o,a){var s=7<arguments.length&&void 0!==arguments[7]?arguments[7]:.6;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c);var u=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":f(t))&&"function"!=typeof t?e:t}(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,e,t,n,r,i,o,a,s));return u.sprite={baseX:0,baseY:0,x:0,y:0,width:16,height:16,deltaX:16,deltaY:16},u.defense=0,u}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":f(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(c,i.Unit),r(c,[{key:"setNextSprite",value:function(){this.sprite.x<48?this.sprite.x+=this.sprite.deltaX:this.sprite.x=this.sprite.baseX}},{key:"newPos",value:function(e){return this.updateDirection(e),function e(t,n,r){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(c.prototype.__proto__||Object.getPrototypeOf(c.prototype),"newPos",this).call(this),this}},{key:"update",value:function(e){var t=this.sprite,n=this.x,r=this.y,i=this.width,o=this.height;return e.drawImage(a,t.x,t.y,t.width,t.height,n,r,i,o),this}},{key:"showWarningMessage",value:function(e){this.ctx.font=h,this.ctx.strokeText(e,this.x+o,this.y-l)}},{key:"updateDirection",value:function(e){var t=this.getFearParams(e.isImmortal);if(!(0,u.isDistanceBetweenUnitsMoreThanSafe)(e,this,t.distance)){var n=(0,u.getCenterCoordinates)(e),r=s(n,2),i=r[0],o=r[1],a=Math.atan2(i-this.x-this.width/2,o-this.y-this.height/2)+Math.PI;this.dir.y=t.isFear*Math.cos(a),this.dir.x=t.isFear*Math.sin(a),this.showWarningMessage(t.message)}}},{key:"getFearParams",value:function(e){return e?{distance:300,isFear:1,message:"You don't catch me!"}:{distance:200,isFear:-1,message:"I see you"}}},{key:"eat",value:function(e){var t=this.width*this.height,n=e.width*e.height,r=Math.pow((t+n)/t,.5);this.width*=r,this.height*=r,this.defense=Math.max(this.defense,e.defense)+3,this.speed=.6<this.speed?this.speed+=.1:.6,this.x=(this.x*t+e.x*n)/(t+n),this.y=(this.y*t+e.y*n)/(t+n)}}]),c}()},{"../utils/geometry":16,"./unit":5}],5:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Unit=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("../utils/geometry");n.Unit=function(){function u(e,t,n,r,i,o,a,s){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),this.ctx=e,this.width=t,this.height=n,this.speed=s,this.x=r,this.y=i,this.dir={x:o,y:a}}return r(u,[{key:"newPos",value:function(){return this.x+=this.speed*this.dir.x,this.y+=this.speed*this.dir.y,(0,i.moveToAnotherSideIfGoBeyonceCanvas)(this.ctx,this),this}}]),u}()},{"../utils/geometry":16}],6:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Game=void 0;var u=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./creatures/hero"),f=e("./creatures/dummyEnemy"),s=e("./creatures/smartEnemy"),c=e("./utils/controls"),l=e("./utils/geometry"),h=e("./creatures/bullet"),o=e("./items/buffs/buff-generator"),a=e("./main"),d=e("./items/landscape"),y=e("./utils/effects");function m(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var p=document.querySelector(".score");n.Game=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.canvas=e,this.canvas.width=700,this.canvas.height=700,this.ctx=this.canvas.getContext("2d"),this.startTime=Date.now(),this.currentTime=Date.now(),this.hero=new i.Hero(this.ctx),this.landscape=new d.Landscape(this.ctx,40,40),this.dummyEnemies=[],this.smartEnemies=[],this.heroBullets=[],this.timers=[],this.lvl=1,this.buffItem="",this.handleHeroPosition()}return r(t,[{key:"start",value:function(){var n=this,e=setInterval(function(){return n.updateGameState()},10),t=setInterval(function(){return n.updateSprites()},200),r=setInterval(function(){return n.addEnemy(n.smartEnemies,s.SmartEnemy,s.BASE_SMART_SIZE)},2e3),i=setInterval(function(){return n.addEnemy(n.dummyEnemies,f.DummyEnemy,f.BASE_DUMMY_SIZE)},4e3),o=setInterval(function(){return n.addBuffItem()},8e3),a=setInterval(function(){return n.lvlUp()},1e4);this.timers.push(e,t,r,i,o,a),(0,c.addHeroControls)(this.hero,function(e,t){return n.addBullet(e,t)})}},{key:"updateGameState",value:function(){this.updateScore(),this.updateCanvasState()}},{key:"updateScore",value:function(){this.currentTime=this.currentTime+10;var e=(this.currentTime-this.startTime)/1e3;p.innerHTML=e}},{key:"updateSprites",value:function(){[this.hero].concat(m(this.dummyEnemies),m(this.smartEnemies)).forEach(function(e){return e.setNextSprite()})}},{key:"updateCanvasState",value:function(){this.clearCanvas(this.ctx),this.handleHeroPosition(),this.handleBuffItemPosition(),this.handleDummyEnemiesPosition(),this.handleSmartEnemiesPosition(),this.heroBullets=(0,l.getElementsInsideCanvas)(this.ctx,this.heroBullets),this.handleEnemiesDeath(),this.handleHeroDeath(),this.handleBuffs()}},{key:"clearCanvas",value:function(e){e.clearRect(0,0,e.canvas.clientWidth,e.canvas.clientHeight)}},{key:"drawLandscape",value:function(){this.landscape.draw(this.ctx)}},{key:"handleHeroPosition",value:function(){this.hero.newPos().update(this.ctx).drawBuffs(this.ctx)}},{key:"handleBuffItemPosition",value:function(){this.buffItem&&this.buffItem.draw(this.ctx)}},{key:"handleDummyEnemiesPosition",value:function(){var t=this;this.dummyEnemies.forEach(function(e){return e.newPos().update(t.ctx)})}},{key:"handleSmartEnemiesPosition",value:function(){var r=this;this.smartEnemies=this.smartEnemies.reduce(function(e,t){if(e.some(function(e){return(0,l.ifUnitsTouchEachOther)(e,t)}))return e;var n=r.smartEnemies.find(function(e){return(0,l.ifUnitsTouchEachOther)(e,t)&&e!==t});return n&&t.eat(n),e.push(t),e},[]),this.smartEnemies.forEach(function(e){return e.newPos(r.hero).update(r.ctx)})}},{key:"handleEnemiesDeath",value:function(){var n=this,e=[],r=[],i=[],o=[].concat(m(this.smartEnemies),m(this.dummyEnemies));this.smartEnemies.forEach(function(t){n.heroBullets.some(function(e){return n.shouldEnemyDieIfBulletHitsHim(t,e)})||e.push(t)}),this.dummyEnemies.forEach(function(t){n.heroBullets.some(function(e){return n.shouldEnemyDieIfBulletHitsHim(t,e)})||r.push(t)}),this.heroBullets.forEach(function(t){o.some(function(e){return n.shouldEnemyDieIfBulletHitsHim(e,t)})||i.push(t)}),this.smartEnemies=e,this.dummyEnemies=r,this.heroBullets=i}},{key:"handleHeroDeath",value:function(){var t=this;if(!this.hero.isImmortal){[].concat(m(this.dummyEnemies),m(this.smartEnemies)).some(function(e){return(0,l.ifUnitsTouchEachOther)(t.hero,e,10)})&&this.finishGame()}}},{key:"finishGame",value:function(){this.timers.map(function(e){return clearInterval(e)}),this.hero.currentBuffsbuff(function(e){return clearInterval(e.timer)});var e=p.innerText,t=prompt("You lose, your score is "+e,"User");(0,a.sendResultToDatabase)(e,t||"User"),setTimeout(function(){return(0,a.initializeGame)()},10)}},{key:"handleBuffs",value:function(){if((0,l.ifUnitsTouchEachOther)(this.hero,this.buffItem)){this.buffItem.activateBuff(this,2e4),this.buffItem=""}}},{key:"lvlUp",value:function(){this.addEnemyStack(this.smartEnemies,s.SmartEnemy,s.BASE_SMART_SIZE),this.addEnemyStack(this.dummyEnemies,f.DummyEnemy,f.BASE_DUMMY_SIZE),this.lvl++,console.log(this.lvl)}},{key:"shouldEnemyDieIfBulletHitsHim",value:function(e,t){var n=(0,l.ifUnitsTouchEachOther)(e,t);return n&&(e=(0,y.damageUnit)(e)),!(!n||!(e.width<25||e.height<25))}},{key:"addEnemy",value:function(e,t,n){var r=this.generateRandomPositionAndDirection(this.hero,n),i=r.size,o=r.x,a=r.y,s=r.alfaX,u=r.alfaY,c=new t(this.ctx,i,i,o,a,s,u,f.SPEED+.15*this.lvl);e.push(c)}},{key:"addEnemyStack",value:function(e,t,n){var r=this.generateRandomPositionAndDirection(this.hero,n),i=r.size,o=r.x,a=r.y,s=r.alfaX,u=r.alfaY,c=new t(this.ctx,i,i,o,a,s,u);e.push(c);for(var f=0;f<this.lvl;f++){var l=this.generateRandomPositionAndDirection(c,n,!0,100),h=l.size,d=l.x,y=l.y,m=new t(this.ctx,h,h,d,y,s,u);e.push(m)}}},{key:"addBullet",value:function(e,t){var n=(0,l.getCenterCoordinates)(this.hero),r=u(n,2),i=r[0],o=r[1],a=Math.atan2(i-e,o-t)+Math.PI,s=new h.Bullet(this.ctx,i,o,Math.sin(a),Math.cos(a));this.heroBullets.push(s)}},{key:"addBuffItem",value:function(){var e=this.generateRandomPositionAndDirection(this.hero,0),t=e.x,n=e.y,r=new o.RandomBuff(this.ctx,20,20,t,n);this.buffItem=r}},{key:"generateRandomPositionAndDirection",value:function(e,t){var n=2<arguments.length&&void 0!==arguments[2]&&arguments[2],r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:200,i=void 0,o=void 0,a=20*Math.random()+t+5*this.lvl,s=void 0;do{var u={x:i=Math.random()*this.ctx.canvas.clientWidth,y:o=Math.random()*this.ctx.canvas.clientHeight,width:a,height:a};s=(0,l.isDistanceBetweenUnitsMoreThanSafe)(e,u,r)}while(n?s:!s);return{x:i,y:o,alfaX:2*Math.random()-1,alfaY:2*Math.random()-1,size:a}}}]),t}()},{"./creatures/bullet":1,"./creatures/dummyEnemy":2,"./creatures/hero":3,"./creatures/smartEnemy":4,"./items/buffs/buff-generator":7,"./items/landscape":12,"./main":13,"./utils/controls":14,"./utils/effects":15,"./utils/geometry":16}],7:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.buffTypes=void 0,n.RandomBuff=function(e,t,n,r,i){var o=a[~~(3*Math.random())];return new o.constructor(e,t,n,r,i,o.selector)};var r=e("./sword"),i=e("./shield"),o=e("./shoes"),a=n.buffTypes=[{selector:".sword",constructor:r.Sword,color:"red"},{selector:".shield",constructor:i.Shield,color:"black"},{selector:".shoes",constructor:o.Shoes,color:"blue"}]},{"./shield":9,"./shoes":10,"./sword":11}],8:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.Item=function(){function a(e,t,n,r,i,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),this.ctx=e,this.width=t,this.height=n,this.x=r,this.y=i,this.sprite={x:0,y:0,width:16,height:16},this.image=document.querySelector(o)}return r(a,[{key:"draw",value:function(e){var t=this.image,n=this.sprite,r=this.x,i=this.y,o=this.width,a=this.height;return e.drawImage(t,n.x,n.y,n.width,n.height,r,i,o,a),this}}]),a}()},{}],9:[function(e,t,n){"use strict";var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Shield=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./item"),o=e("../../utils/effects"),u=e("./buff-generator");n.Shield=function(e){function a(e,t,n,r,i,o){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":s(t))&&"function"!=typeof t?e:t}(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,e,t,n,r,i,o))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,i.Item),r(a,[{key:"activateBuff",value:function(e,t){(0,o.addBuffIndicator)(e.hero,u.buffTypes[1].color),e.hero.isImmortal=!0,setTimeout(function(){return e.hero.isImmortal=!1},t)}}]),a}()},{"../../utils/effects":15,"./buff-generator":7,"./item":8}],10:[function(e,t,n){"use strict";var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Shoes=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./item"),o=e("../../creatures/hero"),u=e("../../utils/effects"),c=e("./buff-generator");function f(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}n.Shoes=function(e){function a(e,t,n,r,i,o){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":s(t))&&"function"!=typeof t?e:t}(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,e,t,n,r,i,o))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,i.Item),r(a,[{key:"activateBuff",value:function(e,t){(0,u.addBuffIndicator)(e.hero,c.buffTypes[2].color),(0,o.increaseHeroVelocityByBuff)();var n=[].concat(f(e.smartEnemies),f(e.dummyEnemies));n.forEach(function(e){return e.speed/=5}),setTimeout(function(){(0,o.decreaseHeroVelocityByDebuff)(),n.forEach(function(e){return e.speed*=5})},t)}}]),a}()},{"../../creatures/hero":3,"../../utils/effects":15,"./buff-generator":7,"./item":8}],11:[function(e,t,n){"use strict";var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};Object.defineProperty(n,"__esModule",{value:!0}),n.Sword=void 0;var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}(),i=e("./item"),o=e("../../creatures/bullet"),u=e("../../utils/effects"),c=e("./buff-generator");n.Sword=function(e){function a(e,t,n,r,i,o){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":s(t))&&"function"!=typeof t?e:t}(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,e,t,n,r,i,o))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":s(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,i.Item),r(a,[{key:"activateBuff",value:function(e,t){(0,u.addBuffIndicator)(e.hero,c.buffTypes[0].color),(0,o.growBullet)(),setTimeout(function(){return(0,o.shrinkBullet)()},t)}}]),a}()},{"../../creatures/bullet":1,"../../utils/effects":15,"./buff-generator":7,"./item":8}],12:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();n.Landscape=function(){function r(e,t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.ctx=e,this.width=t,this.height=n,this.canvasWidth=e.canvas.clientWidth,this.canvasHeight=e.canvas.clientWidth,this.sprite={x:0,y:0,width:32,height:32},this.image=document.querySelector(".landscape")}return i(r,[{key:"draw",value:function(e){for(var t=this.image,n=this.sprite,r=this.canvasWidth,i=this.canvasHeight,o=this.width,a=this.height,s=0;s<r;s+=o)for(var u=0;u<i;u+=a)e.drawImage(t,n.x,n.y,n.width,n.height,s,u,o,a);return this}}]),r}()},{}],13:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.initializeGame=f,n.sendResultToDatabase=function(e,t){fetch(u,{method:"POST",body:JSON.stringify({score:e,name:t})})},n.getScoreFromDatabase=h;var r=e("./game-arena"),i=void 0,o=document.querySelector(".score"),a=document.querySelector(".speed"),s=document.querySelector("canvas"),u="https://shooter-game-2a1be.firebaseio.com/statistics/.json",c=[];function f(){h(),i=new r.Game(s),o.innerHTML=0,a.innerHTML=0,document.addEventListener("keydown",l,{once:!0})}function l(){i.start()}function h(){fetch(u,{method:"GET"}).then(function(e){return e.json()}).then(function(e){c=e,console.log(c)}).catch(function(e){return console.log("misterious error")})}f()},{"./game-arena":6}],14:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.addHeroControls=function(e,t){i=e,o=i.dir,a=void 0,document.addEventListener("keydown",function(e){var t,n,r;switch(t=a,n=e.keyCode,r=i,a=t!==n?(r.makeHeroSpeedParamsDefault(),r.setNewSpeedTimer(),n):t,e.keyCode){case 38:i.updateSpriteDirection("top"),o.y=-1,o.x=0;break;case 39:i.updateSpriteDirection("right"),o.y=0,o.x=1;break;case 40:i.updateSpriteDirection("bottom"),o.y=1,o.x=0;break;case 37:i.updateSpriteDirection("left"),o.x=-1,o.y=0;break;case 17:o.x=0,o.y=0}}),n=t,r.addEventListener("click",function(e){n(e.offsetX,e.offsetY)});var n;var i,o,a};var r=document.querySelector("canvas")},{}],15:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.damageUnit=function(e){var t=u.BULLET.speedDecrease,n=e.width*e.height,r=(o=e,a=u.BULLET.damage,s=o.defense||0,0<a-s?a-s:4),i=(n-r)/n;var o,a,s;return e.width*=i,e.height*=i,e.speed>t&&(e.speed-=t),e},n.addBuffIndicator=function(e,t){var n=Date.now(),r={id:n,time:0,type:t};e.currentBuffs.push(r),i=e,o=n,a=i.currentBuffs.find(function(e){return o===e.id}),a.timer=setInterval(function(){a.time+=1,20<=a.time&&(clearInterval(a.timer),i.currentBuffs.shift())},1e3);var i,o,a},n.generateBuffType=function(){return r[~~(5*Math.random())]};var u=e("../creatures/bullet");var r=["red","black","red","green","orange"]},{"../creatures/bullet":1}],16:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var l=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};function h(e){return[e.x+.5*e.width,e.y+.5*e.height]}function r(e,t){var n=h(e),r=l(n,2),i=r[0],o=r[1],a=h(t),s=l(a,2),u=s[0],c=s[1];return Math.pow(Math.pow(i-u,2)+Math.pow(o-c,2),.5)}n.getCenterCoordinates=h,n.getDistanceBetweenUnits=r,n.ifUnitsTouchEachOther=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,r=h(e),i=l(r,2),o=i[0],a=i[1],s=h(t),u=l(s,2),c=u[0],f=u[1];return Math.abs(c-o)<(e.width+t.width-d-n)/2&&Math.abs(f-a)<(e.height+t.height-d-n)/2},n.isDistanceBetweenUnitsMoreThanSafe=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:i;return r(e,t)>n},n.mergeUnits=function(e,t){var n=e.width*e.height,r=t.width*t.height,i=Math.pow((n+r)/n,.5);return e.width*=i,e.height*=i,e},n.moveToAnotherSideIfGoBeyonceCanvas=function(e,t){var n=e.canvas.clientWidth,r=e.canvas.clientHeight;t.x>n?t.x=0:t.x<0&&(t.x=n);t.y>r?t.y=0:t.y<0&&(t.y=r)},n.getElementsInsideCanvas=function(t,e){var n=t.canvas.clientWidth,r=t.canvas.clientHeight,i=void 0;return e.filter(function(e){return(i=e.x<n&&0<e.x&&e.y<r&&0<e.y)&&e.newPos().update(t),i})};var d=2;var i=200},{}]},{},[13]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJmcm9udGVuZC9qcy9jcmVhdHVyZXMvYnVsbGV0LmpzIiwiZnJvbnRlbmQvanMvY3JlYXR1cmVzL2R1bW15RW5lbXkuanMiLCJmcm9udGVuZC9qcy9jcmVhdHVyZXMvaGVyby5qcyIsImZyb250ZW5kL2pzL2NyZWF0dXJlcy9zbWFydEVuZW15LmpzIiwiZnJvbnRlbmQvanMvY3JlYXR1cmVzL3VuaXQuanMiLCJmcm9udGVuZC9qcy9nYW1lLWFyZW5hLmpzIiwiZnJvbnRlbmQvanMvaXRlbXMvYnVmZnMvYnVmZi1nZW5lcmF0b3IuanMiLCJmcm9udGVuZC9qcy9pdGVtcy9idWZmcy9pdGVtLmpzIiwiZnJvbnRlbmQvanMvaXRlbXMvYnVmZnMvc2hpZWxkLmpzIiwiZnJvbnRlbmQvanMvaXRlbXMvYnVmZnMvc2hvZXMuanMiLCJmcm9udGVuZC9qcy9pdGVtcy9idWZmcy9zd29yZC5qcyIsImZyb250ZW5kL2pzL2l0ZW1zL2xhbmRzY2FwZS5qcyIsImZyb250ZW5kL2pzL21haW4uanMiLCJmcm9udGVuZC9qcy91dGlscy9jb250cm9scy5qcyIsImZyb250ZW5kL2pzL3V0aWxzL2VmZmVjdHMuanMiLCJmcm9udGVuZC9qcy91dGlscy9nZW9tZXRyeS5qcyJdLCJuYW1lcyI6WyJyIiwiZSIsIm4iLCJ0IiwibyIsImkiLCJmIiwiYyIsInJlcXVpcmUiLCJ1IiwiYSIsIkVycm9yIiwiY29kZSIsInAiLCJleHBvcnRzIiwiY2FsbCIsImxlbmd0aCIsIjEiLCJtb2R1bGUiLCJncm93QnVsbGV0IiwicGFyYW0iLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJCVUxMRVQiLCJzaXplIiwiZGFtYWdlIiwic3BlZWREZWNyZWFzZSIsInNocmlua0J1bGxldCIsIl91bml0IiwiQnVsbGV0IiwiY3R4IiwieCIsInkiLCJhbGZhWCIsImFsZmFZIiwid2lkdGgiLCJoZWlnaHQiLCJzcGVlZCIsImNvbG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsIl90aGlzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfX3Byb3RvX18iLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsIlVuaXQiLCJkaXIiLCJiZWdpblBhdGgiLCJmaWxsU3R5bGUiLCJhcmMiLCJNYXRoIiwiUEkiLCJmaWxsIiwiU1BFRUQiLCJpbWciLCJCQVNFX0RVTU1ZX1NJWkUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJTUFJJVEVfTEFZRVIiLCJEdW1teUVuZW15Iiwic3ByaXRlIiwiYmFzZVgiLCJiYXNlWSIsImdldFNwcml0ZUxheWVyVmFsdWUiLCJkZWx0YVgiLCJkZWx0YVkiLCJkcmF3SW1hZ2UiLCJhYnMiLCJpbmNyZWFzZUhlcm9WZWxvY2l0eUJ5QnVmZiIsImJ1ZmYiLCJ2ZWxvY2l0eSIsImFjY2VsZXJhdGlvbiIsIm1heEFjY2VsZXJhdGlvblRpbWUiLCJkZWNyZWFzZUhlcm9WZWxvY2l0eUJ5RGVidWZmIiwiZGVCdWZmIiwidG9wIiwibGVmdCIsInJpZ2h0IiwiYm90dG9tIiwic3BlZWRMYWJlbCIsIkhlcm8iLCJpc0ltbW9ydGFsIiwiYWNjZWxlcmF0aW9uU3RhcnRUaW1lIiwiY3VycmVudEFjY2VsZXJhdGlvblRpbWVyIiwiY3VycmVudEJ1ZmZzIiwiaW5uZXJIVE1MIiwiZGlyZWN0aW9uIiwiY2xlYXJJbnRlcnZhbCIsIl90aGlzMiIsInN0YXJ0U3BlZWQiLCJzZXRJbnRlcnZhbCIsIl90aGlzMyIsImZvckVhY2giLCJpbmRleCIsInR5cGUiLCJmaWxsUmVjdCIsInRpbWUiLCJfZ2VvbWV0cnkiLCJCQVNFX1NNQVJUX1NJWkUiLCJNRVNTQUdFIiwiU21hcnRFbmVteSIsImRlZmVuc2UiLCJoZXJvIiwidXBkYXRlRGlyZWN0aW9uIiwiX2dldCIsInByb3RvdHlwZSIsInRleHQiLCJmb250Iiwic3Ryb2tlVGV4dCIsImZlYXJQYXJhbXMiLCJnZXRGZWFyUGFyYW1zIiwiaXNEaXN0YW5jZUJldHdlZW5Vbml0c01vcmVUaGFuU2FmZSIsImRpc3RhbmNlIiwiX2dldENlbnRlckNvb3JkaW5hdGVzIiwiZ2V0Q2VudGVyQ29vcmRpbmF0ZXMiLCJfZ2V0Q2VudGVyQ29vcmRpbmF0ZXMyIiwiX3NsaWNlZFRvQXJyYXkiLCJoZXJvWCIsImhlcm9ZIiwiYW5nbGUiLCJhdGFuMiIsImlzRmVhciIsImNvcyIsInNpbiIsInNob3dXYXJuaW5nTWVzc2FnZSIsIm1lc3NhZ2UiLCJ1bml0IiwiczEiLCJzMiIsImsiLCJwb3ciLCJtYXgiLCJtb3ZlVG9Bbm90aGVyU2lkZUlmR29CZXlvbmNlQ2FudmFzIiwiX2hlcm8iLCJfZHVtbXlFbmVteSIsIl9zbWFydEVuZW15IiwiX2NvbnRyb2xzIiwiX2J1bGxldCIsIl9idWZmR2VuZXJhdG9yIiwiX21haW4iLCJfbGFuZHNjYXBlIiwiX2VmZmVjdHMiLCJzY29yZUxhYmVsIiwiR2FtZSIsImNhbnZhcyIsImdldENvbnRleHQiLCJzdGFydFRpbWUiLCJEYXRlIiwibm93IiwiY3VycmVudFRpbWUiLCJsYW5kc2NhcGUiLCJMYW5kc2NhcGUiLCJkdW1teUVuZW1pZXMiLCJzbWFydEVuZW1pZXMiLCJoZXJvQnVsbGV0cyIsInRpbWVycyIsImx2bCIsImJ1ZmZJdGVtIiwiaGFuZGxlSGVyb1Bvc2l0aW9uIiwidGltZXIxIiwidXBkYXRlR2FtZVN0YXRlIiwidGltZXIyIiwidXBkYXRlU3ByaXRlcyIsInRpbWVyMyIsImFkZEVuZW15IiwidGltZXI0IiwidGltZXI1IiwiYWRkQnVmZkl0ZW0iLCJ0aW1lcjYiLCJsdmxVcCIsInB1c2giLCJhZGRIZXJvQ29udHJvbHMiLCJhZGRCdWxsZXQiLCJ1cGRhdGVTY29yZSIsInVwZGF0ZUNhbnZhc1N0YXRlIiwidmFsdWUiLCJjb25jYXQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJzZXROZXh0U3ByaXRlIiwiY2xlYXJDYW52YXMiLCJoYW5kbGVCdWZmSXRlbVBvc2l0aW9uIiwiaGFuZGxlRHVtbXlFbmVtaWVzUG9zaXRpb24iLCJoYW5kbGVTbWFydEVuZW1pZXNQb3NpdGlvbiIsImdldEVsZW1lbnRzSW5zaWRlQ2FudmFzIiwiaGFuZGxlRW5lbWllc0RlYXRoIiwiaGFuZGxlSGVyb0RlYXRoIiwiaGFuZGxlQnVmZnMiLCJjbGVhclJlY3QiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImRyYXciLCJuZXdQb3MiLCJ1cGRhdGUiLCJkcmF3QnVmZnMiLCJlbmVteSIsInJlZHVjZSIsIm5ld0FycmF5IiwiY3VycmVudEVuZW15Iiwic29tZSIsImlmVW5pdHNUb3VjaEVhY2hPdGhlciIsInNlY29uZEVuZW15IiwiZmluZCIsImVhdCIsIl90aGlzNCIsIm5ld1NtYXJ0RW5lbWllcyIsIm5ld0R1bW15RW5lbWllcyIsIm5ld0J1bGxldHMiLCJhbGxFbmVtaWVzIiwiYnVsbGV0Iiwic2hvdWxkRW5lbXlEaWVJZkJ1bGxldEhpdHNIaW0iLCJfdGhpczUiLCJmaW5pc2hHYW1lIiwibWFwIiwidGltZXIiLCJjdXJyZW50QnVmZnNidWZmIiwic2NvcmUiLCJpbm5lclRleHQiLCJuYW1lIiwicHJvbXB0Iiwic2VuZFJlc3VsdFRvRGF0YWJhc2UiLCJzZXRUaW1lb3V0IiwiaW5pdGlhbGl6ZUdhbWUiLCJhY3RpdmF0ZUJ1ZmYiLCJhZGRFbmVteVN0YWNrIiwiY29uc29sZSIsImxvZyIsImlzQ29udGFjdCIsImRhbWFnZVVuaXQiLCJlbmVteUFycmF5IiwiY3JlYXR1cmVDb25zdHJ1Y3RvciIsImJhc2VTaXplIiwiX2dlbmVyYXRlUmFuZG9tUG9zaXRpIiwiZ2VuZXJhdGVSYW5kb21Qb3NpdGlvbkFuZERpcmVjdGlvbiIsIl9nZW5lcmF0ZVJhbmRvbVBvc2l0aTIiLCJfZ2VuZXJhdGVSYW5kb21Qb3NpdGkzIiwiX3NpemUiLCJfeCIsIl95IiwibmV3RW5lbXkiLCJfZ2VuZXJhdGVSYW5kb21Qb3NpdGk0IiwiUmFuZG9tQnVmZiIsImlzSW5zaWRlQ2lyY2xlIiwicmFuZG9tIiwiY29uZGl0aW9uIiwibmV3VW5pdCIsImJ1ZmZUeXBlIiwiYnVmZlR5cGVzIiwiY29uc3RydWN0b3IiLCJzZWxlY3RvciIsIl9zd29yZCIsIl9zaGllbGQiLCJfc2hvZXMiLCJTd29yZCIsIlNoaWVsZCIsIlNob2VzIiwiSXRlbSIsImltYWdlIiwiX2l0ZW0iLCJnYW1lT2JqZWN0IiwiYWRkQnVmZkluZGljYXRvciIsImVuZW1pZXMiLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsImZldGNoIiwiVVJMIiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJnZXRTY29yZUZyb21EYXRhYmFzZSIsIl9nYW1lQXJlbmEiLCJnYW1lIiwiYmVzdFNjb3JlcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdGFydEdhbWUiLCJvbmNlIiwic3RhcnQiLCJ0aGVuIiwicmVzcG9uc2UiLCJqc29uIiwiZGF0YSIsImNhdGNoIiwiZXJyb3IiLCJjcmVhdGVCdWxsZXQiLCJwcmV2aW91c0tleUNvZGUiLCJldmVudCIsIm5ld0tleUNvZGUiLCJrZXlDb2RlIiwibWFrZUhlcm9TcGVlZFBhcmFtc0RlZmF1bHQiLCJzZXROZXdTcGVlZFRpbWVyIiwidXBkYXRlU3ByaXRlRGlyZWN0aW9uIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJtYXNzIiwiaGVyb0RhbWFnZSIsImlkIiwibmV3QnVmZiIsInNoaWZ0IiwiZ2VuZXJhdGVCdWZmVHlwZSIsImdldERpc3RhbmNlQmV0d2VlblVuaXRzIiwidW5pdDEiLCJ1bml0MiIsIngxIiwieTEiLCJfZ2V0Q2VudGVyQ29vcmRpbmF0ZXMzIiwiX2dldENlbnRlckNvb3JkaW5hdGVzNCIsIngyIiwieTIiLCJkZWx0YSIsIl9nZXRDZW50ZXJDb29yZGluYXRlczUiLCJfZ2V0Q2VudGVyQ29vcmRpbmF0ZXM2IiwiX2dldENlbnRlckNvb3JkaW5hdGVzNyIsIl9nZXRDZW50ZXJDb29yZGluYXRlczgiLCJQSVhFTF9CT1JERVIiLCJkaXN0IiwiU0FGRV9ESVNUQU5DRSIsIm1lcmdlVW5pdHMiLCJtYXNzMSIsIm1hc3MyIiwidW5pdHMiLCJpc0luc2lkZUNhbnZhcyIsImZpbHRl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QSxFQUFrQjRGLEVBQUFoRyxHQUFjZ0csRUFBQS9GLEVBQWhDSSxHQUFqQixFQUFvRTJGLEVBQUEvRixJQUVsRStGLEVBQUFpRSxTQUFBQyxPQUFBbkssR0FFRm1TLEtBbkRKLElBQU1QLEVBQU4sRUFVQSxJQUFNRSxFQUFOIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJpbXBvcnQgeyBVbml0IH0gZnJvbSBcIi4vdW5pdFwiO1xyXG5cclxuY29uc3QgU1BFRUQgPSAxMDtcclxuY29uc3QgQ09MT1IgPSBcImJsYWNrXCI7XHJcbmV4cG9ydCBjb25zdCBCVUxMRVQgPSB7XHJcbiAgc2l6ZTogNSxcclxuICBkYW1hZ2U6IDIwLFxyXG4gIHNwZWVkRGVjcmVhc2U6IDAuMTBcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJ1bGxldCBleHRlbmRzIFVuaXQge1xyXG4gIGNvbnN0cnVjdG9yKGN0eCwgeCwgeSwgYWxmYVgsIGFsZmFZLCB3aWR0aCA9IEJVTExFVC5zaXplLCBoZWlnaHQgPSBCVUxMRVQuc2l6ZSwgc3BlZWQgPSBTUEVFRCwgY29sb3IgPSBDT0xPUikge1xyXG4gICAgc3VwZXIoY3R4LCB3aWR0aCwgaGVpZ2h0LCB4IC0gQlVMTEVULnNpemUgLyAyLCB5IC0gQlVMTEVULnNpemUgLyAyLCBhbGZhWCwgYWxmYVksIHNwZWVkKTtcclxuICAgIHRoaXMuY29sb3IgPSBjb2xvclxyXG4gIH1cclxuXHJcbiAgbmV3UG9zKCkge1xyXG4gICAgdGhpcy54ICs9IHRoaXMuc3BlZWQgKiB0aGlzLmRpci54O1xyXG4gICAgdGhpcy55ICs9IHRoaXMuc3BlZWQgKiB0aGlzLmRpci55O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUoY3R4KSB7XHJcbiAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcclxuICAgIGN0eC5hcmModGhpcy54LCB0aGlzLnksIEJVTExFVC5zaXplLCAwLCAyICogTWF0aC5QSSwgdHJ1ZSk7XHJcbiAgICBjdHguZmlsbCgpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ3Jvd0J1bGxldChwYXJhbSA9IDIpIHtcclxuICBCVUxMRVQuc2l6ZSAqPSBwYXJhbTtcclxuICBCVUxMRVQuZGFtYWdlICo9IHBhcmFtO1xyXG4gIEJVTExFVC5zcGVlZERlY3JlYXNlICo9IHBhcmFtO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2hyaW5rQnVsbGV0KHBhcmFtID0gMikge1xyXG4gIEJVTExFVC5zaXplIC89IHBhcmFtO1xyXG4gIEJVTExFVC5kYW1hZ2UgLz0gcGFyYW07XHJcbiAgQlVMTEVULnNwZWVkRGVjcmVhc2UgLz0gcGFyYW07XHJcbn1cclxuIiwiaW1wb3J0IHsgVW5pdCB9IGZyb20gXCIuL3VuaXRcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBTUEVFRCA9IDAuODtcclxuXHJcbmV4cG9ydCBjb25zdCBCQVNFX0RVTU1ZX1NJWkUgPSAyNTtcclxuY29uc3QgaW1nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmR1bW15LWVuZW15LXNwcml0ZScpO1xyXG5jb25zdCBTUFJJVEVfTEFZRVIgPSB7XHJcbiAgdG9wOiAzLFxyXG4gIGxlZnQ6IDEsXHJcbiAgcmlnaHQ6IDAsXHJcbiAgYm90dG9tOiAyXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBEdW1teUVuZW15IGV4dGVuZHMgVW5pdCB7XHJcbiAgY29uc3RydWN0b3IoY3R4LCB3aWR0aCwgaGVpZ2h0LCB4LCB5LCBhbGZhWCwgYWxmYVksIHNwZWVkID0gU1BFRUQpIHtcclxuICAgIHN1cGVyKGN0eCwgd2lkdGgsIGhlaWdodCwgeCwgeSwgYWxmYVgsIGFsZmFZLCBzcGVlZCk7XHJcbiAgICB0aGlzLnNwcml0ZSA9IHtcclxuICAgICAgYmFzZVg6IDAsXHJcbiAgICAgIGJhc2VZOiAwLFxyXG4gICAgICB4OiAwLFxyXG4gICAgICB5OiB0aGlzLmdldFNwcml0ZUxheWVyVmFsdWUodGhpcy5kaXIueCwgdGhpcy5kaXIueSkgKiAxNixcclxuICAgICAgd2lkdGg6IDE2LFxyXG4gICAgICBoZWlnaHQ6IDE2LFxyXG4gICAgICBkZWx0YVg6IDE2LFxyXG4gICAgICBkZWx0YVk6IDE2XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXROZXh0U3ByaXRlKCkge1xyXG4gICAgaWYgKHRoaXMuc3ByaXRlLnggPCAxNikge1xyXG4gICAgICB0aGlzLnNwcml0ZS54ICs9IHRoaXMuc3ByaXRlLmRlbHRhWDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc3ByaXRlLnggPSB0aGlzLnNwcml0ZS5iYXNlWDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZShjdHgpIHtcclxuICAgIGNvbnN0IHsgc3ByaXRlLCB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0gPSB0aGlzXHJcbiAgICBjdHguZHJhd0ltYWdlKGltZywgc3ByaXRlLngsIHNwcml0ZS55LCBzcHJpdGUud2lkdGgsIHNwcml0ZS5oZWlnaHQsIHgsIHksIHdpZHRoLCBoZWlnaHQpXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIGdldFNwcml0ZUxheWVyVmFsdWUoeCwgeSkge1xyXG4gICAgaWYgKE1hdGguYWJzKHgpID4gTWF0aC5hYnMoeSkpIHtcclxuICAgICAgcmV0dXJuIHggPiAwID8gU1BSSVRFX0xBWUVSLnJpZ2h0IDogU1BSSVRFX0xBWUVSLmxlZnQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4geSA+IDAgPyBTUFJJVEVfTEFZRVIuYm90dG9tIDogU1BSSVRFX0xBWUVSLnRvcDtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxyXG4iLCJpbXBvcnQgeyBVbml0IH0gZnJvbSBcIi4vdW5pdFwiO1xyXG5cclxuY29uc3QgdmVsb2NpdHkgPSB7XHJcbiAgc3BlZWQ6IDEsXHJcbiAgYWNjZWxlcmF0aW9uOiAwLjAwMDUsXHJcbiAgbWF4QWNjZWxlcmF0aW9uVGltZTogMzAwMFxyXG59XHJcbmNvbnN0IEhFSUdIVCA9IDUwO1xyXG5jb25zdCBXSURUSCA9IDMwO1xyXG5jb25zdCBTUFJJVEVfTEFZRVIgPSB7XHJcbiAgdG9wOiAyLFxyXG4gIGxlZnQ6IDMsXHJcbiAgcmlnaHQ6IDAsXHJcbiAgYm90dG9tOiAxXHJcbn1cclxuXHJcbmNvbnN0IGltZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZXJvLXNwcml0ZScpO1xyXG5jb25zdCBzcGVlZExhYmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNwZWVkJyk7XHJcblxyXG5leHBvcnQgY2xhc3MgSGVybyBleHRlbmRzIFVuaXQge1xyXG4gIGNvbnN0cnVjdG9yKGN0eCwgd2lkdGggPSBXSURUSCwgaGVpZ2h0ID0gSEVJR0hULCB4ID0gNTAsIHkgPSA1MCwgYWxmYVggPSAxLCBhbGZhWSA9IDAsIHNwZWVkID0gdmVsb2NpdHkuc3BlZWQpIHtcclxuICAgIHN1cGVyKGN0eCwgd2lkdGgsIGhlaWdodCwgeCwgeSwgYWxmYVgsIGFsZmFZLCBzcGVlZCk7XHJcbiAgICB0aGlzLmlzSW1tb3J0YWwgPSBmYWxzZTtcclxuICAgIHRoaXMuYWNjZWxlcmF0aW9uU3RhcnRUaW1lID0gMDtcclxuICAgIHRoaXMuY3VycmVudEFjY2VsZXJhdGlvblRpbWVyID0gJyc7XHJcbiAgICB0aGlzLmN1cnJlbnRCdWZmcyA9IFtdXHJcblxyXG4gICAgdGhpcy5zcHJpdGUgPSB7XHJcbiAgICAgIGJhc2VYOiA5LFxyXG4gICAgICBiYXNlWTogMixcclxuICAgICAgeDogOSxcclxuICAgICAgeTogMixcclxuICAgICAgd2lkdGg6IDE2LFxyXG4gICAgICBoZWlnaHQ6IDI2LFxyXG4gICAgICBkZWx0YVg6IDMyLFxyXG4gICAgICBkZWx0YVk6IDMyXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXROZXh0U3ByaXRlKCkge1xyXG4gICAgaWYgKHRoaXMuc3ByaXRlLnkgPCA5Nikge1xyXG4gICAgICB0aGlzLnNwcml0ZS55ICs9IHRoaXMuc3ByaXRlLmRlbHRhWVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zcHJpdGUueSA9IHRoaXMuc3ByaXRlLmJhc2VZO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGN0eCkge1xyXG4gICAgc3BlZWRMYWJlbC5pbm5lckhUTUwgPSB+fih0aGlzLnNwZWVkICogMTAwKSAvIDEwMDtcclxuICAgIGNvbnN0IHsgc3ByaXRlLCB4LCB5LCB3aWR0aCwgaGVpZ2h0IH0gPSB0aGlzXHJcbiAgICBjdHguZHJhd0ltYWdlKGltZywgc3ByaXRlLngsIHNwcml0ZS55LCBzcHJpdGUud2lkdGgsIHNwcml0ZS5oZWlnaHQsIHgsIHksIHdpZHRoLCBoZWlnaHQpXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHVwZGF0ZVNwcml0ZURpcmVjdGlvbihkaXJlY3Rpb24pIHtcclxuICAgIHRoaXMuc3ByaXRlLnggPSB0aGlzLnNwcml0ZS5iYXNlWCArIFNQUklURV9MQVlFUltkaXJlY3Rpb25dICogdGhpcy5zcHJpdGUuZGVsdGFYXHJcbiAgfVxyXG5cclxuICBtYWtlSGVyb1NwZWVkUGFyYW1zRGVmYXVsdCgpIHtcclxuICAgIGlmICh0aGlzLmN1cnJlbnRBY2NlbGVyYXRpb25UaW1lcikge1xyXG4gICAgICBjbGVhckludGVydmFsKHRoaXMuY3VycmVudEFjY2VsZXJhdGlvblRpbWVyKVxyXG4gICAgfVxyXG4gICAgdGhpcy5zcGVlZCA9IHZlbG9jaXR5LnNwZWVkO1xyXG4gICAgdGhpcy5hY2NlbGVyYXRpb25TdGFydFRpbWUgPSAwO1xyXG4gIH1cclxuXHJcbiAgc2V0TmV3U3BlZWRUaW1lcigpIHtcclxuICAgIGNvbnN0IHN0YXJ0U3BlZWQgPSB0aGlzLnNwZWVkO1xyXG4gICAgdGhpcy5hY2NlbGVyYXRpb25TdGFydFRpbWUgPSAwO1xyXG4gICAgdGhpcy5jdXJyZW50QWNjZWxlcmF0aW9uVGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgIHRoaXMuYWNjZWxlcmF0aW9uU3RhcnRUaW1lICs9IDUwO1xyXG4gICAgICB0aGlzLnNwZWVkID0gc3RhcnRTcGVlZCArIHZlbG9jaXR5LmFjY2VsZXJhdGlvbiAqIHRoaXMuYWNjZWxlcmF0aW9uU3RhcnRUaW1lO1xyXG4gICAgICBpZiAodGhpcy5hY2NlbGVyYXRpb25TdGFydFRpbWUgPj0gdmVsb2NpdHkubWF4QWNjZWxlcmF0aW9uVGltZSkge1xyXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5jdXJyZW50QWNjZWxlcmF0aW9uVGltZXIpXHJcbiAgICAgIH1cclxuICAgIH0sIDUwKTtcclxuICB9XHJcblxyXG4gIGRyYXdCdWZmcyhjdHgpIHtcclxuICAgIHRoaXMuY3VycmVudEJ1ZmZzLmZvckVhY2goKGJ1ZmYsIGluZGV4KSA9PiB7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBidWZmLnR5cGU7XHJcbiAgICAgIGN0eC5maWxsUmVjdCh0aGlzLngsIHRoaXMueSAtIDEwIC0gaW5kZXggKiA1LCB0aGlzLndpZHRoICogKDIwIC0gYnVmZi50aW1lKSAvIDIwLCA1KTtcclxuICAgIH0pXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbmNyZWFzZUhlcm9WZWxvY2l0eUJ5QnVmZihidWZmID0gMikge1xyXG4gIHZlbG9jaXR5LnNwZWVkICo9IGJ1ZmY7XHJcbiAgdmVsb2NpdHkuYWNjZWxlcmF0aW9uICo9IGJ1ZmY7XHJcbiAgdmVsb2NpdHkubWF4QWNjZWxlcmF0aW9uVGltZSAqPSBidWZmO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVjcmVhc2VIZXJvVmVsb2NpdHlCeURlYnVmZihkZUJ1ZmYgPSAyKSB7XHJcbiAgdmVsb2NpdHkuc3BlZWQgLz0gZGVCdWZmO1xyXG4gIHZlbG9jaXR5LmFjY2VsZXJhdGlvbiAvPSBkZUJ1ZmY7XHJcbiAgdmVsb2NpdHkubWF4QWNjZWxlcmF0aW9uVGltZSAvPSBkZUJ1ZmY7XHJcbn0iLCJpbXBvcnQgeyBVbml0IH0gZnJvbSBcIi4vdW5pdFwiO1xyXG5pbXBvcnQgeyBnZXRDZW50ZXJDb29yZGluYXRlcywgaXNEaXN0YW5jZUJldHdlZW5Vbml0c01vcmVUaGFuU2FmZSB9IGZyb20gXCIuLi91dGlscy9nZW9tZXRyeVwiO1xyXG5cclxuY29uc3QgU1BFRUQgPSAwLjY7XHJcbmV4cG9ydCBjb25zdCBCQVNFX1NNQVJUX1NJWkUgPSAxNjtcclxuY29uc3QgaW1nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNtYXJ0LWVuZW15LXNwcml0ZScpXHJcbmNvbnN0IE1FU1NBR0UgPSB7XHJcbiAgeDogMTAsXHJcbiAgeTogNSxcclxuICBmb250OiBcIjEzcHggQXJpYWxcIlxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU21hcnRFbmVteSBleHRlbmRzIFVuaXQge1xyXG4gIGNvbnN0cnVjdG9yKGN0eCwgd2lkdGgsIGhlaWdodCwgeCwgeSwgYWxmYVgsIGFsZmFZLCBzcGVlZCA9IFNQRUVEKSB7XHJcbiAgICBzdXBlcihjdHgsIHdpZHRoLCBoZWlnaHQsIHgsIHksIGFsZmFYLCBhbGZhWSwgc3BlZWQpO1xyXG4gICAgdGhpcy5zcHJpdGUgPSB7XHJcbiAgICAgIGJhc2VYOiAwLFxyXG4gICAgICBiYXNlWTogMCxcclxuICAgICAgeDogMCxcclxuICAgICAgeTogMCxcclxuICAgICAgd2lkdGg6IDE2LFxyXG4gICAgICBoZWlnaHQ6IDE2LFxyXG4gICAgICBkZWx0YVg6IDE2LFxyXG4gICAgICBkZWx0YVk6IDE2XHJcbiAgICB9XHJcbiAgICB0aGlzLmRlZmVuc2UgPSAwO1xyXG4gIH1cclxuXHJcbiAgc2V0TmV4dFNwcml0ZSgpIHtcclxuICAgIGlmICh0aGlzLnNwcml0ZS54IDwgNDgpIHtcclxuICAgICAgdGhpcy5zcHJpdGUueCArPSB0aGlzLnNwcml0ZS5kZWx0YVhcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc3ByaXRlLnggPSB0aGlzLnNwcml0ZS5iYXNlWDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5ld1BvcyhoZXJvKSB7XHJcbiAgICB0aGlzLnVwZGF0ZURpcmVjdGlvbihoZXJvKTtcclxuICAgIHN1cGVyLm5ld1BvcygpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICB1cGRhdGUoY3R4KSB7XHJcbiAgICBjb25zdCB7IHNwcml0ZSwgeCwgeSwgd2lkdGgsIGhlaWdodCB9ID0gdGhpc1xyXG4gICAgY3R4LmRyYXdJbWFnZShpbWcsIHNwcml0ZS54LCBzcHJpdGUueSwgc3ByaXRlLndpZHRoLCBzcHJpdGUuaGVpZ2h0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0KVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBzaG93V2FybmluZ01lc3NhZ2UodGV4dCkge1xyXG4gICAgdGhpcy5jdHguZm9udCA9IE1FU1NBR0UuZm9udDtcclxuICAgIHRoaXMuY3R4LnN0cm9rZVRleHQodGV4dCwgdGhpcy54ICsgTUVTU0FHRS54LCB0aGlzLnkgLSBNRVNTQUdFLnkpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlRGlyZWN0aW9uKGhlcm8pIHtcclxuICAgIGNvbnN0IGZlYXJQYXJhbXMgPSB0aGlzLmdldEZlYXJQYXJhbXMoaGVyby5pc0ltbW9ydGFsKTtcclxuICAgIGlmICghaXNEaXN0YW5jZUJldHdlZW5Vbml0c01vcmVUaGFuU2FmZShoZXJvLCB0aGlzLCBmZWFyUGFyYW1zLmRpc3RhbmNlKSkge1xyXG4gICAgICBjb25zdCBbaGVyb1gsIGhlcm9ZXSA9IGdldENlbnRlckNvb3JkaW5hdGVzKGhlcm8pO1xyXG4gICAgICBjb25zdCBhbmdsZSA9IE1hdGguYXRhbjIoaGVyb1ggLSB0aGlzLnggLSB0aGlzLndpZHRoIC8gMiwgaGVyb1kgLSB0aGlzLnkgLSB0aGlzLmhlaWdodCAvIDIpICsgTWF0aC5QSTtcclxuICAgICAgdGhpcy5kaXIueSA9IGZlYXJQYXJhbXMuaXNGZWFyICogTWF0aC5jb3MoYW5nbGUpO1xyXG4gICAgICB0aGlzLmRpci54ID0gZmVhclBhcmFtcy5pc0ZlYXIgKiBNYXRoLnNpbihhbmdsZSk7XHJcbiAgICAgIHRoaXMuc2hvd1dhcm5pbmdNZXNzYWdlKGZlYXJQYXJhbXMubWVzc2FnZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRGZWFyUGFyYW1zKGlzRmVhcikge1xyXG4gICAgaWYgKGlzRmVhcikge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGRpc3RhbmNlOiAzMDAsXHJcbiAgICAgICAgaXNGZWFyOiAxLFxyXG4gICAgICAgIG1lc3NhZ2U6ICdZb3UgZG9uXFwndCBjYXRjaCBtZSEnXHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgZGlzdGFuY2U6IDIwMCxcclxuICAgICAgICBpc0ZlYXI6IC0xLFxyXG4gICAgICAgIG1lc3NhZ2U6ICdJIHNlZSB5b3UnXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGVhdCh1bml0KSB7XHJcbiAgICBjb25zdCBkZWZlbnNlSW5jcmVhc2UgPSAzO1xyXG4gICAgY29uc3QgczEgPSB0aGlzLndpZHRoICogdGhpcy5oZWlnaHQ7XHJcbiAgICBjb25zdCBzMiA9IHVuaXQud2lkdGggKiB1bml0LmhlaWdodFxyXG4gICAgY29uc3QgayA9IE1hdGgucG93KChzMSArIHMyKSAvIHMxLCAwLjUpXHJcbiAgICB0aGlzLndpZHRoICo9IGs7XHJcbiAgICB0aGlzLmhlaWdodCAqPSBrO1xyXG4gICAgdGhpcy5kZWZlbnNlID0gTWF0aC5tYXgodGhpcy5kZWZlbnNlLCB1bml0LmRlZmVuc2UpICsgZGVmZW5zZUluY3JlYXNlO1xyXG4gICAgdGhpcy5zcGVlZCA9IHRoaXMuc3BlZWQgPiBTUEVFRCA/IHRoaXMuc3BlZWQgKz0gMC4xIDogU1BFRUQ7XHJcbiAgICB0aGlzLnggPSAodGhpcy54ICogczEgKyB1bml0LnggKiBzMikgLyAoczEgKyBzMik7XHJcbiAgICB0aGlzLnkgPSAodGhpcy55ICogczEgKyB1bml0LnkgKiBzMikgLyAoczEgKyBzMik7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IG1vdmVUb0Fub3RoZXJTaWRlSWZHb0JleW9uY2VDYW52YXMgfSBmcm9tIFwiLi4vdXRpbHMvZ2VvbWV0cnlcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBVbml0IHtcclxuICBjb25zdHJ1Y3RvcihjdHgsIHdpZHRoLCBoZWlnaHQsIHgsIHksIGFsZmFYLCBhbGZhWSwgc3BlZWQpIHtcclxuICAgIHRoaXMuY3R4ID0gY3R4O1xyXG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICB0aGlzLnNwZWVkID0gc3BlZWQ7XHJcbiAgICB0aGlzLnggPSB4O1xyXG4gICAgdGhpcy55ID0geTtcclxuICAgIHRoaXMuZGlyID0ge1xyXG4gICAgICB4OiBhbGZhWCxcclxuICAgICAgeTogYWxmYVlcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBuZXdQb3MoKSB7XHJcbiAgICB0aGlzLnggKz0gdGhpcy5zcGVlZCAqIHRoaXMuZGlyLng7XHJcbiAgICB0aGlzLnkgKz0gdGhpcy5zcGVlZCAqIHRoaXMuZGlyLnk7XHJcbiAgICBtb3ZlVG9Bbm90aGVyU2lkZUlmR29CZXlvbmNlQ2FudmFzKHRoaXMuY3R4LCB0aGlzKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBIZXJvIH0gZnJvbSBcIi4vY3JlYXR1cmVzL2hlcm9cIjtcclxuaW1wb3J0IHsgRHVtbXlFbmVteSwgQkFTRV9EVU1NWV9TSVpFLCBTUEVFRCBhcyBEVU1NWV9TUEVBRCB9IGZyb20gXCIuL2NyZWF0dXJlcy9kdW1teUVuZW15XCI7XHJcbmltcG9ydCB7IFNtYXJ0RW5lbXksIEJBU0VfU01BUlRfU0laRSB9IGZyb20gXCIuL2NyZWF0dXJlcy9zbWFydEVuZW15XCI7XHJcbmltcG9ydCB7IGFkZEhlcm9Db250cm9scyB9IGZyb20gXCIuL3V0aWxzL2NvbnRyb2xzXCI7XHJcbmltcG9ydCB7IGlzRGlzdGFuY2VCZXR3ZWVuVW5pdHNNb3JlVGhhblNhZmUsIGlmVW5pdHNUb3VjaEVhY2hPdGhlciwgZ2V0Q2VudGVyQ29vcmRpbmF0ZXMsIGdldEVsZW1lbnRzSW5zaWRlQ2FudmFzIH0gZnJvbSBcIi4vdXRpbHMvZ2VvbWV0cnlcIjtcclxuaW1wb3J0IHsgQnVsbGV0IH0gZnJvbSBcIi4vY3JlYXR1cmVzL2J1bGxldFwiO1xyXG5pbXBvcnQgeyBSYW5kb21CdWZmIH0gZnJvbSAnLi9pdGVtcy9idWZmcy9idWZmLWdlbmVyYXRvcic7XHJcbmltcG9ydCB7IGluaXRpYWxpemVHYW1lLCBzZW5kUmVzdWx0VG9EYXRhYmFzZSB9IGZyb20gJy4vbWFpbic7XHJcbmltcG9ydCB7IExhbmRzY2FwZSB9IGZyb20gJy4vaXRlbXMvbGFuZHNjYXBlJztcclxuaW1wb3J0IHsgZGFtYWdlVW5pdCB9IGZyb20gJy4vdXRpbHMvZWZmZWN0cyc7XHJcblxyXG5jb25zdCBzY29yZUxhYmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zY29yZVwiKTtcclxuXHJcbmV4cG9ydCBjbGFzcyBHYW1lIHtcclxuICBjb25zdHJ1Y3RvcihjYW52YXMpIHtcclxuICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgdGhpcy5jYW52YXMud2lkdGggPSA3MDA7XHJcbiAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSA3MDA7XHJcbiAgICB0aGlzLmN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuXHJcbiAgICB0aGlzLnN0YXJ0VGltZSA9IERhdGUubm93KCk7XHJcbiAgICB0aGlzLmN1cnJlbnRUaW1lID0gRGF0ZS5ub3coKTtcclxuXHJcbiAgICB0aGlzLmhlcm8gPSBuZXcgSGVybyh0aGlzLmN0eCk7XHJcbiAgICB0aGlzLmxhbmRzY2FwZSA9IG5ldyBMYW5kc2NhcGUodGhpcy5jdHgsIDQwLCA0MClcclxuICAgIHRoaXMuZHVtbXlFbmVtaWVzID0gW107XHJcbiAgICB0aGlzLnNtYXJ0RW5lbWllcyA9IFtdO1xyXG4gICAgdGhpcy5oZXJvQnVsbGV0cyA9IFtdO1xyXG4gICAgdGhpcy50aW1lcnMgPSBbXTtcclxuICAgIHRoaXMubHZsID0gMTtcclxuICAgIHRoaXMuYnVmZkl0ZW0gPSAnJztcclxuXHJcbiAgICB0aGlzLmhhbmRsZUhlcm9Qb3NpdGlvbigpO1xyXG4gIH1cclxuXHJcbiAgc3RhcnQoKSB7XHJcbiAgICBjb25zdCB0aW1lcjEgPSBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLnVwZGF0ZUdhbWVTdGF0ZSgpLCAxMCk7XHJcbiAgICBjb25zdCB0aW1lcjIgPSBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLnVwZGF0ZVNwcml0ZXMoKSwgMjAwKTtcclxuICAgIGNvbnN0IHRpbWVyMyA9IHNldEludGVydmFsKCgpID0+IHRoaXMuYWRkRW5lbXkodGhpcy5zbWFydEVuZW1pZXMsIFNtYXJ0RW5lbXksIEJBU0VfU01BUlRfU0laRSksIDIwMDApO1xyXG4gICAgY29uc3QgdGltZXI0ID0gc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy5hZGRFbmVteSh0aGlzLmR1bW15RW5lbWllcywgRHVtbXlFbmVteSwgQkFTRV9EVU1NWV9TSVpFKSwgNDAwMCk7XHJcbiAgICBjb25zdCB0aW1lcjUgPSBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLmFkZEJ1ZmZJdGVtKCksIDgwMDApO1xyXG4gICAgY29uc3QgdGltZXI2ID0gc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy5sdmxVcCgpLCAxMDAwMClcclxuICAgIHRoaXMudGltZXJzLnB1c2godGltZXIxLCB0aW1lcjIsIHRpbWVyMywgdGltZXI0LCB0aW1lcjUsIHRpbWVyNik7XHJcbiAgICBhZGRIZXJvQ29udHJvbHModGhpcy5oZXJvLCAoeCwgeSkgPT4gdGhpcy5hZGRCdWxsZXQoeCwgeSkpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlR2FtZVN0YXRlKCkge1xyXG4gICAgdGhpcy51cGRhdGVTY29yZSgpO1xyXG4gICAgdGhpcy51cGRhdGVDYW52YXNTdGF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlU2NvcmUoKSB7XHJcbiAgICB0aGlzLmN1cnJlbnRUaW1lID0gdGhpcy5jdXJyZW50VGltZSArIDEwO1xyXG4gICAgY29uc3QgdmFsdWUgPSAodGhpcy5jdXJyZW50VGltZSAtIHRoaXMuc3RhcnRUaW1lKSAvIDEwMDA7XHJcbiAgICBzY29yZUxhYmVsLmlubmVySFRNTCA9IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlU3ByaXRlcygpIHtcclxuICAgIGNvbnN0IHNwcml0ZXMgPSBbdGhpcy5oZXJvLCAuLi50aGlzLmR1bW15RW5lbWllcywgLi4udGhpcy5zbWFydEVuZW1pZXNdO1xyXG4gICAgc3ByaXRlcy5mb3JFYWNoKHNwcml0ZSA9PiBzcHJpdGUuc2V0TmV4dFNwcml0ZSgpKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUNhbnZhc1N0YXRlKCkge1xyXG4gICAgdGhpcy5jbGVhckNhbnZhcyh0aGlzLmN0eCk7XHJcbiAgICB0aGlzLmhhbmRsZUhlcm9Qb3NpdGlvbigpO1xyXG4gICAgdGhpcy5oYW5kbGVCdWZmSXRlbVBvc2l0aW9uKCk7XHJcbiAgICB0aGlzLmhhbmRsZUR1bW15RW5lbWllc1Bvc2l0aW9uKCk7XHJcbiAgICB0aGlzLmhhbmRsZVNtYXJ0RW5lbWllc1Bvc2l0aW9uKCk7XHJcbiAgICB0aGlzLmhlcm9CdWxsZXRzID0gZ2V0RWxlbWVudHNJbnNpZGVDYW52YXModGhpcy5jdHgsIHRoaXMuaGVyb0J1bGxldHMpO1xyXG4gICAgdGhpcy5oYW5kbGVFbmVtaWVzRGVhdGgoKTtcclxuICAgIHRoaXMuaGFuZGxlSGVyb0RlYXRoKCk7XHJcbiAgICB0aGlzLmhhbmRsZUJ1ZmZzKCk7XHJcbiAgfVxyXG5cclxuICBjbGVhckNhbnZhcyhjdHgpIHtcclxuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY3R4LmNhbnZhcy5jbGllbnRXaWR0aCwgY3R4LmNhbnZhcy5jbGllbnRIZWlnaHQpO1xyXG4gIH1cclxuXHJcbiAgZHJhd0xhbmRzY2FwZSgpIHtcclxuICAgIHRoaXMubGFuZHNjYXBlLmRyYXcodGhpcy5jdHgpO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlSGVyb1Bvc2l0aW9uKCkge1xyXG4gICAgdGhpcy5oZXJvLm5ld1BvcygpLnVwZGF0ZSh0aGlzLmN0eCkuZHJhd0J1ZmZzKHRoaXMuY3R4KTtcclxuICB9XHJcblxyXG4gIGhhbmRsZUJ1ZmZJdGVtUG9zaXRpb24oKSB7XHJcbiAgICB0aGlzLmJ1ZmZJdGVtICYmIHRoaXMuYnVmZkl0ZW0uZHJhdyh0aGlzLmN0eCk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVEdW1teUVuZW1pZXNQb3NpdGlvbigpIHtcclxuICAgIHRoaXMuZHVtbXlFbmVtaWVzLmZvckVhY2goZW5lbXkgPT4gZW5lbXkubmV3UG9zKCkudXBkYXRlKHRoaXMuY3R4KSk7XHJcbiAgfVxyXG5cclxuICBoYW5kbGVTbWFydEVuZW1pZXNQb3NpdGlvbigpIHtcclxuICAgIHRoaXMuc21hcnRFbmVtaWVzID0gdGhpcy5zbWFydEVuZW1pZXMucmVkdWNlKChuZXdBcnJheSwgY3VycmVudEVuZW15KSA9PiB7XHJcbiAgICAgIGlmIChuZXdBcnJheS5zb21lKGVuZW15ID0+IGlmVW5pdHNUb3VjaEVhY2hPdGhlcihlbmVteSwgY3VycmVudEVuZW15KSkpIHtcclxuICAgICAgICByZXR1cm4gbmV3QXJyYXk7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3Qgc2Vjb25kRW5lbXkgPSB0aGlzLnNtYXJ0RW5lbWllcy5maW5kKGVuZW15ID0+IGlmVW5pdHNUb3VjaEVhY2hPdGhlcihlbmVteSwgY3VycmVudEVuZW15KSAmJiAoZW5lbXkgIT09IGN1cnJlbnRFbmVteSkpXHJcbiAgICAgIGlmIChzZWNvbmRFbmVteSkge1xyXG4gICAgICAgIGN1cnJlbnRFbmVteS5lYXQoc2Vjb25kRW5lbXkpO1xyXG4gICAgICB9XHJcbiAgICAgIG5ld0FycmF5LnB1c2goY3VycmVudEVuZW15KTtcclxuICAgICAgcmV0dXJuIG5ld0FycmF5O1xyXG4gICAgfSwgW10pO1xyXG4gICAgdGhpcy5zbWFydEVuZW1pZXMuZm9yRWFjaChjdXJyZW50RW5lbXkgPT4gY3VycmVudEVuZW15Lm5ld1Bvcyh0aGlzLmhlcm8pLnVwZGF0ZSh0aGlzLmN0eCkpXHJcbiAgfVxyXG5cclxuICBoYW5kbGVFbmVtaWVzRGVhdGgoKSB7XHJcbiAgICBjb25zdCBuZXdTbWFydEVuZW1pZXMgPSBbXTtcclxuICAgIGNvbnN0IG5ld0R1bW15RW5lbWllcyA9IFtdO1xyXG4gICAgY29uc3QgbmV3QnVsbGV0cyA9IFtdO1xyXG4gICAgY29uc3QgYWxsRW5lbWllcyA9IFsuLi50aGlzLnNtYXJ0RW5lbWllcywgLi4udGhpcy5kdW1teUVuZW1pZXNdXHJcblxyXG4gICAgdGhpcy5zbWFydEVuZW1pZXMuZm9yRWFjaChlbmVteSA9PiB7XHJcbiAgICAgIGlmICghdGhpcy5oZXJvQnVsbGV0cy5zb21lKGJ1bGxldCA9PiB0aGlzLnNob3VsZEVuZW15RGllSWZCdWxsZXRIaXRzSGltKGVuZW15LCBidWxsZXQpKSkge1xyXG4gICAgICAgIG5ld1NtYXJ0RW5lbWllcy5wdXNoKGVuZW15KVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICAgdGhpcy5kdW1teUVuZW1pZXMuZm9yRWFjaChlbmVteSA9PiB7XHJcbiAgICAgIGlmICghdGhpcy5oZXJvQnVsbGV0cy5zb21lKGJ1bGxldCA9PiB0aGlzLnNob3VsZEVuZW15RGllSWZCdWxsZXRIaXRzSGltKGVuZW15LCBidWxsZXQpKSkge1xyXG4gICAgICAgIG5ld0R1bW15RW5lbWllcy5wdXNoKGVuZW15KVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICAgdGhpcy5oZXJvQnVsbGV0cy5mb3JFYWNoKGJ1bGxldCA9PiB7XHJcbiAgICAgIGlmICghYWxsRW5lbWllcy5zb21lKGVuZW15ID0+IHRoaXMuc2hvdWxkRW5lbXlEaWVJZkJ1bGxldEhpdHNIaW0oZW5lbXksIGJ1bGxldCkpKSB7XHJcbiAgICAgICAgbmV3QnVsbGV0cy5wdXNoKGJ1bGxldClcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIHRoaXMuc21hcnRFbmVtaWVzID0gbmV3U21hcnRFbmVtaWVzO1xyXG4gICAgdGhpcy5kdW1teUVuZW1pZXMgPSBuZXdEdW1teUVuZW1pZXM7XHJcbiAgICB0aGlzLmhlcm9CdWxsZXRzID0gbmV3QnVsbGV0cztcclxuICB9XHJcblxyXG4gIGhhbmRsZUhlcm9EZWF0aCgpIHtcclxuICAgIGlmICghdGhpcy5oZXJvLmlzSW1tb3J0YWwpIHtcclxuICAgICAgY29uc3QgREVMVEEgPSAxMDtcclxuICAgICAgY29uc3QgZW5lbWllcyA9IFsuLi50aGlzLmR1bW15RW5lbWllcywgLi4udGhpcy5zbWFydEVuZW1pZXNdO1xyXG4gICAgICBpZiAoZW5lbWllcy5zb21lKGVuZW15ID0+IGlmVW5pdHNUb3VjaEVhY2hPdGhlcih0aGlzLmhlcm8sIGVuZW15LCBERUxUQSkpKSB7XHJcbiAgICAgICAgdGhpcy5maW5pc2hHYW1lKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZpbmlzaEdhbWUoKSB7XHJcbiAgICB0aGlzLnRpbWVycy5tYXAodGltZXIgPT4gY2xlYXJJbnRlcnZhbCh0aW1lcikpO1xyXG4gICAgdGhpcy5oZXJvLmN1cnJlbnRCdWZmc2J1ZmYoYnVmZiA9PiBjbGVhckludGVydmFsKGJ1ZmYudGltZXIpKTtcclxuICAgIGNvbnN0IHNjb3JlID0gc2NvcmVMYWJlbC5pbm5lclRleHQ7XHJcbiAgICBjb25zdCBuYW1lID0gcHJvbXB0KFwiWW91IGxvc2UsIHlvdXIgc2NvcmUgaXMgXCIgKyBzY29yZSwgJ1VzZXInKTtcclxuICAgIHNlbmRSZXN1bHRUb0RhdGFiYXNlKHNjb3JlLCBuYW1lIHx8ICdVc2VyJyk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IGluaXRpYWxpemVHYW1lKCksIDEwKTtcclxuICB9XHJcblxyXG4gIGhhbmRsZUJ1ZmZzKCkge1xyXG4gICAgaWYgKGlmVW5pdHNUb3VjaEVhY2hPdGhlcih0aGlzLmhlcm8sIHRoaXMuYnVmZkl0ZW0pKSB7XHJcbiAgICAgIGNvbnN0IEJVRkZfVElNRSA9IDIwMDAwO1xyXG4gICAgICB0aGlzLmJ1ZmZJdGVtLmFjdGl2YXRlQnVmZih0aGlzLCBCVUZGX1RJTUUpO1xyXG4gICAgICB0aGlzLmJ1ZmZJdGVtID0gJydcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGx2bFVwKCkge1xyXG4gICAgdGhpcy5hZGRFbmVteVN0YWNrKHRoaXMuc21hcnRFbmVtaWVzLCBTbWFydEVuZW15LCBCQVNFX1NNQVJUX1NJWkUpO1xyXG4gICAgdGhpcy5hZGRFbmVteVN0YWNrKHRoaXMuZHVtbXlFbmVtaWVzLCBEdW1teUVuZW15LCBCQVNFX0RVTU1ZX1NJWkUpO1xyXG4gICAgdGhpcy5sdmwrKztcclxuICAgIGNvbnNvbGUubG9nKHRoaXMubHZsKTtcclxuICB9XHJcblxyXG4gIHNob3VsZEVuZW15RGllSWZCdWxsZXRIaXRzSGltKGVuZW15LCBidWxsZXQpIHtcclxuICAgIGNvbnN0IE1JTl9TSVpFID0gMjU7XHJcbiAgICBjb25zdCBpc0NvbnRhY3QgPSBpZlVuaXRzVG91Y2hFYWNoT3RoZXIoZW5lbXksIGJ1bGxldClcclxuICAgIGlmIChpc0NvbnRhY3QpIHtcclxuICAgICAgZW5lbXkgPSBkYW1hZ2VVbml0KGVuZW15KVxyXG4gICAgfVxyXG4gICAgaWYgKGlzQ29udGFjdCAmJiAoZW5lbXkud2lkdGggPCBNSU5fU0laRSB8fCBlbmVteS5oZWlnaHQgPCBNSU5fU0laRSkpIHtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gZmFsc2VcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFkZEVuZW15KGVuZW15QXJyYXksIGNyZWF0dXJlQ29uc3RydWN0b3IsIGJhc2VTaXplKSB7XHJcbiAgICBjb25zdCB7IHNpemUsIHgsIHksIGFsZmFYLCBhbGZhWSB9ID0gdGhpcy5nZW5lcmF0ZVJhbmRvbVBvc2l0aW9uQW5kRGlyZWN0aW9uKHRoaXMuaGVybywgYmFzZVNpemUpO1xyXG4gICAgY29uc3QgZW5lbXkgPSBuZXcgY3JlYXR1cmVDb25zdHJ1Y3Rvcih0aGlzLmN0eCwgc2l6ZSwgc2l6ZSwgeCwgeSwgYWxmYVgsIGFsZmFZLCBEVU1NWV9TUEVBRCArIDAuMTUgKiB0aGlzLmx2bCk7XHJcbiAgICBlbmVteUFycmF5LnB1c2goZW5lbXkpO1xyXG4gIH1cclxuXHJcbiAgYWRkRW5lbXlTdGFjayhlbmVteUFycmF5LCBjcmVhdHVyZUNvbnN0cnVjdG9yLCBiYXNlU2l6ZSkge1xyXG4gICAgY29uc3QgeyBzaXplLCB4LCB5LCBhbGZhWCwgYWxmYVkgfSA9IHRoaXMuZ2VuZXJhdGVSYW5kb21Qb3NpdGlvbkFuZERpcmVjdGlvbih0aGlzLmhlcm8sIGJhc2VTaXplKTtcclxuICAgIGNvbnN0IGVuZW15ID0gbmV3IGNyZWF0dXJlQ29uc3RydWN0b3IodGhpcy5jdHgsIHNpemUsIHNpemUsIHgsIHksIGFsZmFYLCBhbGZhWSk7XHJcbiAgICBlbmVteUFycmF5LnB1c2goZW5lbXkpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmx2bDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IHsgc2l6ZSwgeCwgeSB9ID0gdGhpcy5nZW5lcmF0ZVJhbmRvbVBvc2l0aW9uQW5kRGlyZWN0aW9uKGVuZW15LCBiYXNlU2l6ZSwgdHJ1ZSwgMTAwKTtcclxuICAgICAgY29uc3QgbmV3RW5lbXkgPSBuZXcgY3JlYXR1cmVDb25zdHJ1Y3Rvcih0aGlzLmN0eCwgc2l6ZSwgc2l6ZSwgeCwgeSwgYWxmYVgsIGFsZmFZKTtcclxuICAgICAgZW5lbXlBcnJheS5wdXNoKG5ld0VuZW15KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFkZEJ1bGxldCh4LCB5KSB7XHJcbiAgICBjb25zdCBbaGVyb1gsIGhlcm9ZXSA9IGdldENlbnRlckNvb3JkaW5hdGVzKHRoaXMuaGVybyk7XHJcbiAgICBjb25zdCBhbmdsZSA9IE1hdGguYXRhbjIoaGVyb1ggLSB4LCBoZXJvWSAtIHkpICsgTWF0aC5QSTtcclxuICAgIGNvbnN0IGJ1bGxldCA9IG5ldyBCdWxsZXQodGhpcy5jdHgsIGhlcm9YLCBoZXJvWSwgTWF0aC5zaW4oYW5nbGUpLCBNYXRoLmNvcyhhbmdsZSkpO1xyXG4gICAgdGhpcy5oZXJvQnVsbGV0cy5wdXNoKGJ1bGxldCk7XHJcbiAgfVxyXG5cclxuICBhZGRCdWZmSXRlbSgpIHtcclxuICAgIGNvbnN0IHNpemUgPSAyMDtcclxuICAgIGNvbnN0IHsgeCwgeSB9ID0gdGhpcy5nZW5lcmF0ZVJhbmRvbVBvc2l0aW9uQW5kRGlyZWN0aW9uKHRoaXMuaGVybywgMCk7XHJcbiAgICBjb25zdCBidWZmSXRlbSA9IG5ldyBSYW5kb21CdWZmKHRoaXMuY3R4LCBzaXplLCBzaXplLCB4LCB5KTtcclxuICAgIHRoaXMuYnVmZkl0ZW0gPSBidWZmSXRlbTtcclxuICB9XHJcblxyXG4gIGdlbmVyYXRlUmFuZG9tUG9zaXRpb25BbmREaXJlY3Rpb24oaGVybywgYmFzZVNpemUsIGlzSW5zaWRlQ2lyY2xlID0gZmFsc2UsIGRpc3RhbmNlID0gMjAwKSB7XHJcbiAgICBsZXQgeDtcclxuICAgIGxldCB5O1xyXG4gICAgY29uc3Qgc2l6ZSA9IE1hdGgucmFuZG9tKCkgKiAyMCArIGJhc2VTaXplICsgdGhpcy5sdmwgKiA1O1xyXG4gICAgbGV0IGNvbmRpdGlvbjtcclxuICAgIGRvIHtcclxuICAgICAgeCA9IE1hdGgucmFuZG9tKCkgKiB0aGlzLmN0eC5jYW52YXMuY2xpZW50V2lkdGg7XHJcbiAgICAgIHkgPSBNYXRoLnJhbmRvbSgpICogdGhpcy5jdHguY2FudmFzLmNsaWVudEhlaWdodDtcclxuICAgICAgY29uc3QgbmV3VW5pdCA9IHsgeCwgeSwgd2lkdGg6IHNpemUsIGhlaWdodDogc2l6ZSB9O1xyXG4gICAgICBjb25kaXRpb24gPSBpc0Rpc3RhbmNlQmV0d2VlblVuaXRzTW9yZVRoYW5TYWZlKGhlcm8sIG5ld1VuaXQsIGRpc3RhbmNlKTtcclxuICAgIH0gd2hpbGUgKGlzSW5zaWRlQ2lyY2xlID8gY29uZGl0aW9uIDogIWNvbmRpdGlvbik7XHJcblxyXG4gICAgY29uc3QgYWxmYVggPSBNYXRoLnJhbmRvbSgpICogMiAtIDE7XHJcbiAgICBjb25zdCBhbGZhWSA9IE1hdGgucmFuZG9tKCkgKiAyIC0gMTtcclxuXHJcbiAgICByZXR1cm4geyB4LCB5LCBhbGZhWCwgYWxmYVksIHNpemUgfTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgU3dvcmQgfSBmcm9tICcuL3N3b3JkJztcclxuaW1wb3J0IHsgU2hpZWxkIH0gZnJvbSAnLi9zaGllbGQnO1xyXG5pbXBvcnQgeyBTaG9lcyB9IGZyb20gJy4vc2hvZXMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGJ1ZmZUeXBlcyA9IFt7XHJcbiAgc2VsZWN0b3I6ICcuc3dvcmQnLFxyXG4gIGNvbnN0cnVjdG9yOiBTd29yZCxcclxuICBjb2xvcjogJ3JlZCdcclxufSwge1xyXG4gIHNlbGVjdG9yOiAnLnNoaWVsZCcsXHJcbiAgY29uc3RydWN0b3I6IFNoaWVsZCxcclxuICBjb2xvcjogJ2JsYWNrJ1xyXG59LCB7XHJcbiAgc2VsZWN0b3I6ICcuc2hvZXMnLFxyXG4gIGNvbnN0cnVjdG9yOiBTaG9lcyxcclxuICBjb2xvcjogJ2JsdWUnXHJcbn1dXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gUmFuZG9tQnVmZihjdHgsIHdpZHRoLCBoZWlnaHQsIHgsIHkpIHtcclxuICBjb25zdCBidWZmVHlwZSA9IGJ1ZmZUeXBlc1t+fihNYXRoLnJhbmRvbSgpICogMyldXHJcbiAgY29uc3QgYnVmZiA9IGJ1ZmZUeXBlLmNvbnN0cnVjdG9yXHJcbiAgcmV0dXJuIG5ldyBidWZmKGN0eCwgd2lkdGgsIGhlaWdodCwgeCwgeSwgYnVmZlR5cGUuc2VsZWN0b3IpO1xyXG59OyIsIlxyXG5leHBvcnQgY2xhc3MgSXRlbSB7XHJcbiAgY29uc3RydWN0b3IoY3R4LCB3aWR0aCwgaGVpZ2h0LCB4LCB5LCBzZWxlY3Rvcikge1xyXG4gICAgdGhpcy5jdHggPSBjdHg7XHJcbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuICAgIHRoaXMueCA9IHg7XHJcbiAgICB0aGlzLnkgPSB5O1xyXG4gICAgdGhpcy5zcHJpdGUgPSB7XHJcbiAgICAgIHg6IDAsXHJcbiAgICAgIHk6IDAsXHJcbiAgICAgIHdpZHRoOiAxNixcclxuICAgICAgaGVpZ2h0OiAxNixcclxuICAgIH1cclxuICAgIHRoaXMuaW1hZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIGRyYXcoY3R4KSB7XHJcbiAgICBjb25zdCB7IGltYWdlLCBzcHJpdGUsIHgsIHksIHdpZHRoLCBoZWlnaHQgfSA9IHRoaXNcclxuICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UsIHNwcml0ZS54LCBzcHJpdGUueSwgc3ByaXRlLndpZHRoLCBzcHJpdGUuaGVpZ2h0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0KVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEl0ZW0gfSBmcm9tICcuL2l0ZW0nO1xyXG5pbXBvcnQgeyBhZGRCdWZmSW5kaWNhdG9yIH0gZnJvbSAnLi4vLi4vdXRpbHMvZWZmZWN0cydcclxuaW1wb3J0IHsgYnVmZlR5cGVzIH0gZnJvbSAnLi9idWZmLWdlbmVyYXRvcic7XHJcblxyXG5leHBvcnQgY2xhc3MgU2hpZWxkIGV4dGVuZHMgSXRlbSB7XHJcbiAgY29uc3RydWN0b3IoY3R4LCB3aWR0aCwgaGVpZ2h0LCB4LCB5LCB0eXBlKSB7XHJcbiAgICBzdXBlcihjdHgsIHdpZHRoLCBoZWlnaHQsIHgsIHksIHR5cGUpO1xyXG4gIH1cclxuXHJcbiAgYWN0aXZhdGVCdWZmKGdhbWVPYmplY3QsIHRpbWUpIHtcclxuICAgIGFkZEJ1ZmZJbmRpY2F0b3IoZ2FtZU9iamVjdC5oZXJvLCBidWZmVHlwZXNbMV0uY29sb3IpO1xyXG4gICAgZ2FtZU9iamVjdC5oZXJvLmlzSW1tb3J0YWwgPSB0cnVlO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiBnYW1lT2JqZWN0Lmhlcm8uaXNJbW1vcnRhbCA9IGZhbHNlLCB0aW1lKVxyXG4gIH1cclxufSIsImltcG9ydCB7IEl0ZW0gfSBmcm9tICcuL2l0ZW0nO1xyXG5pbXBvcnQgeyBpbmNyZWFzZUhlcm9WZWxvY2l0eUJ5QnVmZiwgZGVjcmVhc2VIZXJvVmVsb2NpdHlCeURlYnVmZiB9IGZyb20gJy4uLy4uL2NyZWF0dXJlcy9oZXJvJztcclxuaW1wb3J0IHsgYWRkQnVmZkluZGljYXRvciB9IGZyb20gJy4uLy4uL3V0aWxzL2VmZmVjdHMnXHJcbmltcG9ydCB7IGJ1ZmZUeXBlcyB9IGZyb20gJy4vYnVmZi1nZW5lcmF0b3InO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNob2VzIGV4dGVuZHMgSXRlbSB7XHJcbiAgY29uc3RydWN0b3IoY3R4LCB3aWR0aCwgaGVpZ2h0LCB4LCB5LCB0eXBlKSB7XHJcbiAgICBzdXBlcihjdHgsIHdpZHRoLCBoZWlnaHQsIHgsIHksIHR5cGUpO1xyXG4gIH1cclxuXHJcbiAgYWN0aXZhdGVCdWZmKGdhbWVPYmplY3QsIHRpbWUpIHtcclxuICAgIGNvbnN0IHZhbHVlID0gNTtcclxuICAgIGFkZEJ1ZmZJbmRpY2F0b3IoZ2FtZU9iamVjdC5oZXJvLCBidWZmVHlwZXNbMl0uY29sb3IpO1xyXG4gICAgaW5jcmVhc2VIZXJvVmVsb2NpdHlCeUJ1ZmYoKTtcclxuICAgIGNvbnN0IGVuZW1pZXMgPSBbLi4uZ2FtZU9iamVjdC5zbWFydEVuZW1pZXMsIC4uLmdhbWVPYmplY3QuZHVtbXlFbmVtaWVzXTtcclxuICAgIGVuZW1pZXMuZm9yRWFjaChlbmVteSA9PiBlbmVteS5zcGVlZCAvPSB2YWx1ZSk7XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIGRlY3JlYXNlSGVyb1ZlbG9jaXR5QnlEZWJ1ZmYoKTtcclxuICAgICAgZW5lbWllcy5mb3JFYWNoKGVuZW15ID0+IGVuZW15LnNwZWVkICo9IHZhbHVlKTtcclxuICAgIH0sIHRpbWUpXHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgSXRlbSB9IGZyb20gJy4vaXRlbSc7XHJcbmltcG9ydCB7IGdyb3dCdWxsZXQsIHNocmlua0J1bGxldCB9IGZyb20gJy4uLy4uL2NyZWF0dXJlcy9idWxsZXQnO1xyXG5pbXBvcnQgeyBhZGRCdWZmSW5kaWNhdG9yIH0gZnJvbSAnLi4vLi4vdXRpbHMvZWZmZWN0cydcclxuaW1wb3J0IHsgYnVmZlR5cGVzIH0gZnJvbSAnLi9idWZmLWdlbmVyYXRvcic7XHJcblxyXG5leHBvcnQgY2xhc3MgU3dvcmQgZXh0ZW5kcyBJdGVtIHtcclxuICBjb25zdHJ1Y3RvcihjdHgsIHdpZHRoLCBoZWlnaHQsIHgsIHksIHR5cGUpIHtcclxuICAgIHN1cGVyKGN0eCwgd2lkdGgsIGhlaWdodCwgeCwgeSwgdHlwZSk7XHJcbiAgfVxyXG5cclxuICBhY3RpdmF0ZUJ1ZmYoZ2FtZU9iamVjdCwgdGltZSkge1xyXG4gICAgYWRkQnVmZkluZGljYXRvcihnYW1lT2JqZWN0Lmhlcm8sIGJ1ZmZUeXBlc1swXS5jb2xvcik7XHJcbiAgICBncm93QnVsbGV0KCk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHNocmlua0J1bGxldCgpLCB0aW1lKTtcclxuICB9XHJcbn0iLCJcclxuZXhwb3J0IGNsYXNzIExhbmRzY2FwZSB7XHJcbiAgY29uc3RydWN0b3IoY3R4LCB3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICB0aGlzLmN0eCA9IGN0eDtcclxuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcclxuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgdGhpcy5jYW52YXNXaWR0aCA9IGN0eC5jYW52YXMuY2xpZW50V2lkdGg7XHJcbiAgICB0aGlzLmNhbnZhc0hlaWdodCA9IGN0eC5jYW52YXMuY2xpZW50V2lkdGg7XHJcbiAgICB0aGlzLnNwcml0ZSA9IHtcclxuICAgICAgeDogMCxcclxuICAgICAgeTogMCxcclxuICAgICAgd2lkdGg6IDMyLFxyXG4gICAgICBoZWlnaHQ6IDMyLFxyXG4gICAgfVxyXG4gICAgdGhpcy5pbWFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sYW5kc2NhcGUnKTtcclxuICB9XHJcblxyXG4gIGRyYXcoY3R4KSB7XHJcbiAgICBjb25zdCB7IGltYWdlLCBzcHJpdGUsIGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQsIHdpZHRoLCBoZWlnaHQgfSA9IHRoaXNcclxuICAgIGZvciAobGV0IHggPSAwOyB4IDwgY2FudmFzV2lkdGg7IHggKz0gd2lkdGgpIHtcclxuICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBjYW52YXNIZWlnaHQ7IHkgKz0gaGVpZ2h0KSB7XHJcbiAgICAgICAgY3R4LmRyYXdJbWFnZShpbWFnZSwgc3ByaXRlLngsIHNwcml0ZS55LCBzcHJpdGUud2lkdGgsIHNwcml0ZS5oZWlnaHQsIHgsIHksIHdpZHRoLCBoZWlnaHQpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBHYW1lIH0gZnJvbSBcIi4vZ2FtZS1hcmVuYVwiO1xyXG5cclxubGV0IGdhbWU7XHJcbmNvbnN0IHNjb3JlTGFiZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnNjb3JlXCIpO1xyXG5jb25zdCBzcGVlZExhYmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNwZWVkJyk7XHJcbmNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJjYW52YXNcIik7XHJcblxyXG5jb25zdCBVUkwgPSAnaHR0cHM6Ly9zaG9vdGVyLWdhbWUtMmExYmUuZmlyZWJhc2Vpby5jb20vc3RhdGlzdGljcy8uanNvbic7XHJcbmxldCBiZXN0U2NvcmVzID0gW107XHJcblxyXG5pbml0aWFsaXplR2FtZSgpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVHYW1lKCkge1xyXG4gIGdldFNjb3JlRnJvbURhdGFiYXNlKCk7XHJcbiAgZ2FtZSA9IG5ldyBHYW1lKGNhbnZhcyk7XHJcbiAgc2NvcmVMYWJlbC5pbm5lckhUTUwgPSAwO1xyXG4gIHNwZWVkTGFiZWwuaW5uZXJIVE1MID0gMDtcclxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgc3RhcnRHYW1lLCB7IG9uY2U6IHRydWUgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN0YXJ0R2FtZSgpIHtcclxuICBnYW1lLnN0YXJ0KCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZW5kUmVzdWx0VG9EYXRhYmFzZShzY29yZSwgbmFtZSkge1xyXG4gIGZldGNoKFVSTCwge1xyXG4gICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IHNjb3JlLCBuYW1lIH0pXHJcbiAgfSlcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjb3JlRnJvbURhdGFiYXNlKCkge1xyXG4gIGZldGNoKFVSTCwgeyBtZXRob2Q6ICdHRVQnIH0pXHJcbiAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgYmVzdFNjb3JlcyA9IGRhdGE7XHJcbiAgICAgIGNvbnNvbGUubG9nKGJlc3RTY29yZXMpXHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUubG9nKCdtaXN0ZXJpb3VzIGVycm9yJykpXHJcbn1cclxuIiwiY29uc3QgY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignY2FudmFzJyk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkSGVyb0NvbnRyb2xzKGhlcm8sIGNyZWF0ZUJ1bGxldCkge1xyXG4gIHN1YnNyaWJlVG9Nb3ZlKGhlcm8pO1xyXG4gIHN1YnNjcmliZVRvU2hvb3QoY3JlYXRlQnVsbGV0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gc3Vic2NyaWJlVG9TaG9vdChjcmVhdGVCdWxsZXQpIHtcclxuICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XHJcbiAgICBjcmVhdGVCdWxsZXQoZXZlbnQub2Zmc2V0WCwgZXZlbnQub2Zmc2V0WSk7XHJcbiAgfSlcclxufVxyXG5cclxuZnVuY3Rpb24gc3Vic3JpYmVUb01vdmUoaGVybykge1xyXG4gIGNvbnN0IHsgZGlyIH0gPSBoZXJvO1xyXG4gIGxldCBwcmV2aW91c0tleUNvZGU7XHJcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZXZlbnQgPT4ge1xyXG4gICAgcHJldmlvdXNLZXlDb2RlID0gY2hhbmdlU3BlZWRJZkhlcm9DaGFuZ2VkRGlyZWN0aW9uKHByZXZpb3VzS2V5Q29kZSwgZXZlbnQua2V5Q29kZSwgaGVybyk7XHJcbiAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcclxuICAgICAgY2FzZSAzODoge1xyXG4gICAgICAgIGhlcm8udXBkYXRlU3ByaXRlRGlyZWN0aW9uKCd0b3AnKTtcclxuICAgICAgICBkaXIueSA9IC0xO1xyXG4gICAgICAgIGRpci54ID0gMDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlIDM5OiB7XHJcbiAgICAgICAgaGVyby51cGRhdGVTcHJpdGVEaXJlY3Rpb24oJ3JpZ2h0Jyk7XHJcbiAgICAgICAgZGlyLnkgPSAwO1xyXG4gICAgICAgIGRpci54ID0gMTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlIDQwOiB7XHJcbiAgICAgICAgaGVyby51cGRhdGVTcHJpdGVEaXJlY3Rpb24oJ2JvdHRvbScpO1xyXG4gICAgICAgIGRpci55ID0gMTtcclxuICAgICAgICBkaXIueCA9IDA7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAzNzoge1xyXG4gICAgICAgIGhlcm8udXBkYXRlU3ByaXRlRGlyZWN0aW9uKCdsZWZ0Jyk7XHJcbiAgICAgICAgZGlyLnggPSAtMTtcclxuICAgICAgICBkaXIueSA9IDA7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAxNzoge1xyXG4gICAgICAgIGRpci54ID0gMDtcclxuICAgICAgICBkaXIueSA9IDA7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hhbmdlU3BlZWRJZkhlcm9DaGFuZ2VkRGlyZWN0aW9uKHByZXZpb3VzS2V5Q29kZSwgbmV3S2V5Q29kZSwgaGVybykge1xyXG4gIGlmIChwcmV2aW91c0tleUNvZGUgIT09IG5ld0tleUNvZGUpIHtcclxuICAgIGhlcm8ubWFrZUhlcm9TcGVlZFBhcmFtc0RlZmF1bHQoKTtcclxuICAgIGhlcm8uc2V0TmV3U3BlZWRUaW1lcigpO1xyXG4gICAgcmV0dXJuIG5ld0tleUNvZGU7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBwcmV2aW91c0tleUNvZGU7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuIiwiaW1wb3J0IHsgQlVMTEVUIH0gZnJvbSAnLi4vY3JlYXR1cmVzL2J1bGxldCdcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkYW1hZ2VVbml0KHVuaXQpIHtcclxuICBjb25zdCB7IHNwZWVkRGVjcmVhc2UgfSA9IEJVTExFVDtcclxuICBjb25zdCBtYXNzID0gdW5pdC53aWR0aCAqIHVuaXQuaGVpZ2h0O1xyXG5cclxuICBjb25zdCBoZXJvRGFtYWdlID0gZ2V0SGVyb0RhbWFnZVRvVW5pdCh1bml0KTtcclxuICBjb25zdCBrID0gKG1hc3MgLSBoZXJvRGFtYWdlKSAvIG1hc3M7XHJcbiAgdW5pdC53aWR0aCAqPSBrO1xyXG4gIHVuaXQuaGVpZ2h0ICo9IGs7XHJcbiAgdW5pdC5zcGVlZCA+IHNwZWVkRGVjcmVhc2UgPyB1bml0LnNwZWVkIC09IHNwZWVkRGVjcmVhc2UgOiAwO1xyXG4gIHJldHVybiB1bml0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRIZXJvRGFtYWdlVG9Vbml0KHVuaXQpIHtcclxuICBjb25zdCB7IGRhbWFnZSB9ID0gQlVMTEVUO1xyXG4gIGNvbnN0IG1pbkRhbWFnZSA9IDQ7XHJcbiAgY29uc3QgZGVmZW5zZSA9IHVuaXQuZGVmZW5zZSB8fCAwO1xyXG4gIHJldHVybiBkYW1hZ2UgLSBkZWZlbnNlID4gMCA/IGRhbWFnZSAtIGRlZmVuc2UgOiBtaW5EYW1hZ2U7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRCdWZmSW5kaWNhdG9yKGhlcm8sIGNvbG9yKSB7XHJcbiAgY29uc3QgaWQgPSBEYXRlLm5vdygpO1xyXG4gIGNvbnN0IG5ld0J1ZmYgPSB7XHJcbiAgICBpZDogaWQsXHJcbiAgICB0aW1lOiAwLFxyXG4gICAgdHlwZTogY29sb3IsXHJcbiAgfVxyXG4gIGhlcm8uY3VycmVudEJ1ZmZzLnB1c2gobmV3QnVmZilcclxuICBhZGRCdWZmVGltZXJUb0hlcm8oaGVybywgaWQpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZEJ1ZmZUaW1lclRvSGVybyhoZXJvLCBpZCkge1xyXG4gIGNvbnN0IGJ1ZmYgPSBoZXJvLmN1cnJlbnRCdWZmcy5maW5kKGJ1ZmYgPT4gaWQgPT09IGJ1ZmYuaWQpXHJcbiAgYnVmZi50aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgIGJ1ZmYudGltZSArPSAxO1xyXG4gICAgaWYgKGJ1ZmYudGltZSA+PSAyMCkge1xyXG4gICAgICBjbGVhckludGVydmFsKGJ1ZmYudGltZXIpO1xyXG4gICAgICBoZXJvLmN1cnJlbnRCdWZmcy5zaGlmdCgpO1xyXG4gICAgfVxyXG4gIH0sIDEwMDApXHJcbn1cclxuXHJcbmNvbnN0IGJ1ZmZUeXBlcyA9IFsncmVkJywgJ2JsYWNrJywgJ3JlZCcsICdncmVlbicsICdvcmFuZ2UnXVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlQnVmZlR5cGUoKSB7XHJcbiAgcmV0dXJuIGJ1ZmZUeXBlc1t+fihNYXRoLnJhbmRvbSgpICogNSldXHJcbn0iLCJleHBvcnQgZnVuY3Rpb24gZ2V0Q2VudGVyQ29vcmRpbmF0ZXModW5pdCkge1xyXG4gIHJldHVybiBbdW5pdC54ICsgMC41ICogdW5pdC53aWR0aCwgdW5pdC55ICsgMC41ICogdW5pdC5oZWlnaHRdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGlzdGFuY2VCZXR3ZWVuVW5pdHModW5pdDEsIHVuaXQyKSB7XHJcbiAgY29uc3QgW3gxLCB5MV0gPSBnZXRDZW50ZXJDb29yZGluYXRlcyh1bml0MSk7XHJcbiAgY29uc3QgW3gyLCB5Ml0gPSBnZXRDZW50ZXJDb29yZGluYXRlcyh1bml0Mik7XHJcbiAgcmV0dXJuIE1hdGgucG93KE1hdGgucG93KHgxIC0geDIsIDIpICsgTWF0aC5wb3coeTEgLSB5MiwgMiksIDAuNSk7XHJcbn1cclxuXHJcbmNvbnN0IFBJWEVMX0JPUkRFUiA9IDJcclxuZXhwb3J0IGZ1bmN0aW9uIGlmVW5pdHNUb3VjaEVhY2hPdGhlcih1bml0MSwgdW5pdDIsIGRlbHRhID0gMCkge1xyXG4gIGNvbnN0IFt4MSwgeTFdID0gZ2V0Q2VudGVyQ29vcmRpbmF0ZXModW5pdDEpO1xyXG4gIGNvbnN0IFt4MiwgeTJdID0gZ2V0Q2VudGVyQ29vcmRpbmF0ZXModW5pdDIpO1xyXG4gIHJldHVybiAoXHJcbiAgICBNYXRoLmFicyh4MiAtIHgxKSA8ICh1bml0MS53aWR0aCArIHVuaXQyLndpZHRoIC0gUElYRUxfQk9SREVSIC0gZGVsdGEpIC8gMlxyXG4gICAgJiYgTWF0aC5hYnMoeTIgLSB5MSkgPCAodW5pdDEuaGVpZ2h0ICsgdW5pdDIuaGVpZ2h0IC0gUElYRUxfQk9SREVSIC0gZGVsdGEpIC8gMlxyXG4gICk7XHJcbn1cclxuXHJcbmNvbnN0IFNBRkVfRElTVEFOQ0UgPSAyMDA7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNEaXN0YW5jZUJldHdlZW5Vbml0c01vcmVUaGFuU2FmZSh1bml0MSwgdW5pdDIsIGRpc3QgPSBTQUZFX0RJU1RBTkNFKSB7XHJcbiAgcmV0dXJuIGdldERpc3RhbmNlQmV0d2VlblVuaXRzKHVuaXQxLCB1bml0MikgPiBkaXN0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VVbml0cyh1bml0MSwgdW5pdDIpIHtcclxuICBjb25zdCBtYXNzMSA9IHVuaXQxLndpZHRoICogdW5pdDEuaGVpZ2h0O1xyXG4gIGNvbnN0IG1hc3MyID0gdW5pdDIud2lkdGggKiB1bml0Mi5oZWlnaHRcclxuICBjb25zdCBrID0gTWF0aC5wb3coKG1hc3MxICsgbWFzczIpIC8gbWFzczEsIDAuNSlcclxuICB1bml0MS53aWR0aCAqPSBrO1xyXG4gIHVuaXQxLmhlaWdodCAqPSBrO1xyXG4gIHJldHVybiB1bml0MTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1vdmVUb0Fub3RoZXJTaWRlSWZHb0JleW9uY2VDYW52YXMoY3R4LCB1bml0KSB7XHJcbiAgbGV0IHdpZHRoID0gY3R4LmNhbnZhcy5jbGllbnRXaWR0aDtcclxuICBsZXQgaGVpZ2h0ID0gY3R4LmNhbnZhcy5jbGllbnRIZWlnaHQ7XHJcblxyXG4gIGlmICh1bml0LnggPiB3aWR0aCkge1xyXG4gICAgdW5pdC54ID0gMDtcclxuICB9IGVsc2UgaWYgKHVuaXQueCA8IDApIHtcclxuICAgIHVuaXQueCA9IHdpZHRoO1xyXG4gIH1cclxuICBpZiAodW5pdC55ID4gaGVpZ2h0KSB7XHJcbiAgICB1bml0LnkgPSAwO1xyXG4gIH0gZWxzZSBpZiAodW5pdC55IDwgMCkge1xyXG4gICAgdW5pdC55ID0gaGVpZ2h0O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnRzSW5zaWRlQ2FudmFzKGN0eCwgdW5pdHMpIHtcclxuICBjb25zdCB3aWR0aCA9IGN0eC5jYW52YXMuY2xpZW50V2lkdGg7XHJcbiAgY29uc3QgaGVpZ2h0ID0gY3R4LmNhbnZhcy5jbGllbnRIZWlnaHQ7XHJcblxyXG4gIGxldCBpc0luc2lkZUNhbnZhcztcclxuICByZXR1cm4gdW5pdHMuZmlsdGVyKHVuaXQgPT4ge1xyXG4gICAgaXNJbnNpZGVDYW52YXMgPSB1bml0LnggPCB3aWR0aCAmJiB1bml0LnggPiAwICYmIHVuaXQueSA8IGhlaWdodCAmJiB1bml0LnkgPiAwO1xyXG4gICAgaWYgKGlzSW5zaWRlQ2FudmFzKSB7XHJcbiAgICAgIHVuaXQubmV3UG9zKCkudXBkYXRlKGN0eCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXNJbnNpZGVDYW52YXM7XHJcbiAgfSk7XHJcbn0iXX0=
